

Microchip Technology PIC18 LITE Macro Assembler V1.41 build -162212810 
                                                                                               Mon Jan 10 09:13:52 2022

Microchip Technology Omniscient Code Generator v1.41 (Free mode) build 201701250102
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     7                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    11                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    13                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    14                           	psect	text0,global,reloc=2,class=CODE,delta=1
    15                           	psect	text1,global,reloc=2,class=CODE,delta=1
    16                           	psect	text2,global,reloc=2,class=CODE,delta=1
    17                           	psect	text3,global,reloc=2,class=CODE,delta=1
    18                           	psect	text4,global,reloc=2,class=CODE,delta=1
    19                           	psect	text5,global,reloc=2,class=CODE,delta=1
    20                           	psect	text6,global,reloc=2,class=CODE,delta=1
    21                           	psect	text7,global,reloc=2,class=CODE,delta=1
    22                           	psect	text8,global,reloc=2,class=CODE,delta=1
    23                           	psect	text9,global,reloc=2,class=CODE,delta=1
    24                           	psect	text10,global,reloc=2,class=CODE,delta=1
    25                           	psect	text11,global,reloc=2,class=CODE,delta=1
    26                           	psect	text12,global,reloc=2,class=CODE,delta=1
    27                           	psect	text13,global,reloc=2,class=CODE,delta=1
    28                           	psect	text14,global,reloc=2,class=CODE,delta=1,group=1
    29                           	psect	text15,global,reloc=2,class=CODE,delta=1
    30                           	psect	text16,global,reloc=2,class=CODE,delta=1
    31                           	psect	text17,global,reloc=2,class=CODE,delta=1
    32                           	psect	text18,global,reloc=2,class=CODE,delta=1,group=1
    33                           	psect	text19,global,reloc=2,class=CODE,delta=1,group=1
    34                           	psect	text20,global,reloc=2,class=CODE,delta=1
    35                           	psect	text21,global,reloc=2,class=CODE,delta=1
    36                           	psect	text22,global,reloc=2,class=CODE,delta=1
    37                           	psect	text23,global,reloc=2,class=CODE,delta=1,group=2
    38                           	psect	text24,global,reloc=2,class=CODE,delta=1,group=2
    39                           	psect	text25,global,reloc=2,class=CODE,delta=1
    40                           	psect	text26,global,reloc=2,class=CODE,delta=1
    41                           	psect	text27,global,reloc=2,class=CODE,delta=1
    42                           	psect	text28,global,reloc=2,class=CODE,delta=1
    43                           	psect	text29,global,reloc=2,class=CODE,delta=1
    44                           	psect	text30,global,reloc=2,class=CODE,delta=1
    45                           	psect	text31,global,reloc=2,class=CODE,delta=1,group=1
    46                           	psect	text32,global,reloc=2,class=CODE,delta=1,group=1
    47                           	psect	text33,global,reloc=2,class=CODE,delta=1,group=1
    48                           	psect	text34,global,reloc=2,class=CODE,delta=1
    49                           	psect	text35,global,reloc=2,class=CODE,delta=1,group=2
    50                           	psect	text36,global,reloc=2,class=CODE,delta=1,group=2
    51                           	psect	text37,global,reloc=2,class=CODE,delta=1,group=1
    52                           	psect	text38,global,reloc=2,class=CODE,delta=1
    53                           	psect	text39,global,reloc=2,class=CODE,delta=1,group=2
    54                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    55                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    56                           	psect	text41,global,reloc=2,class=CODE,delta=1
    57                           	psect	text42,global,reloc=2,class=CODE,delta=1
    58                           	psect	text43,global,reloc=2,class=CODE,delta=1
    59                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    60                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    61                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    62  0000                     
    63                           ; Version 1.41
    64                           ; Generated 25/01/2017 GMT
    65                           ; 
    66                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    67                           ; All rights reserved.
    68                           ; 
    69                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    70                           ; 
    71                           ; Redistribution and use in source and binary forms, with or without modification, are
    72                           ; permitted provided that the following conditions are met:
    73                           ; 
    74                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    75                           ;        conditions and the following disclaimer.
    76                           ; 
    77                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    78                           ;        of conditions and the following disclaimer in the documentation and/or other
    79                           ;        materials provided with the distribution.
    80                           ; 
    81                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    82                           ;        software without specific prior written permission.
    83                           ; 
    84                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    85                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    86                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    87                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    88                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    89                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    90                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    91                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    92                           ; 
    93                           ; 
    94                           ; Code-generator required, PIC18F4550 Definitions
    95                           ; 
    96                           ; SFR Addresses
    97  0000                     
    98                           	psect	idataBANK0
    99  002462                     __pidataBANK0:
   100                           	opt stack 0
   101                           
   102                           ;initializer for _qtdDias_mes
   103  002462  001F               	dw	31
   104  002464  001C               	dw	28
   105  002466  001F               	dw	31
   106  002468  001E               	dw	30
   107  00246A  001F               	dw	31
   108  00246C  001E               	dw	30
   109  00246E  001F               	dw	31
   110  002470  001F               	dw	31
   111  002472  001E               	dw	30
   112  002474  001F               	dw	31
   113  002476  001E               	dw	30
   114  002478  001F               	dw	31
   115                           
   116                           	psect	smallconst
   117  000800                     __psmallconst:
   118                           	opt stack 0
   119  000800  00                 	db	0
   120  000801                     _dpowers:
   121                           	opt stack 0
   122  000801  0001               	dw	1
   123  000803  000A               	dw	10
   124  000805  0064               	dw	100
   125  000807  03E8               	dw	1000
   126  000809  2710               	dw	10000
   127  00080B                     __end_of_dpowers:
   128                           	opt stack 0
   129  00080B                     STR_12:
   130  00080B  48                 	db	72	;'H'
   131  00080C  4F                 	db	79	;'O'
   132  00080D  52                 	db	82	;'R'
   133  00080E  41                 	db	65	;'A'
   134  00080F  3A                 	db	58	;':'
   135  000810  20                 	db	32
   136  000811  30                 	db	48	;'0'
   137  000812  25                 	db	37
   138  000813  69                 	db	105	;'i'
   139  000814  3A                 	db	58	;':'
   140  000815  30                 	db	48	;'0'
   141  000816  25                 	db	37
   142  000817  69                 	db	105	;'i'
   143  000818  3A                 	db	58	;':'
   144  000819  30                 	db	48	;'0'
   145  00081A  25                 	db	37
   146  00081B  69                 	db	105	;'i'
   147  00081C  00                 	db	0
   148  00081D                     STR_4:
   149  00081D  44                 	db	68	;'D'
   150  00081E  41                 	db	65	;'A'
   151  00081F  54                 	db	84	;'T'
   152  000820  41                 	db	65	;'A'
   153  000821  3A                 	db	58	;':'
   154  000822  20                 	db	32
   155  000823  30                 	db	48	;'0'
   156  000824  25                 	db	37
   157  000825  69                 	db	105	;'i'
   158  000826  2F                 	db	47
   159  000827  30                 	db	48	;'0'
   160  000828  25                 	db	37
   161  000829  69                 	db	105	;'i'
   162  00082A  2F                 	db	47
   163  00082B  25                 	db	37
   164  00082C  69                 	db	105	;'i'
   165  00082D  00                 	db	0
   166  00082E                     STR_8:
   167  00082E  48                 	db	72	;'H'
   168  00082F  4F                 	db	79	;'O'
   169  000830  52                 	db	82	;'R'
   170  000831  41                 	db	65	;'A'
   171  000832  3A                 	db	58	;':'
   172  000833  20                 	db	32
   173  000834  25                 	db	37
   174  000835  69                 	db	105	;'i'
   175  000836  3A                 	db	58	;':'
   176  000837  30                 	db	48	;'0'
   177  000838  25                 	db	37
   178  000839  69                 	db	105	;'i'
   179  00083A  3A                 	db	58	;':'
   180  00083B  30                 	db	48	;'0'
   181  00083C  25                 	db	37
   182  00083D  69                 	db	105	;'i'
   183  00083E  00                 	db	0
   184  00083F                     STR_10:
   185  00083F  48                 	db	72	;'H'
   186  000840  4F                 	db	79	;'O'
   187  000841  52                 	db	82	;'R'
   188  000842  41                 	db	65	;'A'
   189  000843  3A                 	db	58	;':'
   190  000844  20                 	db	32
   191  000845  30                 	db	48	;'0'
   192  000846  25                 	db	37
   193  000847  69                 	db	105	;'i'
   194  000848  3A                 	db	58	;':'
   195  000849  25                 	db	37
   196  00084A  69                 	db	105	;'i'
   197  00084B  3A                 	db	58	;':'
   198  00084C  30                 	db	48	;'0'
   199  00084D  25                 	db	37
   200  00084E  69                 	db	105	;'i'
   201  00084F  00                 	db	0
   202  000850                     STR_11:
   203  000850  48                 	db	72	;'H'
   204  000851  4F                 	db	79	;'O'
   205  000852  52                 	db	82	;'R'
   206  000853  41                 	db	65	;'A'
   207  000854  3A                 	db	58	;':'
   208  000855  20                 	db	32
   209  000856  30                 	db	48	;'0'
   210  000857  25                 	db	37
   211  000858  69                 	db	105	;'i'
   212  000859  3A                 	db	58	;':'
   213  00085A  30                 	db	48	;'0'
   214  00085B  25                 	db	37
   215  00085C  69                 	db	105	;'i'
   216  00085D  3A                 	db	58	;':'
   217  00085E  25                 	db	37
   218  00085F  69                 	db	105	;'i'
   219  000860  00                 	db	0
   220  000861                     STR_3:
   221  000861  44                 	db	68	;'D'
   222  000862  41                 	db	65	;'A'
   223  000863  54                 	db	84	;'T'
   224  000864  41                 	db	65	;'A'
   225  000865  3A                 	db	58	;':'
   226  000866  20                 	db	32
   227  000867  30                 	db	48	;'0'
   228  000868  25                 	db	37
   229  000869  69                 	db	105	;'i'
   230  00086A  2F                 	db	47
   231  00086B  25                 	db	37
   232  00086C  69                 	db	105	;'i'
   233  00086D  2F                 	db	47
   234  00086E  25                 	db	37
   235  00086F  69                 	db	105	;'i'
   236  000870  00                 	db	0
   237  000871                     STR_2:
   238  000871  44                 	db	68	;'D'
   239  000872  41                 	db	65	;'A'
   240  000873  54                 	db	84	;'T'
   241  000874  41                 	db	65	;'A'
   242  000875  3A                 	db	58	;':'
   243  000876  20                 	db	32
   244  000877  25                 	db	37
   245  000878  69                 	db	105	;'i'
   246  000879  2F                 	db	47
   247  00087A  30                 	db	48	;'0'
   248  00087B  25                 	db	37
   249  00087C  69                 	db	105	;'i'
   250  00087D  2F                 	db	47
   251  00087E  25                 	db	37
   252  00087F  69                 	db	105	;'i'
   253  000880  00                 	db	0
   254  000881                     STR_6:
   255  000881  48                 	db	72	;'H'
   256  000882  4F                 	db	79	;'O'
   257  000883  52                 	db	82	;'R'
   258  000884  41                 	db	65	;'A'
   259  000885  3A                 	db	58	;':'
   260  000886  20                 	db	32
   261  000887  25                 	db	37
   262  000888  69                 	db	105	;'i'
   263  000889  3A                 	db	58	;':'
   264  00088A  25                 	db	37
   265  00088B  69                 	db	105	;'i'
   266  00088C  3A                 	db	58	;':'
   267  00088D  30                 	db	48	;'0'
   268  00088E  25                 	db	37
   269  00088F  69                 	db	105	;'i'
   270  000890  00                 	db	0
   271  000891                     STR_7:
   272  000891  48                 	db	72	;'H'
   273  000892  4F                 	db	79	;'O'
   274  000893  52                 	db	82	;'R'
   275  000894  41                 	db	65	;'A'
   276  000895  3A                 	db	58	;':'
   277  000896  20                 	db	32
   278  000897  25                 	db	37
   279  000898  69                 	db	105	;'i'
   280  000899  3A                 	db	58	;':'
   281  00089A  30                 	db	48	;'0'
   282  00089B  25                 	db	37
   283  00089C  69                 	db	105	;'i'
   284  00089D  3A                 	db	58	;':'
   285  00089E  25                 	db	37
   286  00089F  69                 	db	105	;'i'
   287  0008A0  00                 	db	0
   288  0008A1                     STR_9:
   289  0008A1  48                 	db	72	;'H'
   290  0008A2  4F                 	db	79	;'O'
   291  0008A3  52                 	db	82	;'R'
   292  0008A4  41                 	db	65	;'A'
   293  0008A5  3A                 	db	58	;':'
   294  0008A6  20                 	db	32
   295  0008A7  30                 	db	48	;'0'
   296  0008A8  25                 	db	37
   297  0008A9  69                 	db	105	;'i'
   298  0008AA  3A                 	db	58	;':'
   299  0008AB  25                 	db	37
   300  0008AC  69                 	db	105	;'i'
   301  0008AD  3A                 	db	58	;':'
   302  0008AE  25                 	db	37
   303  0008AF  69                 	db	105	;'i'
   304  0008B0  00                 	db	0
   305  0008B1                     STR_1:
   306  0008B1  44                 	db	68	;'D'
   307  0008B2  41                 	db	65	;'A'
   308  0008B3  54                 	db	84	;'T'
   309  0008B4  41                 	db	65	;'A'
   310  0008B5  3A                 	db	58	;':'
   311  0008B6  20                 	db	32
   312  0008B7  25                 	db	37
   313  0008B8  69                 	db	105	;'i'
   314  0008B9  2F                 	db	47
   315  0008BA  25                 	db	37
   316  0008BB  69                 	db	105	;'i'
   317  0008BC  2F                 	db	47
   318  0008BD  25                 	db	37
   319  0008BE  69                 	db	105	;'i'
   320  0008BF  00                 	db	0
   321  0008C0                     STR_5:
   322  0008C0  48                 	db	72	;'H'
   323  0008C1  4F                 	db	79	;'O'
   324  0008C2  52                 	db	82	;'R'
   325  0008C3  41                 	db	65	;'A'
   326  0008C4  3A                 	db	58	;':'
   327  0008C5  20                 	db	32
   328  0008C6  25                 	db	37
   329  0008C7  69                 	db	105	;'i'
   330  0008C8  3A                 	db	58	;':'
   331  0008C9  25                 	db	37
   332  0008CA  69                 	db	105	;'i'
   333  0008CB  3A                 	db	58	;':'
   334  0008CC  25                 	db	37
   335  0008CD  69                 	db	105	;'i'
   336  0008CE  00                 	db	0
   337  0008CF                     STR_21:
   338  0008CF  41                 	db	65	;'A'
   339  0008D0  4C                 	db	76	;'L'
   340  0008D1  41                 	db	65	;'A'
   341  0008D2  52                 	db	82	;'R'
   342  0008D3  4D                 	db	77	;'M'
   343  0008D4  45                 	db	69	;'E'
   344  0008D5  3A                 	db	58	;':'
   345  0008D6  20                 	db	32
   346  0008D7  00                 	db	0
   347  0008D8                     STR_22:
   348  0008D8  41                 	db	65	;'A'
   349  0008D9  00                 	db	0
   350  0000                     
   351                           ; #config settings
   352  0008DA  00                 	db	0	; dummy byte at the end
   353  0000                     
   354                           	psect	nvBANK0
   355  0000BC                     __pnvBANK0:
   356                           	opt stack 0
   357  0000BC                     _flagTela:
   358                           	opt stack 0
   359  0000BC                     	ds	2
   360  0000BE                     _flag_inicializacao:
   361                           	opt stack 0
   362  0000BE                     	ds	2
   363  0000C0                     _flagDisplay:
   364                           	opt stack 0
   365  0000C0                     	ds	2
   366  0000                     _TMR0	set	4054
   367  0000                     _TRISBbits	set	3987
   368  0000                     _PORTB	set	3969
   369  0000                     _LATBbits	set	3978
   370  0000                     _TRISCbits	set	3988
   371  0000                     _TXSTA	set	4012
   372  0000                     _RCSTA	set	4011
   373  0000                     _TXSTAbits	set	4012
   374  0000                     _RCSTAbits	set	4011
   375  0000                     _SPBRG	set	4015
   376  0000                     _TXREG	set	4013
   377  0000                     _RCREG	set	4014
   378  0000                     _PIR1bits	set	3998
   379  0000                     _PORTDbits	set	3971
   380  0000                     _TRISD	set	3989
   381  0000                     _TRISB	set	3987
   382  0000                     _INTCONbits	set	4082
   383  0000                     _T0CONbits	set	4053
   384  0000                     _PEIE	set	32662
   385  0000                     _RCIE	set	31981
   386  0000                     _RCIP	set	31997
   387  0000                     _BRGH	set	32098
   388  0000                     _TXIF	set	31988
   389  0000                     _RCIF	set	31989
   390  0000                     _TMR0IF	set	32658
   391                           
   392                           	psect	cinit
   393  002160                     __pcinit:
   394                           	opt stack 0
   395  002160                     start_initialization:
   396                           	opt stack 0
   397  002160                     __initialization:
   398                           	opt stack 0
   399                           
   400                           ; Initialize objects allocated to BANK0 (24 bytes)
   401                           ; load TBLPTR registers with __pidataBANK0
   402  002160  0E62               	movlw	low __pidataBANK0
   403  002162  6EF6               	movwf	tblptrl,c
   404  002164  0E24               	movlw	high __pidataBANK0
   405  002166  6EF7               	movwf	tblptrh,c
   406  002168  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   407  00216A  6EF8               	movwf	tblptru,c
   408  00216C  EE00  F0A4         	lfsr	0,__pdataBANK0
   409  002170  EE10 F018          	lfsr	1,24
   410  002174                     copy_data0:
   411  002174  0009               	tblrd		*+
   412  002176  CFF5 FFEE          	movff	tablat,postinc0
   413  00217A  50E5               	movf	postdec1,w,c
   414  00217C  50E1               	movf	fsr1l,w,c
   415  00217E  E1FA               	bnz	copy_data0
   416                           
   417                           ; Clear objects allocated to BANK0 (28 bytes)
   418  002180  EE00  F088         	lfsr	0,__pbssBANK0
   419  002184  0E1C               	movlw	28
   420  002186                     clear_0:
   421  002186  6AEE               	clrf	postinc0,c
   422  002188  06E8               	decf	wreg,f,c
   423  00218A  E1FD               	bnz	clear_0
   424                           
   425                           ; Clear objects allocated to COMRAM (30 bytes)
   426  00218C  EE00  F022         	lfsr	0,__pbssCOMRAM
   427  002190  0E1E               	movlw	30
   428  002192                     clear_1:
   429  002192  6AEE               	clrf	postinc0,c
   430  002194  06E8               	decf	wreg,f,c
   431  002196  E1FD               	bnz	clear_1
   432  002198                     end_of_initialization:
   433                           	opt stack 0
   434  002198                     __end_of__initialization:
   435                           	opt stack 0
   436  002198  9040               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   437  00219A  9240               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   438  00219C  0E00               	movlw	low (__Lmediumconst shr (0+16))
   439  00219E  6EF8               	movwf	tblptru,c
   440  0021A0  0100               	movlb	0
   441  0021A2  EFC9  F009         	goto	_main	;jump to C main() function
   442                           tblptru	equ	0xFF8
   443                           tblptrh	equ	0xFF7
   444                           tblptrl	equ	0xFF6
   445                           tablat	equ	0xFF5
   446                           postinc0	equ	0xFEE
   447                           wreg	equ	0xFE8
   448                           postdec1	equ	0xFE5
   449                           fsr1l	equ	0xFE1
   450                           
   451                           	psect	bssCOMRAM
   452  000022                     __pbssCOMRAM:
   453                           	opt stack 0
   454  000022                     _tempoAlarme:
   455                           	opt stack 0
   456  000022                     	ds	2
   457  000024                     _flagAlarme:
   458                           	opt stack 0
   459  000024                     	ds	2
   460  000026                     _posCursorR:
   461                           	opt stack 0
   462  000026                     	ds	2
   463  000028                     _posCursor:
   464                           	opt stack 0
   465  000028                     	ds	2
   466  00002A                     _i:
   467                           	opt stack 0
   468  00002A                     	ds	2
   469  00002C                     _serial_data:
   470                           	opt stack 0
   471  00002C                     	ds	1
   472  00002D                     _ESTADO_COMUNICACAO:
   473                           	opt stack 0
   474  00002D                     	ds	1
   475  00002E                     _alarme:
   476                           	opt stack 0
   477  00002E                     	ds	6
   478  000034                     _re:
   479                           	opt stack 0
   480  000034                     	ds	6
   481  00003A                     _ca:
   482                           	opt stack 0
   483  00003A                     	ds	6
   484                           tblptru	equ	0xFF8
   485                           tblptrh	equ	0xFF7
   486                           tblptrl	equ	0xFF6
   487                           tablat	equ	0xFF5
   488                           postinc0	equ	0xFEE
   489                           wreg	equ	0xFE8
   490                           postdec1	equ	0xFE5
   491                           fsr1l	equ	0xFE1
   492                           
   493                           	psect	bssBANK0
   494  000088                     __pbssBANK0:
   495                           	opt stack 0
   496  000088                     _BUFFRESP:
   497                           	opt stack 0
   498  000088                     	ds	7
   499  00008F                     exibirAlarme@string:
   500                           	opt stack 0
   501  00008F                     	ds	2
   502  000091                     exibirHora@string:
   503                           	opt stack 0
   504  000091                     	ds	2
   505  000093                     exibirData@string:
   506                           	opt stack 0
   507  000093                     	ds	2
   508  000095                     _entrar:
   509                           	opt stack 0
   510  000095                     	ds	2
   511  000097                     _T2:
   512                           	opt stack 0
   513  000097                     	ds	2
   514  000099                     _T1:
   515                           	opt stack 0
   516  000099                     	ds	2
   517  00009B                     _contador:
   518                           	opt stack 0
   519  00009B                     	ds	2
   520  00009D                     _dado:
   521                           	opt stack 0
   522  00009D                     	ds	7
   523                           tblptru	equ	0xFF8
   524                           tblptrh	equ	0xFF7
   525                           tblptrl	equ	0xFF6
   526                           tablat	equ	0xFF5
   527                           postinc0	equ	0xFEE
   528                           wreg	equ	0xFE8
   529                           postdec1	equ	0xFE5
   530                           fsr1l	equ	0xFE1
   531                           
   532                           	psect	dataBANK0
   533  0000A4                     __pdataBANK0:
   534                           	opt stack 0
   535  0000A4                     _qtdDias_mes:
   536                           	opt stack 0
   537  0000A4                     	ds	24
   538                           tblptru	equ	0xFF8
   539                           tblptrh	equ	0xFF7
   540                           tblptrl	equ	0xFF6
   541                           tablat	equ	0xFF5
   542                           postinc0	equ	0xFEE
   543                           wreg	equ	0xFE8
   544                           postdec1	equ	0xFE5
   545                           fsr1l	equ	0xFE1
   546                           
   547                           	psect	cstackBANK0
   548  000060                     __pcstackBANK0:
   549                           	opt stack 0
   550  000060                     ??_SetDDRamAddr:
   551  000060                     ?___lwdiv:
   552                           	opt stack 0
   553  000060                     putsXLCD@buffer:
   554                           	opt stack 0
   555  000060                     ___lwdiv@dividend:
   556                           	opt stack 0
   557                           
   558                           ; 2 bytes @ 0x0
   559  000060                     	ds	2
   560  000062                     ??_ajustarAlarme:
   561  000062                     ___lwdiv@divisor:
   562                           	opt stack 0
   563                           
   564                           ; 2 bytes @ 0x2
   565  000062                     	ds	1
   566  000063                     ??_controlaCursor:
   567  000063                     ??_controlaCursorR:
   568  000063                     OpenXLCD@lcdtype:
   569                           	opt stack 0
   570                           
   571                           ; 1 bytes @ 0x3
   572  000063                     	ds	1
   573  000064                     ___lwdiv@counter:
   574                           	opt stack 0
   575                           
   576                           ; 1 bytes @ 0x4
   577  000064                     	ds	1
   578  000065                     ___lwdiv@quotient:
   579                           	opt stack 0
   580                           
   581                           ; 2 bytes @ 0x5
   582  000065                     	ds	2
   583  000067                     ?___lwmod:
   584                           	opt stack 0
   585  000067                     ___lwmod@dividend:
   586                           	opt stack 0
   587                           
   588                           ; 2 bytes @ 0x7
   589  000067                     	ds	2
   590  000069                     ___lwmod@divisor:
   591                           	opt stack 0
   592                           
   593                           ; 2 bytes @ 0x9
   594  000069                     	ds	2
   595  00006B                     ?_sprintf:
   596                           	opt stack 0
   597  00006B                     sprintf@sp:
   598                           	opt stack 0
   599                           
   600                           ; 2 bytes @ 0xB
   601  00006B                     	ds	2
   602  00006D                     sprintf@f:
   603                           	opt stack 0
   604                           
   605                           ; 2 bytes @ 0xD
   606  00006D                     	ds	8
   607  000075                     sprintf@ap:
   608                           	opt stack 0
   609                           
   610                           ; 2 bytes @ 0x15
   611  000075                     	ds	2
   612  000077                     sprintf@flag:
   613                           	opt stack 0
   614                           
   615                           ; 1 bytes @ 0x17
   616  000077                     	ds	1
   617  000078                     sprintf@prec:
   618                           	opt stack 0
   619                           
   620                           ; 1 bytes @ 0x18
   621  000078                     	ds	1
   622  000079                     sprintf@val:
   623                           	opt stack 0
   624                           
   625                           ; 2 bytes @ 0x19
   626  000079                     	ds	2
   627  00007B                     sprintf@c:
   628                           	opt stack 0
   629                           
   630                           ; 1 bytes @ 0x1B
   631  00007B                     	ds	1
   632  00007C                     ?_exibirData:
   633                           	opt stack 0
   634  00007C                     ?_exibirHora:
   635                           	opt stack 0
   636  00007C                     ?_exibirAlarme:
   637                           	opt stack 0
   638  00007C                     exibirData@dia:
   639                           	opt stack 0
   640  00007C                     exibirHora@h:
   641                           	opt stack 0
   642  00007C                     exibirAlarme@h:
   643                           	opt stack 0
   644                           
   645                           ; 2 bytes @ 0x1C
   646  00007C                     	ds	2
   647  00007E                     exibirData@mes:
   648                           	opt stack 0
   649  00007E                     exibirHora@m:
   650                           	opt stack 0
   651  00007E                     exibirAlarme@m:
   652                           	opt stack 0
   653                           
   654                           ; 2 bytes @ 0x1E
   655  00007E                     	ds	2
   656  000080                     exibirData@ano:
   657                           	opt stack 0
   658  000080                     exibirHora@s:
   659                           	opt stack 0
   660  000080                     exibirAlarme@s:
   661                           	opt stack 0
   662                           
   663                           ; 2 bytes @ 0x20
   664  000080                     	ds	2
   665  000082                     putrsXLCD@buffer:
   666                           	opt stack 0
   667                           
   668                           ; 2 bytes @ 0x22
   669  000082                     	ds	2
   670  000084                     ??_atualiza_tela:
   671                           
   672                           ; 1 bytes @ 0x24
   673  000084                     	ds	2
   674  000086                     ??_main:
   675                           
   676                           ; 1 bytes @ 0x26
   677  000086                     	ds	2
   678                           tblptru	equ	0xFF8
   679                           tblptrh	equ	0xFF7
   680                           tblptrl	equ	0xFF6
   681                           tablat	equ	0xFF5
   682                           postinc0	equ	0xFEE
   683                           wreg	equ	0xFE8
   684                           postdec1	equ	0xFE5
   685                           fsr1l	equ	0xFE1
   686                           
   687                           	psect	cstackCOMRAM
   688  000001                     __pcstackCOMRAM:
   689                           	opt stack 0
   690  000001                     converte_char_hex@dado:
   691                           	opt stack 0
   692  000001                     verifica_b@ano:
   693                           	opt stack 0
   694                           
   695                           ; 2 bytes @ 0x0
   696  000001                     	ds	2
   697  000003                     ??_verifica_b:
   698                           
   699                           ; 1 bytes @ 0x2
   700  000003                     	ds	2
   701  000005                     tratar_relogio@c:
   702                           	opt stack 0
   703                           
   704                           ; 2 bytes @ 0x4
   705  000005                     	ds	2
   706  000007                     tratar_relogio@r:
   707                           	opt stack 0
   708                           
   709                           ; 2 bytes @ 0x6
   710  000007                     	ds	2
   711  000009                     ??_tratar_relogio:
   712                           
   713                           ; 1 bytes @ 0x8
   714  000009                     	ds	9
   715  000012                     ??_SerialRxPinInterrupt:
   716                           
   717                           ; 1 bytes @ 0x11
   718  000012                     	ds	14
   719  000020                     ??_ajustarT1:
   720  000020                     ??_Delay10KTCYx:
   721  000020                     ?_despertar:
   722                           	opt stack 0
   723  000020                     ?_crc16:
   724                           	opt stack 0
   725  000020                     tx_data@data:
   726                           	opt stack 0
   727  000020                     Delay10TCYx@unit:
   728                           	opt stack 0
   729  000020                     Delay1KTCYx@unit:
   730                           	opt stack 0
   731  000020                     ___lwmod@counter:
   732                           	opt stack 0
   733  000020                     tratar_alarme@c:
   734                           	opt stack 0
   735  000020                     crc16@dados:
   736                           	opt stack 0
   737                           
   738                           ; 2 bytes @ 0x1F
   739  000020                     	ds	1
   740  000021                     ??_sprintf:
   741  000021                     SetDDRamAddr@DDaddr:
   742                           	opt stack 0
   743  000021                     WriteCmdXLCD@cmd:
   744                           	opt stack 0
   745  000021                     WriteDataXLCD@data:
   746                           	opt stack 0
   747  000021                     Delay10KTCYx@unit:
   748                           	opt stack 0
   749                           
   750                           ; 1 bytes @ 0x20
   751  000021                     	ds	1
   752  000022                     tblptru	equ	0xFF8
   753                           tblptrh	equ	0xFF7
   754                           tblptrl	equ	0xFF6
   755                           tablat	equ	0xFF5
   756                           postinc0	equ	0xFEE
   757                           wreg	equ	0xFE8
   758                           postdec1	equ	0xFE5
   759                           fsr1l	equ	0xFE1
   760                           
   761                           ; 1 bytes @ 0x21
   762 ;;
   763 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   764 ;;
   765 ;; *************** function _main *****************
   766 ;; Defined at:
   767 ;;		line 15 in file "main.c"
   768 ;; Parameters:    Size  Location     Type
   769 ;;		None
   770 ;; Auto vars:     Size  Location     Type
   771 ;;		None
   772 ;; Return value:  Size  Location     Type
   773 ;;                  1    wreg      void 
   774 ;; Registers used:
   775 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   776 ;; Tracked objects:
   777 ;;		On entry : 0/0
   778 ;;		On exit  : 0/0
   779 ;;		Unchanged: 0/0
   780 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   781 ;;      Params:         0       0       0       0       0       0       0       0       0
   782 ;;      Locals:         0       0       0       0       0       0       0       0       0
   783 ;;      Temps:          0       2       0       0       0       0       0       0       0
   784 ;;      Totals:         0       2       0       0       0       0       0       0       0
   785 ;;Total ram usage:        2 bytes
   786 ;; Hardware stack levels required when called:    9
   787 ;; This function calls:
   788 ;;		_InitXLCD
   789 ;;		_LCD_Clear
   790 ;;		_ajustarAlarme
   791 ;;		_ajustarT1
   792 ;;		_atualiza_tela
   793 ;;		_despertar
   794 ;;		_despertarAlarme
   795 ;;		_inicializaTela1
   796 ;;		_inicializarUART
   797 ;;		_maquina_estado
   798 ;; This function is called by:
   799 ;;		Startup code after reset
   800 ;; This function uses a non-reentrant model
   801 ;;
   802                           
   803                           	psect	text0
   804  001392                     __ptext0:
   805                           	opt stack 0
   806  001392                     _main:
   807                           	opt stack 22
   808                           
   809                           ;main.c: 18: ca.ano = 2004;
   810                           
   811                           ;incstack = 0
   812  001392  0E07               	movlw	7
   813  001394  6E3F               	movwf	_ca+5,c
   814  001396  0ED4               	movlw	212
   815  001398  6E3E               	movwf	_ca+4,c
   816                           
   817                           ;main.c: 19: ca.mes = 2;
   818  00139A  0E00               	movlw	0
   819  00139C  6E3D               	movwf	_ca+3,c
   820  00139E  0E02               	movlw	2
   821  0013A0  6E3C               	movwf	_ca+2,c
   822                           
   823                           ;main.c: 20: ca.dia = 28;
   824  0013A2  0E00               	movlw	0
   825  0013A4  6E3B               	movwf	_ca+1,c
   826  0013A6  0E1C               	movlw	28
   827  0013A8  6E3A               	movwf	_ca,c
   828                           
   829                           ;main.c: 21: re.hora=23;
   830  0013AA  0E00               	movlw	0
   831  0013AC  6E39               	movwf	_re+5,c
   832  0013AE  0E17               	movlw	23
   833  0013B0  6E38               	movwf	_re+4,c
   834                           
   835                           ;main.c: 22: re.minuto=59;
   836  0013B2  0E00               	movlw	0
   837  0013B4  6E35               	movwf	_re+1,c
   838  0013B6  0E3B               	movlw	59
   839  0013B8  6E34               	movwf	_re,c
   840                           
   841                           ;main.c: 23: re.segundo=35;
   842  0013BA  0E00               	movlw	0
   843  0013BC  6E37               	movwf	_re+3,c
   844  0013BE  0E23               	movlw	35
   845  0013C0  6E36               	movwf	_re+2,c
   846                           
   847                           ;main.c: 24: alarme.hora = 5;
   848  0013C2  0E00               	movlw	0
   849  0013C4  6E33               	movwf	_alarme+5,c
   850  0013C6  0E05               	movlw	5
   851  0013C8  6E32               	movwf	_alarme+4,c
   852                           
   853                           ;main.c: 25: alarme.minuto = 2;
   854  0013CA  0E00               	movlw	0
   855  0013CC  6E2F               	movwf	_alarme+1,c
   856  0013CE  0E02               	movlw	2
   857  0013D0  6E2E               	movwf	_alarme,c
   858                           
   859                           ;main.c: 26: alarme.segundo = 1;
   860  0013D2  0E00               	movlw	0
   861  0013D4  6E31               	movwf	_alarme+3,c
   862  0013D6  0E01               	movlw	1
   863  0013D8  6E30               	movwf	_alarme+2,c
   864                           
   865                           ;main.c: 27: flagDisplay = 1;
   866  0013DA  0E00               	movlw	0
   867  0013DC  0100               	movlb	0	; () banked
   868  0013DE  6FC1               	movwf	(_flagDisplay+1)& (0+255),b
   869  0013E0  0E01               	movlw	1
   870  0013E2  6FC0               	movwf	_flagDisplay& (0+255),b
   871                           
   872                           ;main.c: 28: flag_inicializacao = 1;
   873  0013E4  0E00               	movlw	0
   874  0013E6  0100               	movlb	0	; () banked
   875  0013E8  6FBF               	movwf	(_flag_inicializacao+1)& (0+255),b
   876  0013EA  0E01               	movlw	1
   877  0013EC  6FBE               	movwf	_flag_inicializacao& (0+255),b
   878                           
   879                           ;main.c: 29: contador = 0;
   880  0013EE  0E00               	movlw	0
   881  0013F0  0100               	movlb	0	; () banked
   882  0013F2  6F9C               	movwf	(_contador+1)& (0+255),b
   883  0013F4  0E00               	movlw	0
   884  0013F6  6F9B               	movwf	_contador& (0+255),b
   885                           
   886                           ;main.c: 30: flagTela = 1;
   887  0013F8  0E00               	movlw	0
   888  0013FA  0100               	movlb	0	; () banked
   889  0013FC  6FBD               	movwf	(_flagTela+1)& (0+255),b
   890  0013FE  0E01               	movlw	1
   891  001400  6FBC               	movwf	_flagTela& (0+255),b
   892                           
   893                           ;main.c: 31: T1 = 0;
   894  001402  0E00               	movlw	0
   895  001404  0100               	movlb	0	; () banked
   896  001406  6F9A               	movwf	(_T1+1)& (0+255),b
   897  001408  0E00               	movlw	0
   898  00140A  6F99               	movwf	_T1& (0+255),b
   899                           
   900                           ;main.c: 32: T2 = 0;
   901  00140C  0E00               	movlw	0
   902  00140E  0100               	movlb	0	; () banked
   903  001410  6F98               	movwf	(_T2+1)& (0+255),b
   904  001412  0E00               	movlw	0
   905  001414  6F97               	movwf	_T2& (0+255),b
   906                           
   907                           ;main.c: 33: posCursor = 0;
   908  001416  0E00               	movlw	0
   909  001418  6E29               	movwf	_posCursor+1,c
   910  00141A  0E00               	movlw	0
   911  00141C  6E28               	movwf	_posCursor,c
   912                           
   913                           ;main.c: 34: posCursorR = 0;
   914  00141E  0E00               	movlw	0
   915  001420  6E27               	movwf	_posCursorR+1,c
   916  001422  0E00               	movlw	0
   917  001424  6E26               	movwf	_posCursorR,c
   918                           
   919                           ;main.c: 35: tempoAlarme = 0;
   920  001426  0E00               	movlw	0
   921  001428  6E23               	movwf	_tempoAlarme+1,c
   922  00142A  0E00               	movlw	0
   923  00142C  6E22               	movwf	_tempoAlarme,c
   924                           
   925                           ; BSR set to: 0
   926                           ;main.c: 37: T0CONbits.TMR0ON=1;
   927  00142E  8ED5               	bsf	4053,7,c	;volatile
   928                           
   929                           ; BSR set to: 0
   930                           ;main.c: 38: INTCONbits.TMR0IE=1;
   931  001430  8AF2               	bsf	intcon,5,c	;volatile
   932                           
   933                           ; BSR set to: 0
   934                           ;main.c: 39: INTCONbits.TMR0IF=0;
   935  001432  94F2               	bcf	intcon,2,c	;volatile
   936                           
   937                           ; BSR set to: 0
   938                           ;main.c: 41: T0CONbits.T08BIT=0;
   939  001434  9CD5               	bcf	4053,6,c	;volatile
   940                           
   941                           ; BSR set to: 0
   942                           ;main.c: 42: T0CONbits.PSA=0;
   943  001436  96D5               	bcf	4053,3,c	;volatile
   944                           
   945                           ; BSR set to: 0
   946                           ;main.c: 43: T0CONbits.T0PS0=1;
   947  001438  80D5               	bsf	4053,0,c	;volatile
   948                           
   949                           ; BSR set to: 0
   950                           ;main.c: 44: T0CONbits.T0PS1=0;
   951  00143A  92D5               	bcf	4053,1,c	;volatile
   952                           
   953                           ; BSR set to: 0
   954                           ;main.c: 45: T0CONbits.T0PS2=1;
   955  00143C  84D5               	bsf	4053,2,c	;volatile
   956                           
   957                           ; BSR set to: 0
   958                           ;main.c: 46: T0CONbits.T0CS=0;
   959  00143E  9AD5               	bcf	4053,5,c	;volatile
   960                           
   961                           ;main.c: 48: TMR0=2535;
   962  001440  0E09               	movlw	9
   963  001442  6ED7               	movwf	4055,c	;volatile
   964  001444  0EE7               	movlw	231
   965  001446  6ED6               	movwf	4054,c	;volatile
   966                           
   967                           ; BSR set to: 0
   968                           ;main.c: 50: T0CONbits.TMR0ON=1;
   969  001448  8ED5               	bsf	4053,7,c	;volatile
   970                           
   971                           ;main.c: 52: TRISB = 0;
   972  00144A  0E00               	movlw	0
   973  00144C  6E93               	movwf	3987,c	;volatile
   974                           
   975                           ;main.c: 53: TRISD = 1;
   976  00144E  0E01               	movlw	1
   977  001450  6E95               	movwf	3989,c	;volatile
   978                           
   979                           ; BSR set to: 0
   980                           ;main.c: 56: INTCONbits.GIEH=1;
   981  001452  8EF2               	bsf	intcon,7,c	;volatile
   982                           
   983                           ; BSR set to: 0
   984                           ;main.c: 57: INTCONbits.GIEL=1;
   985  001454  8CF2               	bsf	intcon,6,c	;volatile
   986                           
   987                           ; BSR set to: 0
   988                           ;main.c: 59: InitXLCD();
   989  001456  EC51  F012         	call	_InitXLCD	;wreg free
   990                           
   991                           ;main.c: 60: inicializaTela1();
   992  00145A  EC74  F00E         	call	_inicializaTela1	;wreg free
   993                           
   994                           ;main.c: 61: inicializarUART();
   995  00145E  ECC1  F011         	call	_inicializarUART	;wreg free
   996  001462                     l4177:
   997                           
   998                           ;main.c: 65: if(flagDisplay == 1){
   999  001462  0100               	movlb	0	; () banked
  1000  001464  05C0               	decf	_flagDisplay& (0+255),w,b
  1001  001466  0100               	movlb	0	; () banked
  1002  001468  11C1               	iorwf	(_flagDisplay+1)& (0+255),w,b
  1003  00146A  A4D8               	btfss	status,2,c
  1004  00146C  D007               	goto	l4183
  1005                           
  1006                           ; BSR set to: 0
  1007                           ;main.c: 66: atualiza_tela();
  1008  00146E  ECDA  F011         	call	_atualiza_tela	;wreg free
  1009                           
  1010                           ;main.c: 67: flagDisplay = 0;
  1011  001472  0E00               	movlw	0
  1012  001474  0100               	movlb	0	; () banked
  1013  001476  6FC1               	movwf	(_flagDisplay+1)& (0+255),b
  1014  001478  0E00               	movlw	0
  1015  00147A  6FC0               	movwf	_flagDisplay& (0+255),b
  1016  00147C                     l4183:
  1017                           
  1018                           ; BSR set to: 0
  1019                           ;main.c: 68: }
  1020                           ;main.c: 70: if(PORTDbits.RD0 == 1){
  1021  00147C  A083               	btfss	3971,0,c	;volatile
  1022  00147E  D025               	goto	l89
  1023                           
  1024                           ; BSR set to: 0
  1025                           ;main.c: 71: _delay((unsigned long)((180)*(80000000/4000.0)));
  1026  001480  0E13               	movlw	19
  1027  001482  0100               	movlb	0	; () banked
  1028  001484  6F87               	movwf	(??_main+1)& (0+255),b
  1029  001486  0E44               	movlw	68
  1030  001488  0100               	movlb	0	; () banked
  1031  00148A  6F86               	movwf	??_main& (0+255),b
  1032  00148C  0E44               	movlw	68
  1033  00148E                     u4607:
  1034  00148E  2EE8               	decfsz	wreg,f,c
  1035  001490  D7FE               	bra	u4607
  1036  001492  2F86               	decfsz	??_main& (0+255),f,b
  1037  001494  D7FC               	bra	u4607
  1038  001496  2F87               	decfsz	(??_main+1)& (0+255),f,b
  1039  001498  D7FA               	bra	u4607
  1040  00149A  F000               	nop	
  1041                           
  1042                           ;main.c: 72: LCD_Clear();
  1043  00149C  EC48  F012         	call	_LCD_Clear	;wreg free
  1044                           
  1045                           ;main.c: 73: flagTela++;
  1046  0014A0  0100               	movlb	0	; () banked
  1047  0014A2  4BBC               	infsnz	_flagTela& (0+255),f,b
  1048  0014A4  2BBD               	incf	(_flagTela+1)& (0+255),f,b
  1049                           
  1050                           ; BSR set to: 0
  1051                           ;main.c: 74: if(flagTela>2) flagTela = 1;
  1052  0014A6  0100               	movlb	0	; () banked
  1053  0014A8  BFBD               	btfsc	(_flagTela+1)& (0+255),7,b
  1054  0014AA  D00D               	goto	l91
  1055  0014AC  0100               	movlb	0	; () banked
  1056  0014AE  51BD               	movf	(_flagTela+1)& (0+255),w,b
  1057  0014B0  E105               	bnz	u4480
  1058  0014B2  0E03               	movlw	3
  1059  0014B4  0100               	movlb	0	; () banked
  1060  0014B6  5DBC               	subwf	_flagTela& (0+255),w,b
  1061  0014B8  A0D8               	btfss	status,0,c
  1062  0014BA  D005               	goto	l91
  1063  0014BC                     u4480:
  1064                           
  1065                           ; BSR set to: 0
  1066  0014BC  0E00               	movlw	0
  1067  0014BE  0100               	movlb	0	; () banked
  1068  0014C0  6FBD               	movwf	(_flagTela+1)& (0+255),b
  1069  0014C2  0E01               	movlw	1
  1070  0014C4  6FBC               	movwf	_flagTela& (0+255),b
  1071  0014C6                     l91:
  1072  0014C6  B083               	btfsc	3971,0,c	;volatile
  1073  0014C8  D7FE               	goto	l91
  1074  0014CA                     l89:
  1075                           
  1076                           ;main.c: 76: }
  1077                           ;main.c: 78: if(PORTDbits.RD1 == 1){
  1078  0014CA  A283               	btfss	3971,1,c	;volatile
  1079  0014CC  D02C               	goto	l4209
  1080                           
  1081                           ;main.c: 79: _delay((unsigned long)((180)*(80000000/4000.0)));
  1082  0014CE  0E13               	movlw	19
  1083  0014D0  0100               	movlb	0	; () banked
  1084  0014D2  6F87               	movwf	(??_main+1)& (0+255),b
  1085  0014D4  0E44               	movlw	68
  1086  0014D6  0100               	movlb	0	; () banked
  1087  0014D8  6F86               	movwf	??_main& (0+255),b
  1088  0014DA  0E44               	movlw	68
  1089  0014DC                     u4617:
  1090  0014DC  2EE8               	decfsz	wreg,f,c
  1091  0014DE  D7FE               	bra	u4617
  1092  0014E0  2F86               	decfsz	??_main& (0+255),f,b
  1093  0014E2  D7FC               	bra	u4617
  1094  0014E4  2F87               	decfsz	(??_main+1)& (0+255),f,b
  1095  0014E6  D7FA               	bra	u4617
  1096  0014E8  F000               	nop	
  1097                           
  1098                           ;main.c: 80: posCursor++;
  1099  0014EA  4A28               	infsnz	_posCursor,f,c
  1100  0014EC  2A29               	incf	_posCursor+1,f,c
  1101                           
  1102                           ;main.c: 81: posCursorR++;
  1103  0014EE  4A26               	infsnz	_posCursorR,f,c
  1104  0014F0  2A27               	incf	_posCursorR+1,f,c
  1105                           
  1106                           ;main.c: 82: if(posCursor > 2) posCursor = 0;
  1107  0014F2  BE29               	btfsc	_posCursor+1,7,c
  1108  0014F4  D00A               	goto	l4205
  1109  0014F6  5029               	movf	_posCursor+1,w,c
  1110  0014F8  E104               	bnz	u4510
  1111  0014FA  0E03               	movlw	3
  1112  0014FC  5C28               	subwf	_posCursor,w,c
  1113  0014FE  A0D8               	btfss	status,0,c
  1114  001500  D004               	goto	l4205
  1115  001502                     u4510:
  1116  001502  0E00               	movlw	0
  1117  001504  6E29               	movwf	_posCursor+1,c
  1118  001506  0E00               	movlw	0
  1119  001508  6E28               	movwf	_posCursor,c
  1120  00150A                     l4205:
  1121                           
  1122                           ;main.c: 83: if(posCursorR > 6) posCursorR = 0;
  1123  00150A  BE27               	btfsc	_posCursorR+1,7,c
  1124  00150C  D00A               	goto	l97
  1125  00150E  5027               	movf	_posCursorR+1,w,c
  1126  001510  E104               	bnz	u4520
  1127  001512  0E07               	movlw	7
  1128  001514  5C26               	subwf	_posCursorR,w,c
  1129  001516  A0D8               	btfss	status,0,c
  1130  001518  D004               	goto	l97
  1131  00151A                     u4520:
  1132  00151A  0E00               	movlw	0
  1133  00151C  6E27               	movwf	_posCursorR+1,c
  1134  00151E  0E00               	movlw	0
  1135  001520  6E26               	movwf	_posCursorR,c
  1136  001522                     l97:
  1137  001522  B283               	btfsc	3971,1,c	;volatile
  1138  001524  D7FE               	goto	l97
  1139  001526                     l4209:
  1140                           
  1141                           ;main.c: 85: }
  1142                           ;main.c: 87: if(flagTela == 1) ajustarT1();
  1143  001526  0100               	movlb	0	; () banked
  1144  001528  05BC               	decf	_flagTela& (0+255),w,b
  1145  00152A  0100               	movlb	0	; () banked
  1146  00152C  11BD               	iorwf	(_flagTela+1)& (0+255),w,b
  1147  00152E  B4D8               	btfsc	status,2,c
  1148                           
  1149                           ; BSR set to: 0
  1150  001530  EC53  F00D         	call	_ajustarT1	;wreg free
  1151                           
  1152                           ;main.c: 88: if(flagTela == 2 && flagAlarme == 0) ajustarAlarme();
  1153  001534  0E02               	movlw	2
  1154  001536  0100               	movlb	0	; () banked
  1155  001538  19BC               	xorwf	_flagTela& (0+255),w,b
  1156  00153A  0100               	movlb	0	; () banked
  1157  00153C  11BD               	iorwf	(_flagTela+1)& (0+255),w,b
  1158  00153E  A4D8               	btfss	status,2,c
  1159  001540  D005               	goto	l4219
  1160                           
  1161                           ; BSR set to: 0
  1162  001542  5024               	movf	_flagAlarme,w,c
  1163  001544  1025               	iorwf	_flagAlarme+1,w,c
  1164  001546  B4D8               	btfsc	status,2,c
  1165                           
  1166                           ; BSR set to: 0
  1167  001548  ECCC  F00D         	call	_ajustarAlarme	;wreg free
  1168  00154C                     l4219:
  1169                           
  1170                           ;main.c: 89: if(despertar() == 1) flagAlarme = 1;
  1171  00154C  ECF5  F010         	call	_despertar	;wreg free
  1172  001550  0420               	decf	?_despertar,w,c
  1173  001552  1021               	iorwf	?_despertar+1,w,c
  1174  001554  A4D8               	btfss	status,2,c
  1175  001556  D004               	goto	l4223
  1176  001558  0E00               	movlw	0
  1177  00155A  6E25               	movwf	_flagAlarme+1,c
  1178  00155C  0E01               	movlw	1
  1179  00155E  6E24               	movwf	_flagAlarme,c
  1180  001560                     l4223:
  1181                           
  1182                           ;main.c: 91: if(flagAlarme == 1) {
  1183  001560  0424               	decf	_flagAlarme,w,c
  1184  001562  1025               	iorwf	_flagAlarme+1,w,c
  1185  001564  A4D8               	btfss	status,2,c
  1186  001566  D00F               	goto	l4231
  1187                           
  1188                           ;main.c: 92: if(tempoAlarme < 35){
  1189  001568  BE23               	btfsc	_tempoAlarme+1,7,c
  1190  00156A  D006               	goto	l4227
  1191  00156C  5023               	movf	_tempoAlarme+1,w,c
  1192  00156E  E107               	bnz	l4229
  1193  001570  0E23               	movlw	35
  1194  001572  5C22               	subwf	_tempoAlarme,w,c
  1195  001574  B0D8               	btfsc	status,0,c
  1196  001576  D003               	goto	l4229
  1197  001578                     l4227:
  1198                           
  1199                           ;main.c: 93: despertarAlarme();
  1200  001578  ECA7  F011         	call	_despertarAlarme	;wreg free
  1201                           
  1202                           ;main.c: 94: }else{
  1203  00157C  D004               	goto	l4231
  1204  00157E                     l4229:
  1205                           
  1206                           ;main.c: 95: flagAlarme = 0;
  1207  00157E  0E00               	movlw	0
  1208  001580  6E25               	movwf	_flagAlarme+1,c
  1209  001582  0E00               	movlw	0
  1210  001584  6E24               	movwf	_flagAlarme,c
  1211  001586                     l4231:
  1212                           
  1213                           ;main.c: 96: }
  1214                           ;main.c: 98: }
  1215                           ;main.c: 99: maquina_estado();
  1216  001586  EC60  F010         	call	_maquina_estado	;wreg free
  1217  00158A  D76B               	goto	l4177
  1218  00158C                     __end_of_main:
  1219                           	opt stack 0
  1220                           tblptru	equ	0xFF8
  1221                           tblptrh	equ	0xFF7
  1222                           tblptrl	equ	0xFF6
  1223                           tablat	equ	0xFF5
  1224                           intcon	equ	0xFF2
  1225                           postinc0	equ	0xFEE
  1226                           wreg	equ	0xFE8
  1227                           postdec1	equ	0xFE5
  1228                           fsr1l	equ	0xFE1
  1229                           status	equ	0xFD8
  1230                           
  1231 ;; *************** function _maquina_estado *****************
  1232 ;; Defined at:
  1233 ;;		line 166 in file "UART.c"
  1234 ;; Parameters:    Size  Location     Type
  1235 ;;		None
  1236 ;; Auto vars:     Size  Location     Type
  1237 ;;		None
  1238 ;; Return value:  Size  Location     Type
  1239 ;;                  2   34[None  ] int 
  1240 ;; Registers used:
  1241 ;;		wreg, status,2, status,0, cstack
  1242 ;; Tracked objects:
  1243 ;;		On entry : 0/0
  1244 ;;		On exit  : 0/0
  1245 ;;		Unchanged: 0/0
  1246 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1247 ;;      Params:         0       0       0       0       0       0       0       0       0
  1248 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1249 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1250 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1251 ;;Total ram usage:        0 bytes
  1252 ;; Hardware stack levels used:    1
  1253 ;; Hardware stack levels required when called:    5
  1254 ;; This function calls:
  1255 ;;		_envia_respostaTX
  1256 ;;		_trata_comando
  1257 ;;		_verifica_comando
  1258 ;; This function is called by:
  1259 ;;		_main
  1260 ;; This function uses a non-reentrant model
  1261 ;;
  1262                           
  1263                           	psect	text1
  1264  0020C0                     __ptext1:
  1265                           	opt stack 0
  1266  0020C0                     _maquina_estado:
  1267                           	opt stack 25
  1268                           
  1269                           ;UART.c: 168: switch(ESTADO_COMUNICACAO){
  1270                           
  1271                           ;incstack = 0
  1272  0020C0  D013               	goto	l3209
  1273  0020C2                     l3193:
  1274                           
  1275                           ;UART.c: 170: ESTADO_COMUNICACAO = 0x02;
  1276  0020C2  0E02               	movlw	2
  1277  0020C4  6E2D               	movwf	_ESTADO_COMUNICACAO,c
  1278                           
  1279                           ;UART.c: 171: break;
  1280  0020C6  0012               	return	
  1281  0020C8                     l3195:
  1282                           
  1283                           ;UART.c: 174: verifica_comando();
  1284  0020C8  EC21  F012         	call	_verifica_comando	;wreg free
  1285                           
  1286                           ;UART.c: 175: break;
  1287  0020CC  0012               	return	
  1288  0020CE                     l3197:
  1289                           
  1290                           ;UART.c: 178: trata_comando();
  1291  0020CE  EC88  F010         	call	_trata_comando	;wreg free
  1292                           
  1293                           ;UART.c: 179: ESTADO_COMUNICACAO = 0x05;
  1294  0020D2  0E05               	movlw	5
  1295  0020D4  6E2D               	movwf	_ESTADO_COMUNICACAO,c
  1296                           
  1297                           ;UART.c: 180: break;
  1298  0020D6  0012               	return	
  1299  0020D8                     l3201:
  1300                           
  1301                           ;UART.c: 183: ESTADO_COMUNICACAO = 0x00;
  1302  0020D8  0E00               	movlw	0
  1303  0020DA  6E2D               	movwf	_ESTADO_COMUNICACAO,c
  1304                           
  1305                           ;UART.c: 184: break;
  1306  0020DC  0012               	return	
  1307  0020DE                     l3203:
  1308                           
  1309                           ;UART.c: 187: envia_respostaTX();
  1310  0020DE  EC52  F011         	call	_envia_respostaTX	;wreg free
  1311                           
  1312                           ;UART.c: 188: ESTADO_COMUNICACAO = 0x00;
  1313  0020E2  0E00               	movlw	0
  1314  0020E4  6E2D               	movwf	_ESTADO_COMUNICACAO,c
  1315                           
  1316                           ;UART.c: 194: }
  1317                           
  1318                           ;UART.c: 193: break;
  1319                           
  1320                           ;UART.c: 191: case 0x00:
  1321                           
  1322                           ;UART.c: 189: break;
  1323  0020E6  0012               	return	
  1324  0020E8                     l3209:
  1325  0020E8  502D               	movf	_ESTADO_COMUNICACAO,w,c
  1326                           
  1327                           ; Switch size 1, requested type "space"
  1328                           ; Number of cases is 6, Range of values is 0 to 5
  1329                           ; switch strategies available:
  1330                           ; Name         Instructions Cycles
  1331                           ; simple_byte           19    10 (average)
  1332                           ;	Chosen strategy is simple_byte
  1333  0020EA  0A00               	xorlw	0	; case 0
  1334  0020EC  B4D8               	btfsc	status,2,c
  1335  0020EE  0012               	return	
  1336  0020F0  0A01               	xorlw	1	; case 1
  1337  0020F2  B4D8               	btfsc	status,2,c
  1338  0020F4  D7E6               	goto	l3193
  1339  0020F6  0A03               	xorlw	3	; case 2
  1340  0020F8  B4D8               	btfsc	status,2,c
  1341  0020FA  D7E6               	goto	l3195
  1342  0020FC  0A01               	xorlw	1	; case 3
  1343  0020FE  B4D8               	btfsc	status,2,c
  1344  002100  D7E6               	goto	l3197
  1345  002102  0A07               	xorlw	7	; case 4
  1346  002104  B4D8               	btfsc	status,2,c
  1347  002106  D7E8               	goto	l3201
  1348  002108  0A01               	xorlw	1	; case 5
  1349  00210A  A4D8               	btfss	status,2,c
  1350  00210C  0012               	return	
  1351  00210E  D7E7               	goto	l3203
  1352  002110                     __end_of_maquina_estado:
  1353                           	opt stack 0
  1354                           tblptru	equ	0xFF8
  1355                           tblptrh	equ	0xFF7
  1356                           tblptrl	equ	0xFF6
  1357                           tablat	equ	0xFF5
  1358                           intcon	equ	0xFF2
  1359                           postinc0	equ	0xFEE
  1360                           wreg	equ	0xFE8
  1361                           postdec1	equ	0xFE5
  1362                           fsr1l	equ	0xFE1
  1363                           status	equ	0xFD8
  1364                           
  1365 ;; *************** function _verifica_comando *****************
  1366 ;; Defined at:
  1367 ;;		line 75 in file "UART.c"
  1368 ;; Parameters:    Size  Location     Type
  1369 ;;		None
  1370 ;; Auto vars:     Size  Location     Type
  1371 ;;		None
  1372 ;; Return value:  Size  Location     Type
  1373 ;;                  1    wreg      void 
  1374 ;; Registers used:
  1375 ;;		wreg, status,2, status,0, cstack
  1376 ;; Tracked objects:
  1377 ;;		On entry : 0/0
  1378 ;;		On exit  : 0/0
  1379 ;;		Unchanged: 0/0
  1380 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1381 ;;      Params:         0       0       0       0       0       0       0       0       0
  1382 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1383 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1384 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1385 ;;Total ram usage:        0 bytes
  1386 ;; Hardware stack levels used:    1
  1387 ;; Hardware stack levels required when called:    4
  1388 ;; This function calls:
  1389 ;;		_crc16
  1390 ;; This function is called by:
  1391 ;;		_maquina_estado
  1392 ;; This function uses a non-reentrant model
  1393 ;;
  1394                           
  1395                           	psect	text2
  1396  002442                     __ptext2:
  1397                           	opt stack 0
  1398  002442                     _verifica_comando:
  1399                           	opt stack 25
  1400                           
  1401                           ;UART.c: 76: if(crc16(dado) == 1){
  1402                           
  1403                           ;incstack = 0
  1404  002442  0E9D               	movlw	low _dado
  1405  002444  6E20               	movwf	crc16@dados,c
  1406  002446  0E00               	movlw	high _dado
  1407  002448  6E21               	movwf	crc16@dados+1,c
  1408  00244A  EC70  F012         	call	_crc16	;wreg free
  1409  00244E  0420               	decf	?_crc16,w,c
  1410  002450  1021               	iorwf	?_crc16+1,w,c
  1411  002452  A4D8               	btfss	status,2,c
  1412  002454  D003               	goto	l3005
  1413                           
  1414                           ;UART.c: 77: ESTADO_COMUNICACAO = 0x03;
  1415  002456  0E03               	movlw	3
  1416  002458  6E2D               	movwf	_ESTADO_COMUNICACAO,c
  1417                           
  1418                           ;UART.c: 78: }else{
  1419  00245A  0012               	return	
  1420  00245C                     l3005:
  1421                           
  1422                           ;UART.c: 79: ESTADO_COMUNICACAO = 0x04;
  1423  00245C  0E04               	movlw	4
  1424  00245E  6E2D               	movwf	_ESTADO_COMUNICACAO,c
  1425  002460  0012               	return	
  1426  002462                     __end_of_verifica_comando:
  1427                           	opt stack 0
  1428                           tblptru	equ	0xFF8
  1429                           tblptrh	equ	0xFF7
  1430                           tblptrl	equ	0xFF6
  1431                           tablat	equ	0xFF5
  1432                           intcon	equ	0xFF2
  1433                           postinc0	equ	0xFEE
  1434                           wreg	equ	0xFE8
  1435                           postdec1	equ	0xFE5
  1436                           fsr1l	equ	0xFE1
  1437                           status	equ	0xFD8
  1438                           
  1439 ;; *************** function _crc16 *****************
  1440 ;; Defined at:
  1441 ;;		line 3 in file "UART.c"
  1442 ;; Parameters:    Size  Location     Type
  1443 ;;  dados           2   31[COMRAM] PTR unsigned char 
  1444 ;;		 -> dado(7), 
  1445 ;; Auto vars:     Size  Location     Type
  1446 ;;		None
  1447 ;; Return value:  Size  Location     Type
  1448 ;;                  2   31[COMRAM] int 
  1449 ;; Registers used:
  1450 ;;		wreg, status,2
  1451 ;; Tracked objects:
  1452 ;;		On entry : 0/0
  1453 ;;		On exit  : 0/0
  1454 ;;		Unchanged: 0/0
  1455 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1456 ;;      Params:         2       0       0       0       0       0       0       0       0
  1457 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1458 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1459 ;;      Totals:         2       0       0       0       0       0       0       0       0
  1460 ;;Total ram usage:        2 bytes
  1461 ;; Hardware stack levels used:    1
  1462 ;; Hardware stack levels required when called:    3
  1463 ;; This function calls:
  1464 ;;		Nothing
  1465 ;; This function is called by:
  1466 ;;		_verifica_comando
  1467 ;; This function uses a non-reentrant model
  1468 ;;
  1469                           
  1470                           	psect	text3
  1471  0024E0                     __ptext3:
  1472                           	opt stack 0
  1473  0024E0                     _crc16:
  1474                           	opt stack 25
  1475                           
  1476                           ;UART.c: 4: return 1;
  1477                           
  1478                           ;incstack = 0
  1479  0024E0  0E00               	movlw	0
  1480  0024E2  6E21               	movwf	?_crc16+1,c
  1481  0024E4  0E01               	movlw	1
  1482  0024E6  6E20               	movwf	?_crc16,c
  1483  0024E8  0012               	return	
  1484  0024EA                     __end_of_crc16:
  1485                           	opt stack 0
  1486                           tblptru	equ	0xFF8
  1487                           tblptrh	equ	0xFF7
  1488                           tblptrl	equ	0xFF6
  1489                           tablat	equ	0xFF5
  1490                           intcon	equ	0xFF2
  1491                           postinc0	equ	0xFEE
  1492                           wreg	equ	0xFE8
  1493                           postdec1	equ	0xFE5
  1494                           fsr1l	equ	0xFE1
  1495                           status	equ	0xFD8
  1496                           
  1497 ;; *************** function _trata_comando *****************
  1498 ;; Defined at:
  1499 ;;		line 128 in file "UART.c"
  1500 ;; Parameters:    Size  Location     Type
  1501 ;;		None
  1502 ;; Auto vars:     Size  Location     Type
  1503 ;;		None
  1504 ;; Return value:  Size  Location     Type
  1505 ;;                  1    wreg      void 
  1506 ;; Registers used:
  1507 ;;		wreg, status,2, status,0, cstack
  1508 ;; Tracked objects:
  1509 ;;		On entry : 0/0
  1510 ;;		On exit  : 0/0
  1511 ;;		Unchanged: 0/0
  1512 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1513 ;;      Params:         0       0       0       0       0       0       0       0       0
  1514 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1515 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1516 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1517 ;;Total ram usage:        0 bytes
  1518 ;; Hardware stack levels used:    1
  1519 ;; Hardware stack levels required when called:    4
  1520 ;; This function calls:
  1521 ;;		_montar_resposta
  1522 ;;		_realizar_alteracoes
  1523 ;; This function is called by:
  1524 ;;		_maquina_estado
  1525 ;; This function uses a non-reentrant model
  1526 ;;
  1527                           
  1528                           	psect	text4
  1529  002110                     __ptext4:
  1530                           	opt stack 0
  1531  002110                     _trata_comando:
  1532                           	opt stack 25
  1533                           
  1534                           ;UART.c: 129: switch(dado[0]){
  1535                           
  1536                           ;incstack = 0
  1537  002110  D01E               	goto	l3029
  1538  002112                     l3009:
  1539                           
  1540                           ;UART.c: 133: montar_resposta();
  1541  002112  EC36  F010         	call	_montar_resposta	;wreg free
  1542                           
  1543                           ;UART.c: 134: ESTADO_COMUNICACAO = 0x05;
  1544  002116  0E05               	movlw	5
  1545  002118  6E2D               	movwf	_ESTADO_COMUNICACAO,c
  1546                           
  1547                           ;UART.c: 135: break;
  1548  00211A  0012               	return	
  1549  00211C                     l3013:
  1550                           
  1551                           ;UART.c: 138: montar_resposta();
  1552  00211C  EC36  F010         	call	_montar_resposta	;wreg free
  1553                           
  1554                           ;UART.c: 139: ESTADO_COMUNICACAO = 0x05;
  1555  002120  0E05               	movlw	5
  1556  002122  6E2D               	movwf	_ESTADO_COMUNICACAO,c
  1557                           
  1558                           ;UART.c: 140: break;
  1559  002124  0012               	return	
  1560  002126                     l3017:
  1561                           
  1562                           ;UART.c: 143: montar_resposta();
  1563  002126  EC36  F010         	call	_montar_resposta	;wreg free
  1564                           
  1565                           ;UART.c: 144: ESTADO_COMUNICACAO = 0x05;
  1566  00212A  0E05               	movlw	5
  1567  00212C  6E2D               	movwf	_ESTADO_COMUNICACAO,c
  1568                           
  1569                           ;UART.c: 146: }
  1570                           
  1571                           ;UART.c: 145: break;
  1572  00212E  0012               	return	
  1573  002130                     l3023:
  1574  002130  0100               	movlb	0	; () banked
  1575  002132  519E               	movf	(_dado+1)& (0+255),w,b
  1576                           
  1577                           ; Switch size 1, requested type "space"
  1578                           ; Number of cases is 3, Range of values is 1 to 3
  1579                           ; switch strategies available:
  1580                           ; Name         Instructions Cycles
  1581                           ; simple_byte           10     6 (average)
  1582                           ;	Chosen strategy is simple_byte
  1583  002134  0A01               	xorlw	1	; case 1
  1584  002136  B4D8               	btfsc	status,2,c
  1585  002138  D7EC               	goto	l3009
  1586  00213A  0A03               	xorlw	3	; case 2
  1587  00213C  B4D8               	btfsc	status,2,c
  1588  00213E  D7EE               	goto	l3013
  1589  002140  0A01               	xorlw	1	; case 3
  1590  002142  A4D8               	btfss	status,2,c
  1591                           
  1592                           ; BSR set to: 0
  1593                           ;UART.c: 147: break;
  1594  002144  0012               	return	
  1595  002146  D7EF               	goto	l3017
  1596  002148                     l3025:
  1597                           
  1598                           ; BSR set to: 0
  1599                           ;UART.c: 150: realizar_alteracoes();
  1600  002148  EC0B  F010         	call	_realizar_alteracoes	;wreg free
  1601                           
  1602                           ;UART.c: 153: }
  1603                           
  1604                           ;UART.c: 151: break;
  1605  00214C  0012               	return	
  1606  00214E                     l3029:
  1607  00214E  0100               	movlb	0	; () banked
  1608  002150  519D               	movf	_dado& (0+255),w,b
  1609                           
  1610                           ; Switch size 1, requested type "space"
  1611                           ; Number of cases is 2, Range of values is 1 to 2
  1612                           ; switch strategies available:
  1613                           ; Name         Instructions Cycles
  1614                           ; simple_byte            7     4 (average)
  1615                           ;	Chosen strategy is simple_byte
  1616  002152  0A01               	xorlw	1	; case 1
  1617  002154  B4D8               	btfsc	status,2,c
  1618  002156  D7EC               	goto	l3023
  1619  002158  0A03               	xorlw	3	; case 2
  1620  00215A  A4D8               	btfss	status,2,c
  1621  00215C  0012               	return	
  1622  00215E  D7F4               	goto	l3025
  1623  002160                     __end_of_trata_comando:
  1624                           	opt stack 0
  1625                           tblptru	equ	0xFF8
  1626                           tblptrh	equ	0xFF7
  1627                           tblptrl	equ	0xFF6
  1628                           tablat	equ	0xFF5
  1629                           intcon	equ	0xFF2
  1630                           postinc0	equ	0xFEE
  1631                           wreg	equ	0xFE8
  1632                           postdec1	equ	0xFE5
  1633                           fsr1l	equ	0xFE1
  1634                           status	equ	0xFD8
  1635                           
  1636 ;; *************** function _realizar_alteracoes *****************
  1637 ;; Defined at:
  1638 ;;		line 83 in file "UART.c"
  1639 ;; Parameters:    Size  Location     Type
  1640 ;;		None
  1641 ;; Auto vars:     Size  Location     Type
  1642 ;;		None
  1643 ;; Return value:  Size  Location     Type
  1644 ;;                  1    wreg      void 
  1645 ;; Registers used:
  1646 ;;		wreg, status,2, status,0
  1647 ;; Tracked objects:
  1648 ;;		On entry : 0/0
  1649 ;;		On exit  : 0/0
  1650 ;;		Unchanged: 0/0
  1651 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1652 ;;      Params:         0       0       0       0       0       0       0       0       0
  1653 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1654 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1655 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1656 ;;Total ram usage:        0 bytes
  1657 ;; Hardware stack levels used:    1
  1658 ;; Hardware stack levels required when called:    3
  1659 ;; This function calls:
  1660 ;;		Nothing
  1661 ;; This function is called by:
  1662 ;;		_trata_comando
  1663 ;; This function uses a non-reentrant model
  1664 ;;
  1665                           
  1666                           	psect	text5
  1667  002016                     __ptext5:
  1668                           	opt stack 0
  1669  002016                     _realizar_alteracoes:
  1670                           	opt stack 25
  1671                           
  1672                           ;UART.c: 84: switch(dado[1]){
  1673                           
  1674                           ;incstack = 0
  1675  002016  D01E               	goto	l2875
  1676  002018                     l526:
  1677                           
  1678                           ; BSR set to: 0
  1679                           ;UART.c: 86: re.hora = dado[2];
  1680  002018  C09F  F038         	movff	_dado+2,_re+4
  1681  00201C  6A39               	clrf	_re+5,c
  1682                           
  1683                           ;UART.c: 87: re.minuto = dado[3];
  1684  00201E  C0A0  F034         	movff	_dado+3,_re
  1685  002022  6A35               	clrf	_re+1,c
  1686                           
  1687                           ;UART.c: 88: re.segundo = dado[4];
  1688  002024  C0A1  F036         	movff	_dado+4,_re+2
  1689  002028  6A37               	clrf	_re+3,c
  1690                           
  1691                           ;UART.c: 90: break;
  1692  00202A  0012               	return	
  1693  00202C                     l528:
  1694                           
  1695                           ; BSR set to: 0
  1696                           ;UART.c: 92: ca.dia = dado[2];
  1697  00202C  C09F  F03A         	movff	_dado+2,_ca
  1698  002030  6A3B               	clrf	_ca+1,c
  1699                           
  1700                           ;UART.c: 93: ca.mes = dado[3];
  1701  002032  C0A0  F03C         	movff	_dado+3,_ca+2
  1702  002036  6A3D               	clrf	_ca+3,c
  1703                           
  1704                           ;UART.c: 94: ca.ano = dado[4];
  1705  002038  C0A1  F03E         	movff	_dado+4,_ca+4
  1706  00203C  6A3F               	clrf	_ca+5,c
  1707                           
  1708                           ;UART.c: 95: break;
  1709  00203E  0012               	return	
  1710  002040                     l529:
  1711                           
  1712                           ; BSR set to: 0
  1713                           ;UART.c: 97: alarme.hora = dado[2];
  1714  002040  C09F  F032         	movff	_dado+2,_alarme+4
  1715  002044  6A33               	clrf	_alarme+5,c
  1716                           
  1717                           ;UART.c: 98: alarme.minuto = dado[3];
  1718  002046  C0A0  F02E         	movff	_dado+3,_alarme
  1719  00204A  6A2F               	clrf	_alarme+1,c
  1720                           
  1721                           ;UART.c: 99: alarme.segundo = dado[4];
  1722  00204C  C0A1  F030         	movff	_dado+4,_alarme+2
  1723  002050  6A31               	clrf	_alarme+3,c
  1724                           
  1725                           ; BSR set to: 0
  1726                           ;UART.c: 101: }
  1727                           
  1728                           ;UART.c: 100: break;
  1729  002052  0012               	return	
  1730  002054                     l2875:
  1731  002054  0100               	movlb	0	; () banked
  1732  002056  519E               	movf	(_dado+1)& (0+255),w,b
  1733                           
  1734                           ; Switch size 1, requested type "space"
  1735                           ; Number of cases is 3, Range of values is 1 to 3
  1736                           ; switch strategies available:
  1737                           ; Name         Instructions Cycles
  1738                           ; simple_byte           10     6 (average)
  1739                           ;	Chosen strategy is simple_byte
  1740  002058  0A01               	xorlw	1	; case 1
  1741  00205A  B4D8               	btfsc	status,2,c
  1742  00205C  D7DD               	goto	l526
  1743  00205E  0A03               	xorlw	3	; case 2
  1744  002060  B4D8               	btfsc	status,2,c
  1745  002062  D7E4               	goto	l528
  1746  002064  0A01               	xorlw	1	; case 3
  1747  002066  A4D8               	btfss	status,2,c
  1748  002068  0012               	return	
  1749  00206A  D7EA               	goto	l529
  1750  00206C                     __end_of_realizar_alteracoes:
  1751                           	opt stack 0
  1752                           tblptru	equ	0xFF8
  1753                           tblptrh	equ	0xFF7
  1754                           tblptrl	equ	0xFF6
  1755                           tablat	equ	0xFF5
  1756                           intcon	equ	0xFF2
  1757                           postinc0	equ	0xFEE
  1758                           wreg	equ	0xFE8
  1759                           postdec1	equ	0xFE5
  1760                           fsr1l	equ	0xFE1
  1761                           status	equ	0xFD8
  1762                           
  1763 ;; *************** function _montar_resposta *****************
  1764 ;; Defined at:
  1765 ;;		line 104 in file "UART.c"
  1766 ;; Parameters:    Size  Location     Type
  1767 ;;		None
  1768 ;; Auto vars:     Size  Location     Type
  1769 ;;		None
  1770 ;; Return value:  Size  Location     Type
  1771 ;;                  1    wreg      void 
  1772 ;; Registers used:
  1773 ;;		wreg, status,2, status,0
  1774 ;; Tracked objects:
  1775 ;;		On entry : 0/0
  1776 ;;		On exit  : 0/0
  1777 ;;		Unchanged: 0/0
  1778 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1779 ;;      Params:         0       0       0       0       0       0       0       0       0
  1780 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1781 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1782 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1783 ;;Total ram usage:        0 bytes
  1784 ;; Hardware stack levels used:    1
  1785 ;; Hardware stack levels required when called:    3
  1786 ;; This function calls:
  1787 ;;		Nothing
  1788 ;; This function is called by:
  1789 ;;		_trata_comando
  1790 ;; This function uses a non-reentrant model
  1791 ;;
  1792                           
  1793                           	psect	text6
  1794  00206C                     __ptext6:
  1795                           	opt stack 0
  1796  00206C                     _montar_resposta:
  1797                           	opt stack 25
  1798                           
  1799                           ;UART.c: 105: BUFFRESP[0] = dado[0];
  1800                           
  1801                           ; BSR set to: 0
  1802                           ;incstack = 0
  1803  00206C  C09D  F088         	movff	_dado,_BUFFRESP
  1804                           
  1805                           ;UART.c: 106: BUFFRESP[1] = dado[1];
  1806  002070  C09E  F089         	movff	_dado+1,_BUFFRESP+1
  1807                           
  1808                           ;UART.c: 107: BUFFRESP[5] = 0xFF;
  1809  002074  0100               	movlb	0	; () banked
  1810  002076  698D               	setf	(_BUFFRESP+5)& (0+255),b
  1811                           
  1812                           ;UART.c: 108: BUFFRESP[6] = 0xFF;
  1813  002078  0100               	movlb	0	; () banked
  1814  00207A  698E               	setf	(_BUFFRESP+6)& (0+255),b
  1815                           
  1816                           ;UART.c: 109: switch(dado[1]){
  1817  00207C  D015               	goto	l2881
  1818  00207E                     l534:
  1819                           
  1820                           ; BSR set to: 0
  1821                           ;UART.c: 111: BUFFRESP[2] = re.hora;
  1822  00207E  C038  F08A         	movff	_re+4,_BUFFRESP+2
  1823                           
  1824                           ;UART.c: 112: BUFFRESP[3] = re.minuto;
  1825  002082  C034  F08B         	movff	_re,_BUFFRESP+3
  1826                           
  1827                           ;UART.c: 113: BUFFRESP[4] = re.segundo;
  1828  002086  C036  F08C         	movff	_re+2,_BUFFRESP+4
  1829                           
  1830                           ;UART.c: 114: break;
  1831  00208A  0012               	return	
  1832  00208C                     l536:
  1833                           
  1834                           ; BSR set to: 0
  1835                           ;UART.c: 116: BUFFRESP[2] = ca.dia;
  1836  00208C  C03A  F08A         	movff	_ca,_BUFFRESP+2
  1837                           
  1838                           ;UART.c: 117: BUFFRESP[3] = ca.mes;
  1839  002090  C03C  F08B         	movff	_ca+2,_BUFFRESP+3
  1840                           
  1841                           ;UART.c: 118: BUFFRESP[4] = ca.ano;
  1842  002094  C03E  F08C         	movff	_ca+4,_BUFFRESP+4
  1843                           
  1844                           ;UART.c: 119: break;
  1845  002098  0012               	return	
  1846  00209A                     l537:
  1847                           
  1848                           ; BSR set to: 0
  1849                           ;UART.c: 121: BUFFRESP[2] = alarme.hora;
  1850  00209A  C032  F08A         	movff	_alarme+4,_BUFFRESP+2
  1851                           
  1852                           ;UART.c: 122: BUFFRESP[3] = alarme.minuto;
  1853  00209E  C02E  F08B         	movff	_alarme,_BUFFRESP+3
  1854                           
  1855                           ;UART.c: 123: BUFFRESP[4] = alarme.segundo;
  1856  0020A2  C030  F08C         	movff	_alarme+2,_BUFFRESP+4
  1857                           
  1858                           ; BSR set to: 0
  1859                           ;UART.c: 125: }
  1860                           
  1861                           ;UART.c: 124: break;
  1862  0020A6  0012               	return	
  1863  0020A8                     l2881:
  1864                           
  1865                           ; BSR set to: 0
  1866  0020A8  0100               	movlb	0	; () banked
  1867  0020AA  519E               	movf	(_dado+1)& (0+255),w,b
  1868                           
  1869                           ; Switch size 1, requested type "space"
  1870                           ; Number of cases is 3, Range of values is 1 to 3
  1871                           ; switch strategies available:
  1872                           ; Name         Instructions Cycles
  1873                           ; simple_byte           10     6 (average)
  1874                           ;	Chosen strategy is simple_byte
  1875  0020AC  0A01               	xorlw	1	; case 1
  1876  0020AE  B4D8               	btfsc	status,2,c
  1877  0020B0  D7E6               	goto	l534
  1878  0020B2  0A03               	xorlw	3	; case 2
  1879  0020B4  B4D8               	btfsc	status,2,c
  1880  0020B6  D7EA               	goto	l536
  1881  0020B8  0A01               	xorlw	1	; case 3
  1882  0020BA  A4D8               	btfss	status,2,c
  1883  0020BC  0012               	return	
  1884  0020BE  D7ED               	goto	l537
  1885  0020C0                     __end_of_montar_resposta:
  1886                           	opt stack 0
  1887                           tblptru	equ	0xFF8
  1888                           tblptrh	equ	0xFF7
  1889                           tblptrl	equ	0xFF6
  1890                           tablat	equ	0xFF5
  1891                           intcon	equ	0xFF2
  1892                           postinc0	equ	0xFEE
  1893                           wreg	equ	0xFE8
  1894                           postdec1	equ	0xFE5
  1895                           fsr1l	equ	0xFE1
  1896                           status	equ	0xFD8
  1897                           
  1898 ;; *************** function _envia_respostaTX *****************
  1899 ;; Defined at:
  1900 ;;		line 156 in file "UART.c"
  1901 ;; Parameters:    Size  Location     Type
  1902 ;;		None
  1903 ;; Auto vars:     Size  Location     Type
  1904 ;;		None
  1905 ;; Return value:  Size  Location     Type
  1906 ;;                  1    wreg      void 
  1907 ;; Registers used:
  1908 ;;		wreg, status,2, cstack
  1909 ;; Tracked objects:
  1910 ;;		On entry : 0/0
  1911 ;;		On exit  : 0/0
  1912 ;;		Unchanged: 0/0
  1913 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1914 ;;      Params:         0       0       0       0       0       0       0       0       0
  1915 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1916 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1917 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1918 ;;Total ram usage:        0 bytes
  1919 ;; Hardware stack levels used:    1
  1920 ;; Hardware stack levels required when called:    4
  1921 ;; This function calls:
  1922 ;;		_tx_data
  1923 ;; This function is called by:
  1924 ;;		_maquina_estado
  1925 ;; This function uses a non-reentrant model
  1926 ;;
  1927                           
  1928                           	psect	text7
  1929  0022A4                     __ptext7:
  1930                           	opt stack 0
  1931  0022A4                     _envia_respostaTX:
  1932                           	opt stack 25
  1933                           
  1934                           ;UART.c: 157: tx_data(BUFFRESP[0]);
  1935                           
  1936                           ; BSR set to: 0
  1937                           ;incstack = 0
  1938  0022A4  0100               	movlb	0	; () banked
  1939  0022A6  5188               	movf	_BUFFRESP& (0+255),w,b
  1940  0022A8  EC6A  F012         	call	_tx_data
  1941                           
  1942                           ;UART.c: 158: tx_data(BUFFRESP[1]);
  1943  0022AC  0100               	movlb	0	; () banked
  1944  0022AE  5189               	movf	(_BUFFRESP+1)& (0+255),w,b
  1945  0022B0  EC6A  F012         	call	_tx_data
  1946                           
  1947                           ;UART.c: 159: tx_data(BUFFRESP[2]);
  1948  0022B4  0100               	movlb	0	; () banked
  1949  0022B6  518A               	movf	(_BUFFRESP+2)& (0+255),w,b
  1950  0022B8  EC6A  F012         	call	_tx_data
  1951                           
  1952                           ;UART.c: 160: tx_data(BUFFRESP[3]);
  1953  0022BC  0100               	movlb	0	; () banked
  1954  0022BE  518B               	movf	(_BUFFRESP+3)& (0+255),w,b
  1955  0022C0  EC6A  F012         	call	_tx_data
  1956                           
  1957                           ;UART.c: 161: tx_data(BUFFRESP[4]);
  1958  0022C4  0100               	movlb	0	; () banked
  1959  0022C6  518C               	movf	(_BUFFRESP+4)& (0+255),w,b
  1960  0022C8  EC6A  F012         	call	_tx_data
  1961                           
  1962                           ;UART.c: 162: tx_data(BUFFRESP[5]);
  1963  0022CC  0100               	movlb	0	; () banked
  1964  0022CE  518D               	movf	(_BUFFRESP+5)& (0+255),w,b
  1965  0022D0  EC6A  F012         	call	_tx_data
  1966                           
  1967                           ;UART.c: 163: tx_data(BUFFRESP[6]);
  1968  0022D4  0100               	movlb	0	; () banked
  1969  0022D6  518E               	movf	(_BUFFRESP+6)& (0+255),w,b
  1970  0022D8  EC6A  F012         	call	_tx_data
  1971  0022DC  0012               	return		;funcret
  1972  0022DE                     __end_of_envia_respostaTX:
  1973                           	opt stack 0
  1974                           tblptru	equ	0xFF8
  1975                           tblptrh	equ	0xFF7
  1976                           tblptrl	equ	0xFF6
  1977                           tablat	equ	0xFF5
  1978                           intcon	equ	0xFF2
  1979                           postinc0	equ	0xFEE
  1980                           wreg	equ	0xFE8
  1981                           postdec1	equ	0xFE5
  1982                           fsr1l	equ	0xFE1
  1983                           status	equ	0xFD8
  1984                           
  1985 ;; *************** function _tx_data *****************
  1986 ;; Defined at:
  1987 ;;		line 7 in file "UART.c"
  1988 ;; Parameters:    Size  Location     Type
  1989 ;;  data            1    wreg     const unsigned char 
  1990 ;; Auto vars:     Size  Location     Type
  1991 ;;  data            1   31[COMRAM] const unsigned char 
  1992 ;; Return value:  Size  Location     Type
  1993 ;;                  1    wreg      void 
  1994 ;; Registers used:
  1995 ;;		wreg
  1996 ;; Tracked objects:
  1997 ;;		On entry : 0/0
  1998 ;;		On exit  : 0/0
  1999 ;;		Unchanged: 0/0
  2000 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2001 ;;      Params:         0       0       0       0       0       0       0       0       0
  2002 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2003 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2004 ;;      Totals:         1       0       0       0       0       0       0       0       0
  2005 ;;Total ram usage:        1 bytes
  2006 ;; Hardware stack levels used:    1
  2007 ;; Hardware stack levels required when called:    3
  2008 ;; This function calls:
  2009 ;;		Nothing
  2010 ;; This function is called by:
  2011 ;;		_envia_respostaTX
  2012 ;;		_UART_Write_Text
  2013 ;; This function uses a non-reentrant model
  2014 ;;
  2015                           
  2016                           	psect	text8
  2017  0024D4                     __ptext8:
  2018                           	opt stack 0
  2019  0024D4                     _tx_data:
  2020                           	opt stack 25
  2021                           
  2022                           ;incstack = 0
  2023                           ;tx_data@data stored from wreg
  2024  0024D4  6E20               	movwf	tx_data@data,c
  2025  0024D6                     l487:
  2026  0024D6  A89E               	btfss	3998,4,c	;volatile
  2027  0024D8  D7FE               	goto	l487
  2028                           
  2029                           ;UART.c: 10: TXREG = data;
  2030  0024DA  C020  FFAD         	movff	tx_data@data,4013	;volatile
  2031  0024DE  0012               	return		;funcret
  2032  0024E0                     __end_of_tx_data:
  2033                           	opt stack 0
  2034                           tblptru	equ	0xFF8
  2035                           tblptrh	equ	0xFF7
  2036                           tblptrl	equ	0xFF6
  2037                           tablat	equ	0xFF5
  2038                           intcon	equ	0xFF2
  2039                           postinc0	equ	0xFEE
  2040                           wreg	equ	0xFE8
  2041                           postdec1	equ	0xFE5
  2042                           fsr1l	equ	0xFE1
  2043                           status	equ	0xFD8
  2044                           
  2045 ;; *************** function _inicializarUART *****************
  2046 ;; Defined at:
  2047 ;;		line 25 in file "UART.c"
  2048 ;; Parameters:    Size  Location     Type
  2049 ;;		None
  2050 ;; Auto vars:     Size  Location     Type
  2051 ;;		None
  2052 ;; Return value:  Size  Location     Type
  2053 ;;                  1    wreg      void 
  2054 ;; Registers used:
  2055 ;;		wreg, status,2
  2056 ;; Tracked objects:
  2057 ;;		On entry : 0/0
  2058 ;;		On exit  : 0/0
  2059 ;;		Unchanged: 0/0
  2060 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2061 ;;      Params:         0       0       0       0       0       0       0       0       0
  2062 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2063 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2064 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2065 ;;Total ram usage:        0 bytes
  2066 ;; Hardware stack levels used:    1
  2067 ;; Hardware stack levels required when called:    3
  2068 ;; This function calls:
  2069 ;;		Nothing
  2070 ;; This function is called by:
  2071 ;;		_main
  2072 ;; This function uses a non-reentrant model
  2073 ;;
  2074                           
  2075                           	psect	text9
  2076  002382                     __ptext9:
  2077                           	opt stack 0
  2078  002382                     _inicializarUART:
  2079                           	opt stack 27
  2080                           
  2081                           ;UART.c: 26: i = 0;
  2082                           
  2083                           ;incstack = 0
  2084  002382  0E00               	movlw	0
  2085  002384  6E2B               	movwf	_i+1,c
  2086  002386  0E00               	movlw	0
  2087  002388  6E2A               	movwf	_i,c
  2088                           
  2089                           ;UART.c: 27: BRGH = 1;
  2090  00238A  84AC               	bsf	4012,2,c	;volatile
  2091                           
  2092                           ;UART.c: 28: SPBRG = (((80000000/64)/9600)-1);
  2093  00238C  0E81               	movlw	129
  2094  00238E  6EAF               	movwf	4015,c	;volatile
  2095                           
  2096                           ;UART.c: 29: RCSTAbits.SPEN=1;
  2097  002390  8EAB               	bsf	4011,7,c	;volatile
  2098                           
  2099                           ;UART.c: 30: TXSTAbits.TXEN=1;
  2100  002392  8AAC               	bsf	4012,5,c	;volatile
  2101                           
  2102                           ;UART.c: 31: RCSTAbits.CREN=1;
  2103  002394  88AB               	bsf	4011,4,c	;volatile
  2104                           
  2105                           ;UART.c: 33: RCSTA = 0b10010000;
  2106  002396  0E90               	movlw	144
  2107  002398  6EAB               	movwf	4011,c	;volatile
  2108                           
  2109                           ;UART.c: 34: TXSTA = 0b00100000;
  2110  00239A  0E20               	movlw	32
  2111  00239C  6EAC               	movwf	4012,c	;volatile
  2112                           
  2113                           ;UART.c: 36: TRISCbits.RC6 = 0;
  2114  00239E  9C94               	bcf	3988,6,c	;volatile
  2115                           
  2116                           ;UART.c: 37: TRISCbits.RC7 = 1;
  2117  0023A0  8E94               	bsf	3988,7,c	;volatile
  2118                           
  2119                           ;UART.c: 40: RCIF = 0;
  2120  0023A2  9A9E               	bcf	3998,5,c	;volatile
  2121                           
  2122                           ;UART.c: 41: RCIP = 0;
  2123  0023A4  9A9F               	bcf	3999,5,c	;volatile
  2124                           
  2125                           ;UART.c: 42: RCIE = 1;
  2126  0023A6  8A9D               	bsf	3997,5,c	;volatile
  2127                           
  2128                           ;UART.c: 43: PEIE = 1;
  2129  0023A8  8CF2               	bsf	intcon,6,c	;volatile
  2130                           
  2131                           ;UART.c: 46: INTCONbits.GIEH=1;
  2132  0023AA  8EF2               	bsf	intcon,7,c	;volatile
  2133                           
  2134                           ;UART.c: 47: INTCONbits.GIEL=1;
  2135  0023AC  8CF2               	bsf	intcon,6,c	;volatile
  2136                           
  2137                           ;UART.c: 49: ESTADO_COMUNICACAO = 0x00;
  2138  0023AE  0E00               	movlw	0
  2139  0023B0  6E2D               	movwf	_ESTADO_COMUNICACAO,c
  2140  0023B2  0012               	return		;funcret
  2141  0023B4                     __end_of_inicializarUART:
  2142                           	opt stack 0
  2143                           tblptru	equ	0xFF8
  2144                           tblptrh	equ	0xFF7
  2145                           tblptrl	equ	0xFF6
  2146                           tablat	equ	0xFF5
  2147                           intcon	equ	0xFF2
  2148                           postinc0	equ	0xFEE
  2149                           wreg	equ	0xFE8
  2150                           postdec1	equ	0xFE5
  2151                           fsr1l	equ	0xFE1
  2152                           status	equ	0xFD8
  2153                           
  2154 ;; *************** function _despertarAlarme *****************
  2155 ;; Defined at:
  2156 ;;		line 248 in file "lcd.c"
  2157 ;; Parameters:    Size  Location     Type
  2158 ;;		None
  2159 ;; Auto vars:     Size  Location     Type
  2160 ;;		None
  2161 ;; Return value:  Size  Location     Type
  2162 ;;                  1    wreg      void 
  2163 ;; Registers used:
  2164 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2165 ;; Tracked objects:
  2166 ;;		On entry : 0/0
  2167 ;;		On exit  : 0/0
  2168 ;;		Unchanged: 0/0
  2169 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2170 ;;      Params:         0       0       0       0       0       0       0       0       0
  2171 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2172 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2173 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2174 ;;Total ram usage:        0 bytes
  2175 ;; Hardware stack levels used:    1
  2176 ;; Hardware stack levels required when called:    7
  2177 ;; This function calls:
  2178 ;;		_SetDDRamAddr
  2179 ;;		_WriteCmdXLCD
  2180 ;;		_putsXLCD
  2181 ;; This function is called by:
  2182 ;;		_main
  2183 ;; This function uses a non-reentrant model
  2184 ;;
  2185                           
  2186                           	psect	text10
  2187  00234E                     __ptext10:
  2188                           	opt stack 0
  2189  00234E                     _despertarAlarme:
  2190                           	opt stack 23
  2191                           
  2192                           ;lcd.c: 249: WriteCmdXLCD(0x0C);
  2193                           
  2194                           ;incstack = 0
  2195  00234E  0E0C               	movlw	12
  2196  002350  EC33  F011         	call	_WriteCmdXLCD
  2197                           
  2198                           ;lcd.c: 250: SetDDRamAddr(0x0F);
  2199  002354  0E0F               	movlw	15
  2200  002356  ECAE  F00F         	call	_SetDDRamAddr
  2201                           
  2202                           ;lcd.c: 251: putsXLCD("A");
  2203  00235A  0ED8               	movlw	low STR_22
  2204  00235C  0100               	movlb	0	; () banked
  2205  00235E  6F60               	movwf	putsXLCD@buffer& (0+255),b
  2206  002360  0E08               	movlw	high STR_22
  2207  002362  0100               	movlb	0	; () banked
  2208  002364  6F61               	movwf	(putsXLCD@buffer+1)& (0+255),b
  2209  002366  EC8C  F011         	call	_putsXLCD	;wreg free
  2210                           
  2211                           ;lcd.c: 252: SetDDRamAddr(0x0F);
  2212  00236A  0E0F               	movlw	15
  2213  00236C  ECAE  F00F         	call	_SetDDRamAddr
  2214                           
  2215                           ;lcd.c: 253: putsXLCD(" ");
  2216  002370  0ED6               	movlw	low (STR_21+7)
  2217  002372  0100               	movlb	0	; () banked
  2218  002374  6F60               	movwf	putsXLCD@buffer& (0+255),b
  2219  002376  0E08               	movlw	high (STR_21+7)
  2220  002378  0100               	movlb	0	; () banked
  2221  00237A  6F61               	movwf	(putsXLCD@buffer+1)& (0+255),b
  2222  00237C  EC8C  F011         	call	_putsXLCD	;wreg free
  2223  002380  0012               	return		;funcret
  2224  002382                     __end_of_despertarAlarme:
  2225                           	opt stack 0
  2226                           tblptru	equ	0xFF8
  2227                           tblptrh	equ	0xFF7
  2228                           tblptrl	equ	0xFF6
  2229                           tablat	equ	0xFF5
  2230                           intcon	equ	0xFF2
  2231                           postinc0	equ	0xFEE
  2232                           wreg	equ	0xFE8
  2233                           postdec1	equ	0xFE5
  2234                           fsr1l	equ	0xFE1
  2235                           status	equ	0xFD8
  2236                           
  2237 ;; *************** function _despertar *****************
  2238 ;; Defined at:
  2239 ;;		line 91 in file "relogio.c"
  2240 ;; Parameters:    Size  Location     Type
  2241 ;;		None
  2242 ;; Auto vars:     Size  Location     Type
  2243 ;;		None
  2244 ;; Return value:  Size  Location     Type
  2245 ;;                  2   31[COMRAM] int 
  2246 ;; Registers used:
  2247 ;;		wreg, status,2, status,0
  2248 ;; Tracked objects:
  2249 ;;		On entry : 0/0
  2250 ;;		On exit  : 0/0
  2251 ;;		Unchanged: 0/0
  2252 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2253 ;;      Params:         2       0       0       0       0       0       0       0       0
  2254 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2255 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2256 ;;      Totals:         2       0       0       0       0       0       0       0       0
  2257 ;;Total ram usage:        2 bytes
  2258 ;; Hardware stack levels used:    1
  2259 ;; Hardware stack levels required when called:    3
  2260 ;; This function calls:
  2261 ;;		Nothing
  2262 ;; This function is called by:
  2263 ;;		_main
  2264 ;; This function uses a non-reentrant model
  2265 ;;
  2266                           
  2267                           	psect	text11
  2268  0021EA                     __ptext11:
  2269                           	opt stack 0
  2270  0021EA                     _despertar:
  2271                           	opt stack 27
  2272                           
  2273                           ;relogio.c: 92: if(re.hora == alarme.hora && re.minuto == alarme.minuto && re.segundo ==
      +                           alarme.segundo){
  2274                           
  2275                           ;incstack = 0
  2276  0021EA  5032               	movf	_alarme+4,w,c
  2277  0021EC  1838               	xorwf	_re+4,w,c
  2278  0021EE  E117               	bnz	l3181
  2279  0021F0  5033               	movf	_alarme+5,w,c
  2280  0021F2  1839               	xorwf	_re+5,w,c
  2281  0021F4  A4D8               	btfss	status,2,c
  2282  0021F6  D013               	goto	l3181
  2283  0021F8  502E               	movf	_alarme,w,c
  2284  0021FA  1834               	xorwf	_re,w,c
  2285  0021FC  E110               	bnz	l3181
  2286  0021FE  502F               	movf	_alarme+1,w,c
  2287  002200  1835               	xorwf	_re+1,w,c
  2288  002202  A4D8               	btfss	status,2,c
  2289  002204  D00C               	goto	l3181
  2290  002206  5030               	movf	_alarme+2,w,c
  2291  002208  1836               	xorwf	_re+2,w,c
  2292  00220A  E109               	bnz	l3181
  2293  00220C  5031               	movf	_alarme+3,w,c
  2294  00220E  1837               	xorwf	_re+3,w,c
  2295  002210  A4D8               	btfss	status,2,c
  2296  002212  D005               	goto	l3181
  2297                           
  2298                           ;relogio.c: 93: return 1;
  2299  002214  0E00               	movlw	0
  2300  002216  6E21               	movwf	?_despertar+1,c
  2301  002218  0E01               	movlw	1
  2302  00221A  6E20               	movwf	?_despertar,c
  2303                           
  2304                           ;relogio.c: 94: }else{
  2305  00221C  0012               	return	
  2306  00221E                     l3181:
  2307                           
  2308                           ;relogio.c: 95: return 0;
  2309  00221E  0E00               	movlw	0
  2310  002220  6E21               	movwf	?_despertar+1,c
  2311  002222  0E00               	movlw	0
  2312  002224  6E20               	movwf	?_despertar,c
  2313  002226  0012               	return	
  2314  002228                     __end_of_despertar:
  2315                           	opt stack 0
  2316                           tblptru	equ	0xFF8
  2317                           tblptrh	equ	0xFF7
  2318                           tblptrl	equ	0xFF6
  2319                           tablat	equ	0xFF5
  2320                           intcon	equ	0xFF2
  2321                           postinc0	equ	0xFEE
  2322                           wreg	equ	0xFE8
  2323                           postdec1	equ	0xFE5
  2324                           fsr1l	equ	0xFE1
  2325                           status	equ	0xFD8
  2326                           
  2327 ;; *************** function _atualiza_tela *****************
  2328 ;; Defined at:
  2329 ;;		line 182 in file "lcd.c"
  2330 ;; Parameters:    Size  Location     Type
  2331 ;;		None
  2332 ;; Auto vars:     Size  Location     Type
  2333 ;;		None
  2334 ;; Return value:  Size  Location     Type
  2335 ;;                  1    wreg      void 
  2336 ;; Registers used:
  2337 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2338 ;; Tracked objects:
  2339 ;;		On entry : 0/0
  2340 ;;		On exit  : 0/0
  2341 ;;		Unchanged: 0/0
  2342 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2343 ;;      Params:         0       0       0       0       0       0       0       0       0
  2344 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2345 ;;      Temps:          0       2       0       0       0       0       0       0       0
  2346 ;;      Totals:         0       2       0       0       0       0       0       0       0
  2347 ;;Total ram usage:        2 bytes
  2348 ;; Hardware stack levels used:    1
  2349 ;; Hardware stack levels required when called:    8
  2350 ;; This function calls:
  2351 ;;		_inicializaTela1
  2352 ;;		_inicializaTela2
  2353 ;; This function is called by:
  2354 ;;		_main
  2355 ;; This function uses a non-reentrant model
  2356 ;;
  2357                           
  2358                           	psect	text12
  2359  0023B4                     __ptext12:
  2360                           	opt stack 0
  2361  0023B4                     _atualiza_tela:
  2362                           	opt stack 22
  2363                           
  2364                           ;lcd.c: 183: switch(flagTela){
  2365                           
  2366                           ;incstack = 0
  2367  0023B4  D006               	goto	l4095
  2368  0023B6                     l4089:
  2369                           
  2370                           ;lcd.c: 185: inicializaTela1();
  2371  0023B6  EC74  F00E         	call	_inicializaTela1	;wreg free
  2372                           
  2373                           ;lcd.c: 186: break;
  2374  0023BA  0012               	return	
  2375  0023BC                     l4091:
  2376                           
  2377                           ;lcd.c: 188: inicializaTela2();
  2378  0023BC  ECFE  F00E         	call	_inicializaTela2	;wreg free
  2379                           
  2380                           ;lcd.c: 193: }
  2381                           
  2382                           ;lcd.c: 192: return;
  2383                           
  2384                           ;lcd.c: 191: default:
  2385                           
  2386                           ;lcd.c: 189: break;
  2387  0023C0  0012               	return	
  2388  0023C2                     l4095:
  2389  0023C2  C0BC  F084         	movff	_flagTela,??_atualiza_tela
  2390  0023C6  C0BD  F085         	movff	_flagTela+1,??_atualiza_tela+1
  2391                           
  2392                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2393                           ; Switch size 1, requested type "space"
  2394                           ; Number of cases is 1, Range of values is 0 to 0
  2395                           ; switch strategies available:
  2396                           ; Name         Instructions Cycles
  2397                           ; simple_byte            4     3 (average)
  2398                           ;	Chosen strategy is simple_byte
  2399  0023CA  0100               	movlb	0	; () banked
  2400  0023CC  5185               	movf	(??_atualiza_tela+1)& (0+255),w,b
  2401  0023CE  0A00               	xorlw	0	; case 0
  2402  0023D0  A4D8               	btfss	status,2,c
  2403  0023D2  0012               	return	
  2404                           
  2405                           ; BSR set to: 0
  2406                           ; Switch size 1, requested type "space"
  2407                           ; Number of cases is 2, Range of values is 1 to 2
  2408                           ; switch strategies available:
  2409                           ; Name         Instructions Cycles
  2410                           ; simple_byte            7     4 (average)
  2411                           ;	Chosen strategy is simple_byte
  2412  0023D4  0100               	movlb	0	; () banked
  2413  0023D6  5184               	movf	??_atualiza_tela& (0+255),w,b
  2414  0023D8  0A01               	xorlw	1	; case 1
  2415  0023DA  B4D8               	btfsc	status,2,c
  2416  0023DC  D7EC               	goto	l4089
  2417  0023DE  0A03               	xorlw	3	; case 2
  2418  0023E0  A4D8               	btfss	status,2,c
  2419  0023E2  0012               	return	
  2420  0023E4  D7EB               	goto	l4091
  2421  0023E6                     __end_of_atualiza_tela:
  2422                           	opt stack 0
  2423                           tblptru	equ	0xFF8
  2424                           tblptrh	equ	0xFF7
  2425                           tblptrl	equ	0xFF6
  2426                           tablat	equ	0xFF5
  2427                           intcon	equ	0xFF2
  2428                           postinc0	equ	0xFEE
  2429                           wreg	equ	0xFE8
  2430                           postdec1	equ	0xFE5
  2431                           fsr1l	equ	0xFE1
  2432                           status	equ	0xFD8
  2433                           
  2434 ;; *************** function _inicializaTela2 *****************
  2435 ;; Defined at:
  2436 ;;		line 166 in file "lcd.c"
  2437 ;; Parameters:    Size  Location     Type
  2438 ;;		None
  2439 ;; Auto vars:     Size  Location     Type
  2440 ;;		None
  2441 ;; Return value:  Size  Location     Type
  2442 ;;                  1    wreg      void 
  2443 ;; Registers used:
  2444 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2445 ;; Tracked objects:
  2446 ;;		On entry : 0/0
  2447 ;;		On exit  : 0/0
  2448 ;;		Unchanged: 0/0
  2449 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2450 ;;      Params:         0       0       0       0       0       0       0       0       0
  2451 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2452 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2453 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2454 ;;Total ram usage:        0 bytes
  2455 ;; Hardware stack levels used:    1
  2456 ;; Hardware stack levels required when called:    7
  2457 ;; This function calls:
  2458 ;;		_SetDDRamAddr
  2459 ;;		_WriteCmdXLCD
  2460 ;;		_controlaCursor
  2461 ;;		_exibirAlarme
  2462 ;;		_putrsXLCD
  2463 ;;		_putsXLCD
  2464 ;; This function is called by:
  2465 ;;		_atualiza_tela
  2466 ;; This function uses a non-reentrant model
  2467 ;;
  2468                           
  2469                           	psect	text13
  2470  001DFC                     __ptext13:
  2471                           	opt stack 0
  2472  001DFC                     _inicializaTela2:
  2473                           	opt stack 22
  2474                           
  2475                           ;lcd.c: 167: if(T2 == 0){
  2476                           
  2477                           ;incstack = 0
  2478  001DFC  0100               	movlb	0	; () banked
  2479  001DFE  5197               	movf	_T2& (0+255),w,b
  2480  001E00  0100               	movlb	0	; () banked
  2481  001E02  1198               	iorwf	(_T2+1)& (0+255),w,b
  2482  001E04  A4D8               	btfss	status,2,c
  2483  001E06  D012               	goto	l4055
  2484                           
  2485                           ; BSR set to: 0
  2486                           ;lcd.c: 168: if(flagAlarme == 0){
  2487  001E08  5024               	movf	_flagAlarme,w,c
  2488  001E0A  1025               	iorwf	_flagAlarme+1,w,c
  2489  001E0C  A4D8               	btfss	status,2,c
  2490  001E0E  D003               	goto	l4051
  2491                           
  2492                           ; BSR set to: 0
  2493                           ;lcd.c: 169: WriteCmdXLCD(0x0F);
  2494  001E10  0E0F               	movlw	15
  2495  001E12  EC33  F011         	call	_WriteCmdXLCD
  2496  001E16                     l4051:
  2497                           
  2498                           ;lcd.c: 170: }
  2499                           ;lcd.c: 171: T2 = 1;
  2500  001E16  0E00               	movlw	0
  2501  001E18  0100               	movlb	0	; () banked
  2502  001E1A  6F98               	movwf	(_T2+1)& (0+255),b
  2503  001E1C  0E01               	movlw	1
  2504  001E1E  6F97               	movwf	_T2& (0+255),b
  2505                           
  2506                           ; BSR set to: 0
  2507                           ;lcd.c: 172: T1 = 0;
  2508  001E20  0E00               	movlw	0
  2509  001E22  0100               	movlb	0	; () banked
  2510  001E24  6F9A               	movwf	(_T1+1)& (0+255),b
  2511  001E26  0E00               	movlw	0
  2512  001E28  6F99               	movwf	_T1& (0+255),b
  2513                           
  2514                           ;lcd.c: 173: }else{
  2515  001E2A  0012               	return	
  2516  001E2C                     l4055:
  2517                           
  2518                           ; BSR set to: 0
  2519                           ;lcd.c: 174: SetDDRamAddr(0x0);
  2520  001E2C  0E00               	movlw	0
  2521  001E2E  ECAE  F00F         	call	_SetDDRamAddr
  2522                           
  2523                           ;lcd.c: 175: putsXLCD("ALARME: ");
  2524  001E32  0ECF               	movlw	low STR_21
  2525  001E34  0100               	movlb	0	; () banked
  2526  001E36  6F60               	movwf	putsXLCD@buffer& (0+255),b
  2527  001E38  0E08               	movlw	high STR_21
  2528  001E3A  0100               	movlb	0	; () banked
  2529  001E3C  6F61               	movwf	(putsXLCD@buffer+1)& (0+255),b
  2530  001E3E  EC8C  F011         	call	_putsXLCD	;wreg free
  2531                           
  2532                           ;lcd.c: 176: SetDDRamAddr(0x40);
  2533  001E42  0E40               	movlw	64
  2534  001E44  ECAE  F00F         	call	_SetDDRamAddr
  2535                           
  2536                           ;lcd.c: 177: putrsXLCD(exibirAlarme(alarme.hora, alarme.minuto, alarme.segundo));
  2537  001E48  C032  F07C         	movff	_alarme+4,exibirAlarme@h
  2538  001E4C  C033  F07D         	movff	_alarme+5,exibirAlarme@h+1
  2539  001E50  C02E  F07E         	movff	_alarme,exibirAlarme@m
  2540  001E54  C02F  F07F         	movff	_alarme+1,exibirAlarme@m+1
  2541  001E58  C030  F080         	movff	_alarme+2,exibirAlarme@s
  2542  001E5C  C031  F081         	movff	_alarme+3,exibirAlarme@s+1
  2543  001E60  EC6E  F004         	call	_exibirAlarme	;wreg free
  2544  001E64  C07C  F082         	movff	?_exibirAlarme,putrsXLCD@buffer
  2545  001E68  C07D  F083         	movff	?_exibirAlarme+1,putrsXLCD@buffer+1
  2546  001E6C  ECF3  F011         	call	_putrsXLCD	;wreg free
  2547                           
  2548                           ;lcd.c: 178: controlaCursor();
  2549  001E70  ECD3  F010         	call	_controlaCursor	;wreg free
  2550  001E74  0012               	return	
  2551  001E76                     __end_of_inicializaTela2:
  2552                           	opt stack 0
  2553                           tblptru	equ	0xFF8
  2554                           tblptrh	equ	0xFF7
  2555                           tblptrl	equ	0xFF6
  2556                           tablat	equ	0xFF5
  2557                           intcon	equ	0xFF2
  2558                           postinc0	equ	0xFEE
  2559                           wreg	equ	0xFE8
  2560                           postdec1	equ	0xFE5
  2561                           fsr1l	equ	0xFE1
  2562                           status	equ	0xFD8
  2563                           
  2564 ;; *************** function _putsXLCD *****************
  2565 ;; Defined at:
  2566 ;;		line 16 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\pic18\plib\XLCD\putsxlcd.c"
  2567 ;; Parameters:    Size  Location     Type
  2568 ;;  buffer          2    0[BANK0 ] PTR unsigned char 
  2569 ;;		 -> STR_23(2), STR_22(2), STR_21(9), 
  2570 ;; Auto vars:     Size  Location     Type
  2571 ;;		None
  2572 ;; Return value:  Size  Location     Type
  2573 ;;                  1    wreg      void 
  2574 ;; Registers used:
  2575 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2576 ;; Tracked objects:
  2577 ;;		On entry : 0/0
  2578 ;;		On exit  : 0/0
  2579 ;;		Unchanged: 0/0
  2580 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2581 ;;      Params:         0       2       0       0       0       0       0       0       0
  2582 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2583 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2584 ;;      Totals:         0       2       0       0       0       0       0       0       0
  2585 ;;Total ram usage:        2 bytes
  2586 ;; Hardware stack levels used:    1
  2587 ;; Hardware stack levels required when called:    6
  2588 ;; This function calls:
  2589 ;;		_BusyXLCD
  2590 ;;		_WriteDataXLCD
  2591 ;; This function is called by:
  2592 ;;		_inicializaTela2
  2593 ;;		_despertarAlarme
  2594 ;; This function uses a non-reentrant model
  2595 ;;
  2596                           
  2597                           	psect	text14
  2598  002318                     __ptext14:
  2599                           	opt stack 0
  2600  002318                     _putsXLCD:
  2601                           	opt stack 23
  2602                           
  2603                           ;incstack = 0
  2604  002318  D010               	goto	l3969
  2605  00231A                     l3963:
  2606  00231A  EC6F  F011         	call	_BusyXLCD	;wreg free
  2607  00231E  0900               	iorlw	0
  2608  002320  A4D8               	btfss	status,2,c
  2609  002322  D7FB               	goto	l3963
  2610  002324  C060  FFF6         	movff	putsXLCD@buffer,tblptrl
  2611  002328  C061  FFF7         	movff	putsXLCD@buffer+1,tblptrh
  2612  00232C                     	if	0	;tblptru may be non-zero
  2613  00232C                     	endif
  2614  00232C                     	if	0	;tblptru may be non-zero
  2615  00232C                     	endif
  2616  00232C  0008               	tblrd		*
  2617  00232E  50F5               	movf	tablat,w,c
  2618  002330  EC14  F011         	call	_WriteDataXLCD
  2619  002334  0100               	movlb	0	; () banked
  2620  002336  4B60               	infsnz	putsXLCD@buffer& (0+255),f,b
  2621  002338  2B61               	incf	(putsXLCD@buffer+1)& (0+255),f,b
  2622  00233A                     l3969:
  2623  00233A  C060  FFF6         	movff	putsXLCD@buffer,tblptrl
  2624  00233E  C061  FFF7         	movff	putsXLCD@buffer+1,tblptrh
  2625  002342                     	if	0	;tblptru may be non-zero
  2626  002342                     	endif
  2627  002342                     	if	0	;tblptru may be non-zero
  2628  002342                     	endif
  2629  002342  0008               	tblrd		*
  2630  002344  50F5               	movf	tablat,w,c
  2631  002346  0900               	iorlw	0
  2632  002348  B4D8               	btfsc	status,2,c
  2633  00234A  0012               	return	
  2634  00234C  D7E6               	goto	l3963
  2635  00234E                     __end_of_putsXLCD:
  2636                           	opt stack 0
  2637                           tblptru	equ	0xFF8
  2638                           tblptrh	equ	0xFF7
  2639                           tblptrl	equ	0xFF6
  2640                           tablat	equ	0xFF5
  2641                           intcon	equ	0xFF2
  2642                           postinc0	equ	0xFEE
  2643                           wreg	equ	0xFE8
  2644                           postdec1	equ	0xFE5
  2645                           fsr1l	equ	0xFE1
  2646                           status	equ	0xFD8
  2647                           
  2648 ;; *************** function _exibirAlarme *****************
  2649 ;; Defined at:
  2650 ;;		line 123 in file "lcd.c"
  2651 ;; Parameters:    Size  Location     Type
  2652 ;;  h               2   28[BANK0 ] int 
  2653 ;;  m               2   30[BANK0 ] int 
  2654 ;;  s               2   32[BANK0 ] int 
  2655 ;; Auto vars:     Size  Location     Type
  2656 ;;		None
  2657 ;; Return value:  Size  Location     Type
  2658 ;;                  2   28[BANK0 ] PTR unsigned char 
  2659 ;; Registers used:
  2660 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2661 ;; Tracked objects:
  2662 ;;		On entry : 0/0
  2663 ;;		On exit  : 0/0
  2664 ;;		Unchanged: 0/0
  2665 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2666 ;;      Params:         0       6       0       0       0       0       0       0       0
  2667 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2668 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2669 ;;      Totals:         0       6       0       0       0       0       0       0       0
  2670 ;;Total ram usage:        6 bytes
  2671 ;; Hardware stack levels used:    1
  2672 ;; Hardware stack levels required when called:    5
  2673 ;; This function calls:
  2674 ;;		_sprintf
  2675 ;; This function is called by:
  2676 ;;		_inicializaTela2
  2677 ;; This function uses a non-reentrant model
  2678 ;;
  2679                           
  2680                           	psect	text15
  2681  0008DC                     __ptext15:
  2682                           	opt stack 0
  2683  0008DC                     _exibirAlarme:
  2684                           	opt stack 23
  2685                           
  2686                           ;lcd.c: 124: static char *string;
  2687                           ;lcd.c: 126: if(h >= 10 && m >= 10 && s >= 10){
  2688                           
  2689                           ;incstack = 0
  2690  0008DC  0100               	movlb	0	; () banked
  2691  0008DE  BF7D               	btfsc	(exibirAlarme@h+1)& (0+255),7,b
  2692  0008E0  D036               	goto	l3891
  2693  0008E2  0100               	movlb	0	; () banked
  2694  0008E4  517D               	movf	(exibirAlarme@h+1)& (0+255),w,b
  2695  0008E6  E105               	bnz	u3900
  2696  0008E8  0E0A               	movlw	10
  2697  0008EA  0100               	movlb	0	; () banked
  2698  0008EC  5D7C               	subwf	exibirAlarme@h& (0+255),w,b
  2699  0008EE  A0D8               	btfss	status,0,c
  2700  0008F0  D02E               	goto	l3891
  2701  0008F2                     u3900:
  2702                           
  2703                           ; BSR set to: 0
  2704  0008F2  0100               	movlb	0	; () banked
  2705  0008F4  BF7F               	btfsc	(exibirAlarme@m+1)& (0+255),7,b
  2706  0008F6  D02B               	goto	l3891
  2707  0008F8  0100               	movlb	0	; () banked
  2708  0008FA  517F               	movf	(exibirAlarme@m+1)& (0+255),w,b
  2709  0008FC  E105               	bnz	u3910
  2710  0008FE  0E0A               	movlw	10
  2711  000900  0100               	movlb	0	; () banked
  2712  000902  5D7E               	subwf	exibirAlarme@m& (0+255),w,b
  2713  000904  A0D8               	btfss	status,0,c
  2714  000906  D023               	goto	l3891
  2715  000908                     u3910:
  2716                           
  2717                           ; BSR set to: 0
  2718  000908  0100               	movlb	0	; () banked
  2719  00090A  BF81               	btfsc	(exibirAlarme@s+1)& (0+255),7,b
  2720  00090C  D020               	goto	l3891
  2721  00090E  0100               	movlb	0	; () banked
  2722  000910  5181               	movf	(exibirAlarme@s+1)& (0+255),w,b
  2723  000912  E105               	bnz	u3920
  2724  000914  0E0A               	movlw	10
  2725  000916  0100               	movlb	0	; () banked
  2726  000918  5D80               	subwf	exibirAlarme@s& (0+255),w,b
  2727  00091A  A0D8               	btfss	status,0,c
  2728  00091C  D018               	goto	l3891
  2729  00091E                     u3920:
  2730                           
  2731                           ; BSR set to: 0
  2732                           ;lcd.c: 127: sprintf(string, "%i:%i:%i", h, m, s);
  2733  00091E  C08F  F06B         	movff	exibirAlarme@string,sprintf@sp
  2734  000922  C090  F06C         	movff	exibirAlarme@string+1,sprintf@sp+1
  2735  000926  0EC6               	movlw	low (STR_5+6)
  2736  000928  0100               	movlb	0	; () banked
  2737  00092A  6F6D               	movwf	sprintf@f& (0+255),b
  2738  00092C  0E08               	movlw	high (STR_5+6)
  2739  00092E  0100               	movlb	0	; () banked
  2740  000930  6F6E               	movwf	(sprintf@f+1)& (0+255),b
  2741  000932  C07C  F06F         	movff	exibirAlarme@h,?_sprintf+4
  2742  000936  C07D  F070         	movff	exibirAlarme@h+1,?_sprintf+5
  2743  00093A  C07E  F071         	movff	exibirAlarme@m,?_sprintf+6
  2744  00093E  C07F  F072         	movff	exibirAlarme@m+1,?_sprintf+7
  2745  000942  C080  F073         	movff	exibirAlarme@s,?_sprintf+8
  2746  000946  C081  F074         	movff	exibirAlarme@s+1,?_sprintf+9
  2747  00094A  ECC6  F00A         	call	_sprintf	;wreg free
  2748  00094E                     l3891:
  2749                           
  2750                           ;lcd.c: 128: }
  2751                           ;lcd.c: 129: if(h >= 10 && m >= 10 && s < 10){
  2752  00094E  0100               	movlb	0	; () banked
  2753  000950  BF7D               	btfsc	(exibirAlarme@h+1)& (0+255),7,b
  2754  000952  D036               	goto	l3899
  2755  000954  0100               	movlb	0	; () banked
  2756  000956  517D               	movf	(exibirAlarme@h+1)& (0+255),w,b
  2757  000958  E105               	bnz	u3930
  2758  00095A  0E0A               	movlw	10
  2759  00095C  0100               	movlb	0	; () banked
  2760  00095E  5D7C               	subwf	exibirAlarme@h& (0+255),w,b
  2761  000960  A0D8               	btfss	status,0,c
  2762  000962  D02E               	goto	l3899
  2763  000964                     u3930:
  2764                           
  2765                           ; BSR set to: 0
  2766  000964  0100               	movlb	0	; () banked
  2767  000966  BF7F               	btfsc	(exibirAlarme@m+1)& (0+255),7,b
  2768  000968  D02B               	goto	l3899
  2769  00096A  0100               	movlb	0	; () banked
  2770  00096C  517F               	movf	(exibirAlarme@m+1)& (0+255),w,b
  2771  00096E  E105               	bnz	u3940
  2772  000970  0E0A               	movlw	10
  2773  000972  0100               	movlb	0	; () banked
  2774  000974  5D7E               	subwf	exibirAlarme@m& (0+255),w,b
  2775  000976  A0D8               	btfss	status,0,c
  2776  000978  D023               	goto	l3899
  2777  00097A                     u3940:
  2778                           
  2779                           ; BSR set to: 0
  2780  00097A  0100               	movlb	0	; () banked
  2781  00097C  BF81               	btfsc	(exibirAlarme@s+1)& (0+255),7,b
  2782  00097E  D008               	goto	l3897
  2783  000980  0100               	movlb	0	; () banked
  2784  000982  5181               	movf	(exibirAlarme@s+1)& (0+255),w,b
  2785  000984  E11D               	bnz	l3899
  2786  000986  0E0A               	movlw	10
  2787  000988  0100               	movlb	0	; () banked
  2788  00098A  5D80               	subwf	exibirAlarme@s& (0+255),w,b
  2789  00098C  B0D8               	btfsc	status,0,c
  2790  00098E  D018               	goto	l3899
  2791  000990                     l3897:
  2792                           
  2793                           ; BSR set to: 0
  2794                           ;lcd.c: 130: sprintf(string, "%i:%i:0%i", h, m, s);
  2795  000990  C08F  F06B         	movff	exibirAlarme@string,sprintf@sp
  2796  000994  C090  F06C         	movff	exibirAlarme@string+1,sprintf@sp+1
  2797  000998  0E87               	movlw	low (STR_6+6)
  2798  00099A  0100               	movlb	0	; () banked
  2799  00099C  6F6D               	movwf	sprintf@f& (0+255),b
  2800  00099E  0E08               	movlw	high (STR_6+6)
  2801  0009A0  0100               	movlb	0	; () banked
  2802  0009A2  6F6E               	movwf	(sprintf@f+1)& (0+255),b
  2803  0009A4  C07C  F06F         	movff	exibirAlarme@h,?_sprintf+4
  2804  0009A8  C07D  F070         	movff	exibirAlarme@h+1,?_sprintf+5
  2805  0009AC  C07E  F071         	movff	exibirAlarme@m,?_sprintf+6
  2806  0009B0  C07F  F072         	movff	exibirAlarme@m+1,?_sprintf+7
  2807  0009B4  C080  F073         	movff	exibirAlarme@s,?_sprintf+8
  2808  0009B8  C081  F074         	movff	exibirAlarme@s+1,?_sprintf+9
  2809  0009BC  ECC6  F00A         	call	_sprintf	;wreg free
  2810  0009C0                     l3899:
  2811                           
  2812                           ;lcd.c: 131: }
  2813                           ;lcd.c: 132: if(h >= 10 && m < 10 && s >= 10){
  2814  0009C0  0100               	movlb	0	; () banked
  2815  0009C2  BF7D               	btfsc	(exibirAlarme@h+1)& (0+255),7,b
  2816  0009C4  D036               	goto	l3907
  2817  0009C6  0100               	movlb	0	; () banked
  2818  0009C8  517D               	movf	(exibirAlarme@h+1)& (0+255),w,b
  2819  0009CA  E105               	bnz	u3960
  2820  0009CC  0E0A               	movlw	10
  2821  0009CE  0100               	movlb	0	; () banked
  2822  0009D0  5D7C               	subwf	exibirAlarme@h& (0+255),w,b
  2823  0009D2  A0D8               	btfss	status,0,c
  2824  0009D4  D02E               	goto	l3907
  2825  0009D6                     u3960:
  2826                           
  2827                           ; BSR set to: 0
  2828  0009D6  0100               	movlb	0	; () banked
  2829  0009D8  BF7F               	btfsc	(exibirAlarme@m+1)& (0+255),7,b
  2830  0009DA  D008               	goto	l3903
  2831  0009DC  0100               	movlb	0	; () banked
  2832  0009DE  517F               	movf	(exibirAlarme@m+1)& (0+255),w,b
  2833  0009E0  E128               	bnz	l3907
  2834  0009E2  0E0A               	movlw	10
  2835  0009E4  0100               	movlb	0	; () banked
  2836  0009E6  5D7E               	subwf	exibirAlarme@m& (0+255),w,b
  2837  0009E8  B0D8               	btfsc	status,0,c
  2838  0009EA  D023               	goto	l3907
  2839  0009EC                     l3903:
  2840                           
  2841                           ; BSR set to: 0
  2842  0009EC  0100               	movlb	0	; () banked
  2843  0009EE  BF81               	btfsc	(exibirAlarme@s+1)& (0+255),7,b
  2844  0009F0  D020               	goto	l3907
  2845  0009F2  0100               	movlb	0	; () banked
  2846  0009F4  5181               	movf	(exibirAlarme@s+1)& (0+255),w,b
  2847  0009F6  E105               	bnz	u3980
  2848  0009F8  0E0A               	movlw	10
  2849  0009FA  0100               	movlb	0	; () banked
  2850  0009FC  5D80               	subwf	exibirAlarme@s& (0+255),w,b
  2851  0009FE  A0D8               	btfss	status,0,c
  2852  000A00  D018               	goto	l3907
  2853  000A02                     u3980:
  2854                           
  2855                           ; BSR set to: 0
  2856                           ;lcd.c: 133: sprintf(string, "%i:0%i:%i", h, m, s);
  2857  000A02  C08F  F06B         	movff	exibirAlarme@string,sprintf@sp
  2858  000A06  C090  F06C         	movff	exibirAlarme@string+1,sprintf@sp+1
  2859  000A0A  0E97               	movlw	low (STR_7+6)
  2860  000A0C  0100               	movlb	0	; () banked
  2861  000A0E  6F6D               	movwf	sprintf@f& (0+255),b
  2862  000A10  0E08               	movlw	high (STR_7+6)
  2863  000A12  0100               	movlb	0	; () banked
  2864  000A14  6F6E               	movwf	(sprintf@f+1)& (0+255),b
  2865  000A16  C07C  F06F         	movff	exibirAlarme@h,?_sprintf+4
  2866  000A1A  C07D  F070         	movff	exibirAlarme@h+1,?_sprintf+5
  2867  000A1E  C07E  F071         	movff	exibirAlarme@m,?_sprintf+6
  2868  000A22  C07F  F072         	movff	exibirAlarme@m+1,?_sprintf+7
  2869  000A26  C080  F073         	movff	exibirAlarme@s,?_sprintf+8
  2870  000A2A  C081  F074         	movff	exibirAlarme@s+1,?_sprintf+9
  2871  000A2E  ECC6  F00A         	call	_sprintf	;wreg free
  2872  000A32                     l3907:
  2873                           
  2874                           ;lcd.c: 134: }if(h >= 10 && m < 10 && s < 10){
  2875  000A32  0100               	movlb	0	; () banked
  2876  000A34  BF7D               	btfsc	(exibirAlarme@h+1)& (0+255),7,b
  2877  000A36  D036               	goto	l3915
  2878  000A38  0100               	movlb	0	; () banked
  2879  000A3A  517D               	movf	(exibirAlarme@h+1)& (0+255),w,b
  2880  000A3C  E105               	bnz	u3990
  2881  000A3E  0E0A               	movlw	10
  2882  000A40  0100               	movlb	0	; () banked
  2883  000A42  5D7C               	subwf	exibirAlarme@h& (0+255),w,b
  2884  000A44  A0D8               	btfss	status,0,c
  2885  000A46  D02E               	goto	l3915
  2886  000A48                     u3990:
  2887                           
  2888                           ; BSR set to: 0
  2889  000A48  0100               	movlb	0	; () banked
  2890  000A4A  BF7F               	btfsc	(exibirAlarme@m+1)& (0+255),7,b
  2891  000A4C  D008               	goto	l3911
  2892  000A4E  0100               	movlb	0	; () banked
  2893  000A50  517F               	movf	(exibirAlarme@m+1)& (0+255),w,b
  2894  000A52  E128               	bnz	l3915
  2895  000A54  0E0A               	movlw	10
  2896  000A56  0100               	movlb	0	; () banked
  2897  000A58  5D7E               	subwf	exibirAlarme@m& (0+255),w,b
  2898  000A5A  B0D8               	btfsc	status,0,c
  2899  000A5C  D023               	goto	l3915
  2900  000A5E                     l3911:
  2901                           
  2902                           ; BSR set to: 0
  2903  000A5E  0100               	movlb	0	; () banked
  2904  000A60  BF81               	btfsc	(exibirAlarme@s+1)& (0+255),7,b
  2905  000A62  D008               	goto	l3913
  2906  000A64  0100               	movlb	0	; () banked
  2907  000A66  5181               	movf	(exibirAlarme@s+1)& (0+255),w,b
  2908  000A68  E11D               	bnz	l3915
  2909  000A6A  0E0A               	movlw	10
  2910  000A6C  0100               	movlb	0	; () banked
  2911  000A6E  5D80               	subwf	exibirAlarme@s& (0+255),w,b
  2912  000A70  B0D8               	btfsc	status,0,c
  2913  000A72  D018               	goto	l3915
  2914  000A74                     l3913:
  2915                           
  2916                           ; BSR set to: 0
  2917                           ;lcd.c: 135: sprintf(string, "%i:0%i:0%i", h, m, s);
  2918  000A74  C08F  F06B         	movff	exibirAlarme@string,sprintf@sp
  2919  000A78  C090  F06C         	movff	exibirAlarme@string+1,sprintf@sp+1
  2920  000A7C  0E34               	movlw	low (STR_8+6)
  2921  000A7E  0100               	movlb	0	; () banked
  2922  000A80  6F6D               	movwf	sprintf@f& (0+255),b
  2923  000A82  0E08               	movlw	high (STR_8+6)
  2924  000A84  0100               	movlb	0	; () banked
  2925  000A86  6F6E               	movwf	(sprintf@f+1)& (0+255),b
  2926  000A88  C07C  F06F         	movff	exibirAlarme@h,?_sprintf+4
  2927  000A8C  C07D  F070         	movff	exibirAlarme@h+1,?_sprintf+5
  2928  000A90  C07E  F071         	movff	exibirAlarme@m,?_sprintf+6
  2929  000A94  C07F  F072         	movff	exibirAlarme@m+1,?_sprintf+7
  2930  000A98  C080  F073         	movff	exibirAlarme@s,?_sprintf+8
  2931  000A9C  C081  F074         	movff	exibirAlarme@s+1,?_sprintf+9
  2932  000AA0  ECC6  F00A         	call	_sprintf	;wreg free
  2933  000AA4                     l3915:
  2934                           
  2935                           ;lcd.c: 136: }
  2936                           ;lcd.c: 137: if(h < 10 && m >= 10 && s >= 10){
  2937  000AA4  0100               	movlb	0	; () banked
  2938  000AA6  BF7D               	btfsc	(exibirAlarme@h+1)& (0+255),7,b
  2939  000AA8  D008               	goto	l3917
  2940  000AAA  0100               	movlb	0	; () banked
  2941  000AAC  517D               	movf	(exibirAlarme@h+1)& (0+255),w,b
  2942  000AAE  E133               	bnz	l3923
  2943  000AB0  0E0A               	movlw	10
  2944  000AB2  0100               	movlb	0	; () banked
  2945  000AB4  5D7C               	subwf	exibirAlarme@h& (0+255),w,b
  2946  000AB6  B0D8               	btfsc	status,0,c
  2947  000AB8  D02E               	goto	l3923
  2948  000ABA                     l3917:
  2949                           
  2950                           ; BSR set to: 0
  2951  000ABA  0100               	movlb	0	; () banked
  2952  000ABC  BF7F               	btfsc	(exibirAlarme@m+1)& (0+255),7,b
  2953  000ABE  D02B               	goto	l3923
  2954  000AC0  0100               	movlb	0	; () banked
  2955  000AC2  517F               	movf	(exibirAlarme@m+1)& (0+255),w,b
  2956  000AC4  E105               	bnz	u4030
  2957  000AC6  0E0A               	movlw	10
  2958  000AC8  0100               	movlb	0	; () banked
  2959  000ACA  5D7E               	subwf	exibirAlarme@m& (0+255),w,b
  2960  000ACC  A0D8               	btfss	status,0,c
  2961  000ACE  D023               	goto	l3923
  2962  000AD0                     u4030:
  2963                           
  2964                           ; BSR set to: 0
  2965  000AD0  0100               	movlb	0	; () banked
  2966  000AD2  BF81               	btfsc	(exibirAlarme@s+1)& (0+255),7,b
  2967  000AD4  D020               	goto	l3923
  2968  000AD6  0100               	movlb	0	; () banked
  2969  000AD8  5181               	movf	(exibirAlarme@s+1)& (0+255),w,b
  2970  000ADA  E105               	bnz	u4040
  2971  000ADC  0E0A               	movlw	10
  2972  000ADE  0100               	movlb	0	; () banked
  2973  000AE0  5D80               	subwf	exibirAlarme@s& (0+255),w,b
  2974  000AE2  A0D8               	btfss	status,0,c
  2975  000AE4  D018               	goto	l3923
  2976  000AE6                     u4040:
  2977                           
  2978                           ; BSR set to: 0
  2979                           ;lcd.c: 138: sprintf(string, "0%i:%i:%i", h, m, s);
  2980  000AE6  C08F  F06B         	movff	exibirAlarme@string,sprintf@sp
  2981  000AEA  C090  F06C         	movff	exibirAlarme@string+1,sprintf@sp+1
  2982  000AEE  0EA7               	movlw	low (STR_9+6)
  2983  000AF0  0100               	movlb	0	; () banked
  2984  000AF2  6F6D               	movwf	sprintf@f& (0+255),b
  2985  000AF4  0E08               	movlw	high (STR_9+6)
  2986  000AF6  0100               	movlb	0	; () banked
  2987  000AF8  6F6E               	movwf	(sprintf@f+1)& (0+255),b
  2988  000AFA  C07C  F06F         	movff	exibirAlarme@h,?_sprintf+4
  2989  000AFE  C07D  F070         	movff	exibirAlarme@h+1,?_sprintf+5
  2990  000B02  C07E  F071         	movff	exibirAlarme@m,?_sprintf+6
  2991  000B06  C07F  F072         	movff	exibirAlarme@m+1,?_sprintf+7
  2992  000B0A  C080  F073         	movff	exibirAlarme@s,?_sprintf+8
  2993  000B0E  C081  F074         	movff	exibirAlarme@s+1,?_sprintf+9
  2994  000B12  ECC6  F00A         	call	_sprintf	;wreg free
  2995  000B16                     l3923:
  2996                           
  2997                           ;lcd.c: 139: }
  2998                           ;lcd.c: 140: if(h < 10 && m >= 10 && s < 10){
  2999  000B16  0100               	movlb	0	; () banked
  3000  000B18  BF7D               	btfsc	(exibirAlarme@h+1)& (0+255),7,b
  3001  000B1A  D008               	goto	l3925
  3002  000B1C  0100               	movlb	0	; () banked
  3003  000B1E  517D               	movf	(exibirAlarme@h+1)& (0+255),w,b
  3004  000B20  E133               	bnz	l3931
  3005  000B22  0E0A               	movlw	10
  3006  000B24  0100               	movlb	0	; () banked
  3007  000B26  5D7C               	subwf	exibirAlarme@h& (0+255),w,b
  3008  000B28  B0D8               	btfsc	status,0,c
  3009  000B2A  D02E               	goto	l3931
  3010  000B2C                     l3925:
  3011                           
  3012                           ; BSR set to: 0
  3013  000B2C  0100               	movlb	0	; () banked
  3014  000B2E  BF7F               	btfsc	(exibirAlarme@m+1)& (0+255),7,b
  3015  000B30  D02B               	goto	l3931
  3016  000B32  0100               	movlb	0	; () banked
  3017  000B34  517F               	movf	(exibirAlarme@m+1)& (0+255),w,b
  3018  000B36  E105               	bnz	u4060
  3019  000B38  0E0A               	movlw	10
  3020  000B3A  0100               	movlb	0	; () banked
  3021  000B3C  5D7E               	subwf	exibirAlarme@m& (0+255),w,b
  3022  000B3E  A0D8               	btfss	status,0,c
  3023  000B40  D023               	goto	l3931
  3024  000B42                     u4060:
  3025                           
  3026                           ; BSR set to: 0
  3027  000B42  0100               	movlb	0	; () banked
  3028  000B44  BF81               	btfsc	(exibirAlarme@s+1)& (0+255),7,b
  3029  000B46  D008               	goto	l3929
  3030  000B48  0100               	movlb	0	; () banked
  3031  000B4A  5181               	movf	(exibirAlarme@s+1)& (0+255),w,b
  3032  000B4C  E11D               	bnz	l3931
  3033  000B4E  0E0A               	movlw	10
  3034  000B50  0100               	movlb	0	; () banked
  3035  000B52  5D80               	subwf	exibirAlarme@s& (0+255),w,b
  3036  000B54  B0D8               	btfsc	status,0,c
  3037  000B56  D018               	goto	l3931
  3038  000B58                     l3929:
  3039                           
  3040                           ; BSR set to: 0
  3041                           ;lcd.c: 141: sprintf(string, "0%i:%i:0%i", h, m, s);
  3042  000B58  C08F  F06B         	movff	exibirAlarme@string,sprintf@sp
  3043  000B5C  C090  F06C         	movff	exibirAlarme@string+1,sprintf@sp+1
  3044  000B60  0E45               	movlw	low (STR_10+6)
  3045  000B62  0100               	movlb	0	; () banked
  3046  000B64  6F6D               	movwf	sprintf@f& (0+255),b
  3047  000B66  0E08               	movlw	high (STR_10+6)
  3048  000B68  0100               	movlb	0	; () banked
  3049  000B6A  6F6E               	movwf	(sprintf@f+1)& (0+255),b
  3050  000B6C  C07C  F06F         	movff	exibirAlarme@h,?_sprintf+4
  3051  000B70  C07D  F070         	movff	exibirAlarme@h+1,?_sprintf+5
  3052  000B74  C07E  F071         	movff	exibirAlarme@m,?_sprintf+6
  3053  000B78  C07F  F072         	movff	exibirAlarme@m+1,?_sprintf+7
  3054  000B7C  C080  F073         	movff	exibirAlarme@s,?_sprintf+8
  3055  000B80  C081  F074         	movff	exibirAlarme@s+1,?_sprintf+9
  3056  000B84  ECC6  F00A         	call	_sprintf	;wreg free
  3057  000B88                     l3931:
  3058                           
  3059                           ;lcd.c: 142: }
  3060                           ;lcd.c: 143: if(h < 10 && m < 10 && s >= 10){
  3061  000B88  0100               	movlb	0	; () banked
  3062  000B8A  BF7D               	btfsc	(exibirAlarme@h+1)& (0+255),7,b
  3063  000B8C  D008               	goto	l3933
  3064  000B8E  0100               	movlb	0	; () banked
  3065  000B90  517D               	movf	(exibirAlarme@h+1)& (0+255),w,b
  3066  000B92  E133               	bnz	l3939
  3067  000B94  0E0A               	movlw	10
  3068  000B96  0100               	movlb	0	; () banked
  3069  000B98  5D7C               	subwf	exibirAlarme@h& (0+255),w,b
  3070  000B9A  B0D8               	btfsc	status,0,c
  3071  000B9C  D02E               	goto	l3939
  3072  000B9E                     l3933:
  3073                           
  3074                           ; BSR set to: 0
  3075  000B9E  0100               	movlb	0	; () banked
  3076  000BA0  BF7F               	btfsc	(exibirAlarme@m+1)& (0+255),7,b
  3077  000BA2  D008               	goto	l3935
  3078  000BA4  0100               	movlb	0	; () banked
  3079  000BA6  517F               	movf	(exibirAlarme@m+1)& (0+255),w,b
  3080  000BA8  E128               	bnz	l3939
  3081  000BAA  0E0A               	movlw	10
  3082  000BAC  0100               	movlb	0	; () banked
  3083  000BAE  5D7E               	subwf	exibirAlarme@m& (0+255),w,b
  3084  000BB0  B0D8               	btfsc	status,0,c
  3085  000BB2  D023               	goto	l3939
  3086  000BB4                     l3935:
  3087                           
  3088                           ; BSR set to: 0
  3089  000BB4  0100               	movlb	0	; () banked
  3090  000BB6  BF81               	btfsc	(exibirAlarme@s+1)& (0+255),7,b
  3091  000BB8  D020               	goto	l3939
  3092  000BBA  0100               	movlb	0	; () banked
  3093  000BBC  5181               	movf	(exibirAlarme@s+1)& (0+255),w,b
  3094  000BBE  E105               	bnz	u4100
  3095  000BC0  0E0A               	movlw	10
  3096  000BC2  0100               	movlb	0	; () banked
  3097  000BC4  5D80               	subwf	exibirAlarme@s& (0+255),w,b
  3098  000BC6  A0D8               	btfss	status,0,c
  3099  000BC8  D018               	goto	l3939
  3100  000BCA                     u4100:
  3101                           
  3102                           ; BSR set to: 0
  3103                           ;lcd.c: 144: sprintf(string, "0%i:0%i:%i", h, m, s);
  3104  000BCA  C08F  F06B         	movff	exibirAlarme@string,sprintf@sp
  3105  000BCE  C090  F06C         	movff	exibirAlarme@string+1,sprintf@sp+1
  3106  000BD2  0E56               	movlw	low (STR_11+6)
  3107  000BD4  0100               	movlb	0	; () banked
  3108  000BD6  6F6D               	movwf	sprintf@f& (0+255),b
  3109  000BD8  0E08               	movlw	high (STR_11+6)
  3110  000BDA  0100               	movlb	0	; () banked
  3111  000BDC  6F6E               	movwf	(sprintf@f+1)& (0+255),b
  3112  000BDE  C07C  F06F         	movff	exibirAlarme@h,?_sprintf+4
  3113  000BE2  C07D  F070         	movff	exibirAlarme@h+1,?_sprintf+5
  3114  000BE6  C07E  F071         	movff	exibirAlarme@m,?_sprintf+6
  3115  000BEA  C07F  F072         	movff	exibirAlarme@m+1,?_sprintf+7
  3116  000BEE  C080  F073         	movff	exibirAlarme@s,?_sprintf+8
  3117  000BF2  C081  F074         	movff	exibirAlarme@s+1,?_sprintf+9
  3118  000BF6  ECC6  F00A         	call	_sprintf	;wreg free
  3119  000BFA                     l3939:
  3120                           
  3121                           ;lcd.c: 145: }
  3122                           ;lcd.c: 146: if(h < 10 && m < 10 && s < 10){
  3123  000BFA  0100               	movlb	0	; () banked
  3124  000BFC  BF7D               	btfsc	(exibirAlarme@h+1)& (0+255),7,b
  3125  000BFE  D008               	goto	l3941
  3126  000C00  0100               	movlb	0	; () banked
  3127  000C02  517D               	movf	(exibirAlarme@h+1)& (0+255),w,b
  3128  000C04  E133               	bnz	l3947
  3129  000C06  0E0A               	movlw	10
  3130  000C08  0100               	movlb	0	; () banked
  3131  000C0A  5D7C               	subwf	exibirAlarme@h& (0+255),w,b
  3132  000C0C  B0D8               	btfsc	status,0,c
  3133  000C0E  D02E               	goto	l3947
  3134  000C10                     l3941:
  3135                           
  3136                           ; BSR set to: 0
  3137  000C10  0100               	movlb	0	; () banked
  3138  000C12  BF7F               	btfsc	(exibirAlarme@m+1)& (0+255),7,b
  3139  000C14  D008               	goto	l3943
  3140  000C16  0100               	movlb	0	; () banked
  3141  000C18  517F               	movf	(exibirAlarme@m+1)& (0+255),w,b
  3142  000C1A  E128               	bnz	l3947
  3143  000C1C  0E0A               	movlw	10
  3144  000C1E  0100               	movlb	0	; () banked
  3145  000C20  5D7E               	subwf	exibirAlarme@m& (0+255),w,b
  3146  000C22  B0D8               	btfsc	status,0,c
  3147  000C24  D023               	goto	l3947
  3148  000C26                     l3943:
  3149                           
  3150                           ; BSR set to: 0
  3151  000C26  0100               	movlb	0	; () banked
  3152  000C28  BF81               	btfsc	(exibirAlarme@s+1)& (0+255),7,b
  3153  000C2A  D008               	goto	l3945
  3154  000C2C  0100               	movlb	0	; () banked
  3155  000C2E  5181               	movf	(exibirAlarme@s+1)& (0+255),w,b
  3156  000C30  E11D               	bnz	l3947
  3157  000C32  0E0A               	movlw	10
  3158  000C34  0100               	movlb	0	; () banked
  3159  000C36  5D80               	subwf	exibirAlarme@s& (0+255),w,b
  3160  000C38  B0D8               	btfsc	status,0,c
  3161  000C3A  D018               	goto	l3947
  3162  000C3C                     l3945:
  3163                           
  3164                           ; BSR set to: 0
  3165                           ;lcd.c: 147: sprintf(string, "0%i:0%i:0%i", h, m, s);
  3166  000C3C  C08F  F06B         	movff	exibirAlarme@string,sprintf@sp
  3167  000C40  C090  F06C         	movff	exibirAlarme@string+1,sprintf@sp+1
  3168  000C44  0E11               	movlw	low (STR_12+6)
  3169  000C46  0100               	movlb	0	; () banked
  3170  000C48  6F6D               	movwf	sprintf@f& (0+255),b
  3171  000C4A  0E08               	movlw	high (STR_12+6)
  3172  000C4C  0100               	movlb	0	; () banked
  3173  000C4E  6F6E               	movwf	(sprintf@f+1)& (0+255),b
  3174  000C50  C07C  F06F         	movff	exibirAlarme@h,?_sprintf+4
  3175  000C54  C07D  F070         	movff	exibirAlarme@h+1,?_sprintf+5
  3176  000C58  C07E  F071         	movff	exibirAlarme@m,?_sprintf+6
  3177  000C5C  C07F  F072         	movff	exibirAlarme@m+1,?_sprintf+7
  3178  000C60  C080  F073         	movff	exibirAlarme@s,?_sprintf+8
  3179  000C64  C081  F074         	movff	exibirAlarme@s+1,?_sprintf+9
  3180  000C68  ECC6  F00A         	call	_sprintf	;wreg free
  3181  000C6C                     l3947:
  3182                           
  3183                           ;lcd.c: 148: }
  3184                           ;lcd.c: 149: return string;
  3185  000C6C  C08F  F07C         	movff	exibirAlarme@string,?_exibirAlarme
  3186  000C70  C090  F07D         	movff	exibirAlarme@string+1,?_exibirAlarme+1
  3187  000C74  0012               	return	
  3188  000C76                     __end_of_exibirAlarme:
  3189                           	opt stack 0
  3190                           tblptru	equ	0xFF8
  3191                           tblptrh	equ	0xFF7
  3192                           tblptrl	equ	0xFF6
  3193                           tablat	equ	0xFF5
  3194                           intcon	equ	0xFF2
  3195                           postinc0	equ	0xFEE
  3196                           wreg	equ	0xFE8
  3197                           postdec1	equ	0xFE5
  3198                           fsr1l	equ	0xFE1
  3199                           status	equ	0xFD8
  3200                           
  3201 ;; *************** function _controlaCursor *****************
  3202 ;; Defined at:
  3203 ;;		line 30 in file "lcd.c"
  3204 ;; Parameters:    Size  Location     Type
  3205 ;;		None
  3206 ;; Auto vars:     Size  Location     Type
  3207 ;;		None
  3208 ;; Return value:  Size  Location     Type
  3209 ;;                  1    wreg      void 
  3210 ;; Registers used:
  3211 ;;		wreg, status,2, status,0, cstack
  3212 ;; Tracked objects:
  3213 ;;		On entry : 0/0
  3214 ;;		On exit  : 0/0
  3215 ;;		Unchanged: 0/0
  3216 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3217 ;;      Params:         0       0       0       0       0       0       0       0       0
  3218 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3219 ;;      Temps:          0       2       0       0       0       0       0       0       0
  3220 ;;      Totals:         0       2       0       0       0       0       0       0       0
  3221 ;;Total ram usage:        2 bytes
  3222 ;; Hardware stack levels used:    1
  3223 ;; Hardware stack levels required when called:    6
  3224 ;; This function calls:
  3225 ;;		_SetDDRamAddr
  3226 ;; This function is called by:
  3227 ;;		_inicializaTela2
  3228 ;; This function uses a non-reentrant model
  3229 ;;
  3230                           
  3231                           	psect	text16
  3232  0021A6                     __ptext16:
  3233                           	opt stack 0
  3234  0021A6                     _controlaCursor:
  3235                           	opt stack 22
  3236                           
  3237                           ;lcd.c: 31: switch(posCursor){
  3238                           
  3239                           ;incstack = 0
  3240  0021A6  D00C               	goto	l3755
  3241  0021A8                     l3747:
  3242                           
  3243                           ;lcd.c: 33: SetDDRamAddr(0x41);
  3244  0021A8  0E41               	movlw	65
  3245  0021AA  ECAE  F00F         	call	_SetDDRamAddr
  3246                           
  3247                           ;lcd.c: 34: break;
  3248  0021AE  0012               	return	
  3249  0021B0                     l3749:
  3250                           
  3251                           ;lcd.c: 36: SetDDRamAddr(0x44);
  3252  0021B0  0E44               	movlw	68
  3253  0021B2  ECAE  F00F         	call	_SetDDRamAddr
  3254                           
  3255                           ;lcd.c: 37: break;
  3256  0021B6  0012               	return	
  3257  0021B8                     l3751:
  3258                           
  3259                           ;lcd.c: 39: SetDDRamAddr(0x47);
  3260  0021B8  0E47               	movlw	71
  3261  0021BA  ECAE  F00F         	call	_SetDDRamAddr
  3262                           
  3263                           ;lcd.c: 44: }
  3264                           
  3265                           ;lcd.c: 42: return;
  3266                           
  3267                           ;lcd.c: 41: default:
  3268                           
  3269                           ;lcd.c: 40: break;
  3270  0021BE  0012               	return	
  3271  0021C0                     l3755:
  3272  0021C0  C028  F063         	movff	_posCursor,??_controlaCursor
  3273  0021C4  C029  F064         	movff	_posCursor+1,??_controlaCursor+1
  3274                           
  3275                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3276                           ; Switch size 1, requested type "space"
  3277                           ; Number of cases is 1, Range of values is 0 to 0
  3278                           ; switch strategies available:
  3279                           ; Name         Instructions Cycles
  3280                           ; simple_byte            4     3 (average)
  3281                           ;	Chosen strategy is simple_byte
  3282  0021C8  0100               	movlb	0	; () banked
  3283  0021CA  5164               	movf	(??_controlaCursor+1)& (0+255),w,b
  3284  0021CC  0A00               	xorlw	0	; case 0
  3285  0021CE  A4D8               	btfss	status,2,c
  3286  0021D0  0012               	return	
  3287                           
  3288                           ; BSR set to: 0
  3289                           ; Switch size 1, requested type "space"
  3290                           ; Number of cases is 3, Range of values is 0 to 2
  3291                           ; switch strategies available:
  3292                           ; Name         Instructions Cycles
  3293                           ; simple_byte           10     6 (average)
  3294                           ;	Chosen strategy is simple_byte
  3295  0021D2  0100               	movlb	0	; () banked
  3296  0021D4  5163               	movf	??_controlaCursor& (0+255),w,b
  3297  0021D6  0A00               	xorlw	0	; case 0
  3298  0021D8  B4D8               	btfsc	status,2,c
  3299  0021DA  D7E6               	goto	l3747
  3300  0021DC  0A01               	xorlw	1	; case 1
  3301  0021DE  B4D8               	btfsc	status,2,c
  3302  0021E0  D7E7               	goto	l3749
  3303  0021E2  0A03               	xorlw	3	; case 2
  3304  0021E4  A4D8               	btfss	status,2,c
  3305  0021E6  0012               	return	
  3306  0021E8  D7E7               	goto	l3751
  3307  0021EA                     __end_of_controlaCursor:
  3308                           	opt stack 0
  3309                           tblptru	equ	0xFF8
  3310                           tblptrh	equ	0xFF7
  3311                           tblptrl	equ	0xFF6
  3312                           tablat	equ	0xFF5
  3313                           intcon	equ	0xFF2
  3314                           postinc0	equ	0xFEE
  3315                           wreg	equ	0xFE8
  3316                           postdec1	equ	0xFE5
  3317                           fsr1l	equ	0xFE1
  3318                           status	equ	0xFD8
  3319                           
  3320 ;; *************** function _inicializaTela1 *****************
  3321 ;; Defined at:
  3322 ;;		line 152 in file "lcd.c"
  3323 ;; Parameters:    Size  Location     Type
  3324 ;;		None
  3325 ;; Auto vars:     Size  Location     Type
  3326 ;;		None
  3327 ;; Return value:  Size  Location     Type
  3328 ;;                  1    wreg      void 
  3329 ;; Registers used:
  3330 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3331 ;; Tracked objects:
  3332 ;;		On entry : 0/0
  3333 ;;		On exit  : 0/0
  3334 ;;		Unchanged: 0/0
  3335 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3336 ;;      Params:         0       0       0       0       0       0       0       0       0
  3337 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3338 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3339 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3340 ;;Total ram usage:        0 bytes
  3341 ;; Hardware stack levels used:    1
  3342 ;; Hardware stack levels required when called:    7
  3343 ;; This function calls:
  3344 ;;		_SetDDRamAddr
  3345 ;;		_WriteCmdXLCD
  3346 ;;		_controlaCursorR
  3347 ;;		_exibirData
  3348 ;;		_exibirHora
  3349 ;;		_putrsXLCD
  3350 ;; This function is called by:
  3351 ;;		_main
  3352 ;;		_atualiza_tela
  3353 ;; This function uses a non-reentrant model
  3354 ;;
  3355                           
  3356                           	psect	text17
  3357  001CE8                     __ptext17:
  3358                           	opt stack 0
  3359  001CE8                     _inicializaTela1:
  3360                           	opt stack 23
  3361                           
  3362                           ;lcd.c: 153: if(T1 == 0){
  3363                           
  3364                           ;incstack = 0
  3365  001CE8  0100               	movlb	0	; () banked
  3366  001CEA  5199               	movf	_T1& (0+255),w,b
  3367  001CEC  0100               	movlb	0	; () banked
  3368  001CEE  119A               	iorwf	(_T1+1)& (0+255),w,b
  3369  001CF0  A4D8               	btfss	status,2,c
  3370  001CF2  D00E               	goto	l3983
  3371                           
  3372                           ; BSR set to: 0
  3373                           ;lcd.c: 154: WriteCmdXLCD(0x0C);
  3374  001CF4  0E0C               	movlw	12
  3375  001CF6  EC33  F011         	call	_WriteCmdXLCD
  3376                           
  3377                           ;lcd.c: 155: T1 = 1;
  3378  001CFA  0E00               	movlw	0
  3379  001CFC  0100               	movlb	0	; () banked
  3380  001CFE  6F9A               	movwf	(_T1+1)& (0+255),b
  3381  001D00  0E01               	movlw	1
  3382  001D02  6F99               	movwf	_T1& (0+255),b
  3383                           
  3384                           ; BSR set to: 0
  3385                           ;lcd.c: 156: T2 = 0;
  3386  001D04  0E00               	movlw	0
  3387  001D06  0100               	movlb	0	; () banked
  3388  001D08  6F98               	movwf	(_T2+1)& (0+255),b
  3389  001D0A  0E00               	movlw	0
  3390  001D0C  6F97               	movwf	_T2& (0+255),b
  3391                           
  3392                           ;lcd.c: 157: }else{
  3393  001D0E  0012               	return	
  3394  001D10                     l3983:
  3395                           
  3396                           ; BSR set to: 0
  3397                           ;lcd.c: 158: SetDDRamAddr(0x0);
  3398  001D10  0E00               	movlw	0
  3399  001D12  ECAE  F00F         	call	_SetDDRamAddr
  3400                           
  3401                           ;lcd.c: 159: putrsXLCD(exibirHora(re.hora, re.minuto, re.segundo));
  3402  001D16  C038  F07C         	movff	_re+4,exibirHora@h
  3403  001D1A  C039  F07D         	movff	_re+5,exibirHora@h+1
  3404  001D1E  C034  F07E         	movff	_re,exibirHora@m
  3405  001D22  C035  F07F         	movff	_re+1,exibirHora@m+1
  3406  001D26  C036  F080         	movff	_re+2,exibirHora@s
  3407  001D2A  C037  F081         	movff	_re+3,exibirHora@s+1
  3408  001D2E  EC3B  F006         	call	_exibirHora	;wreg free
  3409  001D32  C07C  F082         	movff	?_exibirHora,putrsXLCD@buffer
  3410  001D36  C07D  F083         	movff	?_exibirHora+1,putrsXLCD@buffer+1
  3411  001D3A  ECF3  F011         	call	_putrsXLCD	;wreg free
  3412                           
  3413                           ;lcd.c: 160: SetDDRamAddr(0x40);
  3414  001D3E  0E40               	movlw	64
  3415  001D40  ECAE  F00F         	call	_SetDDRamAddr
  3416                           
  3417                           ;lcd.c: 161: putrsXLCD(exibirData(ca.dia, ca.mes, ca.ano));
  3418  001D44  C03A  F07C         	movff	_ca,exibirData@dia
  3419  001D48  C03B  F07D         	movff	_ca+1,exibirData@dia+1
  3420  001D4C  C03C  F07E         	movff	_ca+2,exibirData@mes
  3421  001D50  C03D  F07F         	movff	_ca+3,exibirData@mes+1
  3422  001D54  C03E  F080         	movff	_ca+4,exibirData@ano
  3423  001D58  C03F  F081         	movff	_ca+5,exibirData@ano+1
  3424  001D5C  EC85  F00B         	call	_exibirData	;wreg free
  3425  001D60  C07C  F082         	movff	?_exibirData,putrsXLCD@buffer
  3426  001D64  C07D  F083         	movff	?_exibirData+1,putrsXLCD@buffer+1
  3427  001D68  ECF3  F011         	call	_putrsXLCD	;wreg free
  3428                           
  3429                           ;lcd.c: 162: controlaCursorR();
  3430  001D6C  ECB9  F00E         	call	_controlaCursorR	;wreg free
  3431  001D70  0012               	return	
  3432  001D72                     __end_of_inicializaTela1:
  3433                           	opt stack 0
  3434                           tblptru	equ	0xFF8
  3435                           tblptrh	equ	0xFF7
  3436                           tblptrl	equ	0xFF6
  3437                           tablat	equ	0xFF5
  3438                           intcon	equ	0xFF2
  3439                           postinc0	equ	0xFEE
  3440                           wreg	equ	0xFE8
  3441                           postdec1	equ	0xFE5
  3442                           fsr1l	equ	0xFE1
  3443                           status	equ	0xFD8
  3444                           
  3445 ;; *************** function _putrsXLCD *****************
  3446 ;; Defined at:
  3447 ;;		line 16 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\pic18\plib\XLCD\putrxlcd.c"
  3448 ;; Parameters:    Size  Location     Type
  3449 ;;  buffer          2   34[BANK0 ] PTR const unsigned char 
  3450 ;;		 -> NULL(0), 
  3451 ;; Auto vars:     Size  Location     Type
  3452 ;;		None
  3453 ;; Return value:  Size  Location     Type
  3454 ;;                  1    wreg      void 
  3455 ;; Registers used:
  3456 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3457 ;; Tracked objects:
  3458 ;;		On entry : 0/0
  3459 ;;		On exit  : 0/0
  3460 ;;		Unchanged: 0/0
  3461 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3462 ;;      Params:         0       2       0       0       0       0       0       0       0
  3463 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3464 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3465 ;;      Totals:         0       2       0       0       0       0       0       0       0
  3466 ;;Total ram usage:        2 bytes
  3467 ;; Hardware stack levels used:    1
  3468 ;; Hardware stack levels required when called:    6
  3469 ;; This function calls:
  3470 ;;		_BusyXLCD
  3471 ;;		_WriteDataXLCD
  3472 ;; This function is called by:
  3473 ;;		_inicializaTela1
  3474 ;;		_inicializaTela2
  3475 ;; This function uses a non-reentrant model
  3476 ;;
  3477                           
  3478                           	psect	text18
  3479  0023E6                     __ptext18:
  3480                           	opt stack 0
  3481  0023E6                     _putrsXLCD:
  3482                           	opt stack 23
  3483                           
  3484                           ;incstack = 0
  3485  0023E6  D00F               	goto	l3959
  3486  0023E8                     l3953:
  3487  0023E8  EC6F  F011         	call	_BusyXLCD	;wreg free
  3488  0023EC  0900               	iorlw	0
  3489  0023EE  A4D8               	btfss	status,2,c
  3490  0023F0  D7FB               	goto	l3953
  3491  0023F2  C082  FFD9         	movff	putrsXLCD@buffer,fsr2l
  3492  0023F6  C083  FFDA         	movff	putrsXLCD@buffer+1,fsr2h
  3493  0023FA  50DF               	movf	indf2,w,c
  3494  0023FC  EC14  F011         	call	_WriteDataXLCD
  3495  002400  0100               	movlb	0	; () banked
  3496  002402  4B82               	infsnz	putrsXLCD@buffer& (0+255),f,b
  3497  002404  2B83               	incf	(putrsXLCD@buffer+1)& (0+255),f,b
  3498  002406                     l3959:
  3499  002406  C082  FFD9         	movff	putrsXLCD@buffer,fsr2l
  3500  00240A  C083  FFDA         	movff	putrsXLCD@buffer+1,fsr2h
  3501  00240E  50DF               	movf	indf2,w,c
  3502  002410  B4D8               	btfsc	status,2,c
  3503  002412  0012               	return	
  3504  002414  D7E9               	goto	l3953
  3505  002416                     __end_of_putrsXLCD:
  3506                           	opt stack 0
  3507                           tblptru	equ	0xFF8
  3508                           tblptrh	equ	0xFF7
  3509                           tblptrl	equ	0xFF6
  3510                           tablat	equ	0xFF5
  3511                           intcon	equ	0xFF2
  3512                           postinc0	equ	0xFEE
  3513                           wreg	equ	0xFE8
  3514                           postdec1	equ	0xFE5
  3515                           fsr1l	equ	0xFE1
  3516                           indf2	equ	0xFDF
  3517                           fsr2h	equ	0xFDA
  3518                           fsr2l	equ	0xFD9
  3519                           status	equ	0xFD8
  3520                           
  3521 ;; *************** function _WriteDataXLCD *****************
  3522 ;; Defined at:
  3523 ;;		line 16 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\pic18\plib\XLCD\writdata.c"
  3524 ;; Parameters:    Size  Location     Type
  3525 ;;  data            1    wreg     unsigned char 
  3526 ;; Auto vars:     Size  Location     Type
  3527 ;;  data            1   32[COMRAM] unsigned char 
  3528 ;; Return value:  Size  Location     Type
  3529 ;;                  1    wreg      void 
  3530 ;; Registers used:
  3531 ;;		wreg, status,2, status,0, cstack
  3532 ;; Tracked objects:
  3533 ;;		On entry : 0/0
  3534 ;;		On exit  : 0/0
  3535 ;;		Unchanged: 0/0
  3536 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3537 ;;      Params:         0       0       0       0       0       0       0       0       0
  3538 ;;      Locals:         1       0       0       0       0       0       0       0       0
  3539 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3540 ;;      Totals:         1       0       0       0       0       0       0       0       0
  3541 ;;Total ram usage:        1 bytes
  3542 ;; Hardware stack levels used:    1
  3543 ;; Hardware stack levels required when called:    5
  3544 ;; This function calls:
  3545 ;;		_DelayFor18TCY
  3546 ;; This function is called by:
  3547 ;;		_putrsXLCD
  3548 ;;		_putsXLCD
  3549 ;; This function uses a non-reentrant model
  3550 ;;
  3551                           
  3552                           	psect	text19
  3553  002228                     __ptext19:
  3554                           	opt stack 0
  3555  002228                     _WriteDataXLCD:
  3556                           	opt stack 23
  3557                           
  3558                           ;incstack = 0
  3559                           ;WriteDataXLCD@data stored from wreg
  3560  002228  6E21               	movwf	WriteDataXLCD@data,c
  3561  00222A  0EF0               	movlw	240
  3562  00222C  1693               	andwf	3987,f,c	;volatile
  3563  00222E  0EF0               	movlw	240
  3564  002230  1681               	andwf	3969,f,c	;volatile
  3565  002232  3821               	swapf	WriteDataXLCD@data,w,c
  3566  002234  0B0F               	andlw	15
  3567  002236  0B0F               	andlw	15
  3568  002238  1281               	iorwf	3969,f,c	;volatile
  3569  00223A  8A8A               	bsf	3978,5,c	;volatile
  3570  00223C  9C8A               	bcf	3978,6,c	;volatile
  3571  00223E  EC79  F012         	call	_DelayFor18TCY	;wreg free
  3572  002242  888A               	bsf	3978,4,c	;volatile
  3573  002244  EC79  F012         	call	_DelayFor18TCY	;wreg free
  3574  002248  988A               	bcf	3978,4,c	;volatile
  3575  00224A  0EF0               	movlw	240
  3576  00224C  1681               	andwf	3969,f,c	;volatile
  3577  00224E  5021               	movf	WriteDataXLCD@data,w,c
  3578  002250  0B0F               	andlw	15
  3579  002252  1281               	iorwf	3969,f,c	;volatile
  3580  002254  EC79  F012         	call	_DelayFor18TCY	;wreg free
  3581  002258  888A               	bsf	3978,4,c	;volatile
  3582  00225A  EC79  F012         	call	_DelayFor18TCY	;wreg free
  3583  00225E  988A               	bcf	3978,4,c	;volatile
  3584  002260  0E0F               	movlw	15
  3585  002262  1293               	iorwf	3987,f,c	;volatile
  3586  002264  0012               	return	
  3587  002266                     __end_of_WriteDataXLCD:
  3588                           	opt stack 0
  3589                           tblptru	equ	0xFF8
  3590                           tblptrh	equ	0xFF7
  3591                           tblptrl	equ	0xFF6
  3592                           tablat	equ	0xFF5
  3593                           intcon	equ	0xFF2
  3594                           postinc0	equ	0xFEE
  3595                           wreg	equ	0xFE8
  3596                           postdec1	equ	0xFE5
  3597                           fsr1l	equ	0xFE1
  3598                           indf2	equ	0xFDF
  3599                           fsr2h	equ	0xFDA
  3600                           fsr2l	equ	0xFD9
  3601                           status	equ	0xFD8
  3602                           
  3603 ;; *************** function _exibirHora *****************
  3604 ;; Defined at:
  3605 ;;		line 94 in file "lcd.c"
  3606 ;; Parameters:    Size  Location     Type
  3607 ;;  h               2   28[BANK0 ] int 
  3608 ;;  m               2   30[BANK0 ] int 
  3609 ;;  s               2   32[BANK0 ] int 
  3610 ;; Auto vars:     Size  Location     Type
  3611 ;;		None
  3612 ;; Return value:  Size  Location     Type
  3613 ;;                  2   28[BANK0 ] PTR unsigned char 
  3614 ;; Registers used:
  3615 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3616 ;; Tracked objects:
  3617 ;;		On entry : 0/0
  3618 ;;		On exit  : 0/0
  3619 ;;		Unchanged: 0/0
  3620 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3621 ;;      Params:         0       6       0       0       0       0       0       0       0
  3622 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3623 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3624 ;;      Totals:         0       6       0       0       0       0       0       0       0
  3625 ;;Total ram usage:        6 bytes
  3626 ;; Hardware stack levels used:    1
  3627 ;; Hardware stack levels required when called:    5
  3628 ;; This function calls:
  3629 ;;		_sprintf
  3630 ;; This function is called by:
  3631 ;;		_inicializaTela1
  3632 ;; This function uses a non-reentrant model
  3633 ;;
  3634                           
  3635                           	psect	text20
  3636  000C76                     __ptext20:
  3637                           	opt stack 0
  3638  000C76                     _exibirHora:
  3639                           	opt stack 24
  3640                           
  3641                           ;lcd.c: 95: static char *string;
  3642                           ;lcd.c: 97: if(h >= 10 && m >= 10 && s >= 10){
  3643                           
  3644                           ;incstack = 0
  3645  000C76  0100               	movlb	0	; () banked
  3646  000C78  BF7D               	btfsc	(exibirHora@h+1)& (0+255),7,b
  3647  000C7A  D036               	goto	l3823
  3648  000C7C  0100               	movlb	0	; () banked
  3649  000C7E  517D               	movf	(exibirHora@h+1)& (0+255),w,b
  3650  000C80  E105               	bnz	u3660
  3651  000C82  0E0A               	movlw	10
  3652  000C84  0100               	movlb	0	; () banked
  3653  000C86  5D7C               	subwf	exibirHora@h& (0+255),w,b
  3654  000C88  A0D8               	btfss	status,0,c
  3655  000C8A  D02E               	goto	l3823
  3656  000C8C                     u3660:
  3657                           
  3658                           ; BSR set to: 0
  3659  000C8C  0100               	movlb	0	; () banked
  3660  000C8E  BF7F               	btfsc	(exibirHora@m+1)& (0+255),7,b
  3661  000C90  D02B               	goto	l3823
  3662  000C92  0100               	movlb	0	; () banked
  3663  000C94  517F               	movf	(exibirHora@m+1)& (0+255),w,b
  3664  000C96  E105               	bnz	u3670
  3665  000C98  0E0A               	movlw	10
  3666  000C9A  0100               	movlb	0	; () banked
  3667  000C9C  5D7E               	subwf	exibirHora@m& (0+255),w,b
  3668  000C9E  A0D8               	btfss	status,0,c
  3669  000CA0  D023               	goto	l3823
  3670  000CA2                     u3670:
  3671                           
  3672                           ; BSR set to: 0
  3673  000CA2  0100               	movlb	0	; () banked
  3674  000CA4  BF81               	btfsc	(exibirHora@s+1)& (0+255),7,b
  3675  000CA6  D020               	goto	l3823
  3676  000CA8  0100               	movlb	0	; () banked
  3677  000CAA  5181               	movf	(exibirHora@s+1)& (0+255),w,b
  3678  000CAC  E105               	bnz	u3680
  3679  000CAE  0E0A               	movlw	10
  3680  000CB0  0100               	movlb	0	; () banked
  3681  000CB2  5D80               	subwf	exibirHora@s& (0+255),w,b
  3682  000CB4  A0D8               	btfss	status,0,c
  3683  000CB6  D018               	goto	l3823
  3684  000CB8                     u3680:
  3685                           
  3686                           ; BSR set to: 0
  3687                           ;lcd.c: 98: sprintf(string, "HORA: %i:%i:%i", h, m, s);
  3688  000CB8  C091  F06B         	movff	exibirHora@string,sprintf@sp
  3689  000CBC  C092  F06C         	movff	exibirHora@string+1,sprintf@sp+1
  3690  000CC0  0EC0               	movlw	low STR_5
  3691  000CC2  0100               	movlb	0	; () banked
  3692  000CC4  6F6D               	movwf	sprintf@f& (0+255),b
  3693  000CC6  0E08               	movlw	high STR_5
  3694  000CC8  0100               	movlb	0	; () banked
  3695  000CCA  6F6E               	movwf	(sprintf@f+1)& (0+255),b
  3696  000CCC  C07C  F06F         	movff	exibirHora@h,?_sprintf+4
  3697  000CD0  C07D  F070         	movff	exibirHora@h+1,?_sprintf+5
  3698  000CD4  C07E  F071         	movff	exibirHora@m,?_sprintf+6
  3699  000CD8  C07F  F072         	movff	exibirHora@m+1,?_sprintf+7
  3700  000CDC  C080  F073         	movff	exibirHora@s,?_sprintf+8
  3701  000CE0  C081  F074         	movff	exibirHora@s+1,?_sprintf+9
  3702  000CE4  ECC6  F00A         	call	_sprintf	;wreg free
  3703  000CE8                     l3823:
  3704                           
  3705                           ;lcd.c: 99: }
  3706                           ;lcd.c: 100: if(h >= 10 && m >= 10 && s < 10){
  3707  000CE8  0100               	movlb	0	; () banked
  3708  000CEA  BF7D               	btfsc	(exibirHora@h+1)& (0+255),7,b
  3709  000CEC  D036               	goto	l3831
  3710  000CEE  0100               	movlb	0	; () banked
  3711  000CF0  517D               	movf	(exibirHora@h+1)& (0+255),w,b
  3712  000CF2  E105               	bnz	u3690
  3713  000CF4  0E0A               	movlw	10
  3714  000CF6  0100               	movlb	0	; () banked
  3715  000CF8  5D7C               	subwf	exibirHora@h& (0+255),w,b
  3716  000CFA  A0D8               	btfss	status,0,c
  3717  000CFC  D02E               	goto	l3831
  3718  000CFE                     u3690:
  3719                           
  3720                           ; BSR set to: 0
  3721  000CFE  0100               	movlb	0	; () banked
  3722  000D00  BF7F               	btfsc	(exibirHora@m+1)& (0+255),7,b
  3723  000D02  D02B               	goto	l3831
  3724  000D04  0100               	movlb	0	; () banked
  3725  000D06  517F               	movf	(exibirHora@m+1)& (0+255),w,b
  3726  000D08  E105               	bnz	u3700
  3727  000D0A  0E0A               	movlw	10
  3728  000D0C  0100               	movlb	0	; () banked
  3729  000D0E  5D7E               	subwf	exibirHora@m& (0+255),w,b
  3730  000D10  A0D8               	btfss	status,0,c
  3731  000D12  D023               	goto	l3831
  3732  000D14                     u3700:
  3733                           
  3734                           ; BSR set to: 0
  3735  000D14  0100               	movlb	0	; () banked
  3736  000D16  BF81               	btfsc	(exibirHora@s+1)& (0+255),7,b
  3737  000D18  D008               	goto	l3829
  3738  000D1A  0100               	movlb	0	; () banked
  3739  000D1C  5181               	movf	(exibirHora@s+1)& (0+255),w,b
  3740  000D1E  E11D               	bnz	l3831
  3741  000D20  0E0A               	movlw	10
  3742  000D22  0100               	movlb	0	; () banked
  3743  000D24  5D80               	subwf	exibirHora@s& (0+255),w,b
  3744  000D26  B0D8               	btfsc	status,0,c
  3745  000D28  D018               	goto	l3831
  3746  000D2A                     l3829:
  3747                           
  3748                           ; BSR set to: 0
  3749                           ;lcd.c: 101: sprintf(string, "HORA: %i:%i:0%i", h, m, s);
  3750  000D2A  C091  F06B         	movff	exibirHora@string,sprintf@sp
  3751  000D2E  C092  F06C         	movff	exibirHora@string+1,sprintf@sp+1
  3752  000D32  0E81               	movlw	low STR_6
  3753  000D34  0100               	movlb	0	; () banked
  3754  000D36  6F6D               	movwf	sprintf@f& (0+255),b
  3755  000D38  0E08               	movlw	high STR_6
  3756  000D3A  0100               	movlb	0	; () banked
  3757  000D3C  6F6E               	movwf	(sprintf@f+1)& (0+255),b
  3758  000D3E  C07C  F06F         	movff	exibirHora@h,?_sprintf+4
  3759  000D42  C07D  F070         	movff	exibirHora@h+1,?_sprintf+5
  3760  000D46  C07E  F071         	movff	exibirHora@m,?_sprintf+6
  3761  000D4A  C07F  F072         	movff	exibirHora@m+1,?_sprintf+7
  3762  000D4E  C080  F073         	movff	exibirHora@s,?_sprintf+8
  3763  000D52  C081  F074         	movff	exibirHora@s+1,?_sprintf+9
  3764  000D56  ECC6  F00A         	call	_sprintf	;wreg free
  3765  000D5A                     l3831:
  3766                           
  3767                           ;lcd.c: 102: }
  3768                           ;lcd.c: 103: if(h >= 10 && m < 10 && s >= 10){
  3769  000D5A  0100               	movlb	0	; () banked
  3770  000D5C  BF7D               	btfsc	(exibirHora@h+1)& (0+255),7,b
  3771  000D5E  D036               	goto	l3839
  3772  000D60  0100               	movlb	0	; () banked
  3773  000D62  517D               	movf	(exibirHora@h+1)& (0+255),w,b
  3774  000D64  E105               	bnz	u3720
  3775  000D66  0E0A               	movlw	10
  3776  000D68  0100               	movlb	0	; () banked
  3777  000D6A  5D7C               	subwf	exibirHora@h& (0+255),w,b
  3778  000D6C  A0D8               	btfss	status,0,c
  3779  000D6E  D02E               	goto	l3839
  3780  000D70                     u3720:
  3781                           
  3782                           ; BSR set to: 0
  3783  000D70  0100               	movlb	0	; () banked
  3784  000D72  BF7F               	btfsc	(exibirHora@m+1)& (0+255),7,b
  3785  000D74  D008               	goto	l3835
  3786  000D76  0100               	movlb	0	; () banked
  3787  000D78  517F               	movf	(exibirHora@m+1)& (0+255),w,b
  3788  000D7A  E128               	bnz	l3839
  3789  000D7C  0E0A               	movlw	10
  3790  000D7E  0100               	movlb	0	; () banked
  3791  000D80  5D7E               	subwf	exibirHora@m& (0+255),w,b
  3792  000D82  B0D8               	btfsc	status,0,c
  3793  000D84  D023               	goto	l3839
  3794  000D86                     l3835:
  3795                           
  3796                           ; BSR set to: 0
  3797  000D86  0100               	movlb	0	; () banked
  3798  000D88  BF81               	btfsc	(exibirHora@s+1)& (0+255),7,b
  3799  000D8A  D020               	goto	l3839
  3800  000D8C  0100               	movlb	0	; () banked
  3801  000D8E  5181               	movf	(exibirHora@s+1)& (0+255),w,b
  3802  000D90  E105               	bnz	u3740
  3803  000D92  0E0A               	movlw	10
  3804  000D94  0100               	movlb	0	; () banked
  3805  000D96  5D80               	subwf	exibirHora@s& (0+255),w,b
  3806  000D98  A0D8               	btfss	status,0,c
  3807  000D9A  D018               	goto	l3839
  3808  000D9C                     u3740:
  3809                           
  3810                           ; BSR set to: 0
  3811                           ;lcd.c: 104: sprintf(string, "HORA: %i:0%i:%i", h, m, s);
  3812  000D9C  C091  F06B         	movff	exibirHora@string,sprintf@sp
  3813  000DA0  C092  F06C         	movff	exibirHora@string+1,sprintf@sp+1
  3814  000DA4  0E91               	movlw	low STR_7
  3815  000DA6  0100               	movlb	0	; () banked
  3816  000DA8  6F6D               	movwf	sprintf@f& (0+255),b
  3817  000DAA  0E08               	movlw	high STR_7
  3818  000DAC  0100               	movlb	0	; () banked
  3819  000DAE  6F6E               	movwf	(sprintf@f+1)& (0+255),b
  3820  000DB0  C07C  F06F         	movff	exibirHora@h,?_sprintf+4
  3821  000DB4  C07D  F070         	movff	exibirHora@h+1,?_sprintf+5
  3822  000DB8  C07E  F071         	movff	exibirHora@m,?_sprintf+6
  3823  000DBC  C07F  F072         	movff	exibirHora@m+1,?_sprintf+7
  3824  000DC0  C080  F073         	movff	exibirHora@s,?_sprintf+8
  3825  000DC4  C081  F074         	movff	exibirHora@s+1,?_sprintf+9
  3826  000DC8  ECC6  F00A         	call	_sprintf	;wreg free
  3827  000DCC                     l3839:
  3828                           
  3829                           ;lcd.c: 105: }if(h >= 10 && m < 10 && s < 10){
  3830  000DCC  0100               	movlb	0	; () banked
  3831  000DCE  BF7D               	btfsc	(exibirHora@h+1)& (0+255),7,b
  3832  000DD0  D036               	goto	l3847
  3833  000DD2  0100               	movlb	0	; () banked
  3834  000DD4  517D               	movf	(exibirHora@h+1)& (0+255),w,b
  3835  000DD6  E105               	bnz	u3750
  3836  000DD8  0E0A               	movlw	10
  3837  000DDA  0100               	movlb	0	; () banked
  3838  000DDC  5D7C               	subwf	exibirHora@h& (0+255),w,b
  3839  000DDE  A0D8               	btfss	status,0,c
  3840  000DE0  D02E               	goto	l3847
  3841  000DE2                     u3750:
  3842                           
  3843                           ; BSR set to: 0
  3844  000DE2  0100               	movlb	0	; () banked
  3845  000DE4  BF7F               	btfsc	(exibirHora@m+1)& (0+255),7,b
  3846  000DE6  D008               	goto	l3843
  3847  000DE8  0100               	movlb	0	; () banked
  3848  000DEA  517F               	movf	(exibirHora@m+1)& (0+255),w,b
  3849  000DEC  E128               	bnz	l3847
  3850  000DEE  0E0A               	movlw	10
  3851  000DF0  0100               	movlb	0	; () banked
  3852  000DF2  5D7E               	subwf	exibirHora@m& (0+255),w,b
  3853  000DF4  B0D8               	btfsc	status,0,c
  3854  000DF6  D023               	goto	l3847
  3855  000DF8                     l3843:
  3856                           
  3857                           ; BSR set to: 0
  3858  000DF8  0100               	movlb	0	; () banked
  3859  000DFA  BF81               	btfsc	(exibirHora@s+1)& (0+255),7,b
  3860  000DFC  D008               	goto	l3845
  3861  000DFE  0100               	movlb	0	; () banked
  3862  000E00  5181               	movf	(exibirHora@s+1)& (0+255),w,b
  3863  000E02  E11D               	bnz	l3847
  3864  000E04  0E0A               	movlw	10
  3865  000E06  0100               	movlb	0	; () banked
  3866  000E08  5D80               	subwf	exibirHora@s& (0+255),w,b
  3867  000E0A  B0D8               	btfsc	status,0,c
  3868  000E0C  D018               	goto	l3847
  3869  000E0E                     l3845:
  3870                           
  3871                           ; BSR set to: 0
  3872                           ;lcd.c: 106: sprintf(string, "HORA: %i:0%i:0%i", h, m, s);
  3873  000E0E  C091  F06B         	movff	exibirHora@string,sprintf@sp
  3874  000E12  C092  F06C         	movff	exibirHora@string+1,sprintf@sp+1
  3875  000E16  0E2E               	movlw	low STR_8
  3876  000E18  0100               	movlb	0	; () banked
  3877  000E1A  6F6D               	movwf	sprintf@f& (0+255),b
  3878  000E1C  0E08               	movlw	high STR_8
  3879  000E1E  0100               	movlb	0	; () banked
  3880  000E20  6F6E               	movwf	(sprintf@f+1)& (0+255),b
  3881  000E22  C07C  F06F         	movff	exibirHora@h,?_sprintf+4
  3882  000E26  C07D  F070         	movff	exibirHora@h+1,?_sprintf+5
  3883  000E2A  C07E  F071         	movff	exibirHora@m,?_sprintf+6
  3884  000E2E  C07F  F072         	movff	exibirHora@m+1,?_sprintf+7
  3885  000E32  C080  F073         	movff	exibirHora@s,?_sprintf+8
  3886  000E36  C081  F074         	movff	exibirHora@s+1,?_sprintf+9
  3887  000E3A  ECC6  F00A         	call	_sprintf	;wreg free
  3888  000E3E                     l3847:
  3889                           
  3890                           ;lcd.c: 107: }
  3891                           ;lcd.c: 108: if(h < 10 && m >= 10 && s >= 10){
  3892  000E3E  0100               	movlb	0	; () banked
  3893  000E40  BF7D               	btfsc	(exibirHora@h+1)& (0+255),7,b
  3894  000E42  D008               	goto	l3849
  3895  000E44  0100               	movlb	0	; () banked
  3896  000E46  517D               	movf	(exibirHora@h+1)& (0+255),w,b
  3897  000E48  E133               	bnz	l3855
  3898  000E4A  0E0A               	movlw	10
  3899  000E4C  0100               	movlb	0	; () banked
  3900  000E4E  5D7C               	subwf	exibirHora@h& (0+255),w,b
  3901  000E50  B0D8               	btfsc	status,0,c
  3902  000E52  D02E               	goto	l3855
  3903  000E54                     l3849:
  3904                           
  3905                           ; BSR set to: 0
  3906  000E54  0100               	movlb	0	; () banked
  3907  000E56  BF7F               	btfsc	(exibirHora@m+1)& (0+255),7,b
  3908  000E58  D02B               	goto	l3855
  3909  000E5A  0100               	movlb	0	; () banked
  3910  000E5C  517F               	movf	(exibirHora@m+1)& (0+255),w,b
  3911  000E5E  E105               	bnz	u3790
  3912  000E60  0E0A               	movlw	10
  3913  000E62  0100               	movlb	0	; () banked
  3914  000E64  5D7E               	subwf	exibirHora@m& (0+255),w,b
  3915  000E66  A0D8               	btfss	status,0,c
  3916  000E68  D023               	goto	l3855
  3917  000E6A                     u3790:
  3918                           
  3919                           ; BSR set to: 0
  3920  000E6A  0100               	movlb	0	; () banked
  3921  000E6C  BF81               	btfsc	(exibirHora@s+1)& (0+255),7,b
  3922  000E6E  D020               	goto	l3855
  3923  000E70  0100               	movlb	0	; () banked
  3924  000E72  5181               	movf	(exibirHora@s+1)& (0+255),w,b
  3925  000E74  E105               	bnz	u3800
  3926  000E76  0E0A               	movlw	10
  3927  000E78  0100               	movlb	0	; () banked
  3928  000E7A  5D80               	subwf	exibirHora@s& (0+255),w,b
  3929  000E7C  A0D8               	btfss	status,0,c
  3930  000E7E  D018               	goto	l3855
  3931  000E80                     u3800:
  3932                           
  3933                           ; BSR set to: 0
  3934                           ;lcd.c: 109: sprintf(string, "HORA: 0%i:%i:%i", h, m, s);
  3935  000E80  C091  F06B         	movff	exibirHora@string,sprintf@sp
  3936  000E84  C092  F06C         	movff	exibirHora@string+1,sprintf@sp+1
  3937  000E88  0EA1               	movlw	low STR_9
  3938  000E8A  0100               	movlb	0	; () banked
  3939  000E8C  6F6D               	movwf	sprintf@f& (0+255),b
  3940  000E8E  0E08               	movlw	high STR_9
  3941  000E90  0100               	movlb	0	; () banked
  3942  000E92  6F6E               	movwf	(sprintf@f+1)& (0+255),b
  3943  000E94  C07C  F06F         	movff	exibirHora@h,?_sprintf+4
  3944  000E98  C07D  F070         	movff	exibirHora@h+1,?_sprintf+5
  3945  000E9C  C07E  F071         	movff	exibirHora@m,?_sprintf+6
  3946  000EA0  C07F  F072         	movff	exibirHora@m+1,?_sprintf+7
  3947  000EA4  C080  F073         	movff	exibirHora@s,?_sprintf+8
  3948  000EA8  C081  F074         	movff	exibirHora@s+1,?_sprintf+9
  3949  000EAC  ECC6  F00A         	call	_sprintf	;wreg free
  3950  000EB0                     l3855:
  3951                           
  3952                           ;lcd.c: 110: }
  3953                           ;lcd.c: 111: if(h < 10 && m >= 10 && s < 10){
  3954  000EB0  0100               	movlb	0	; () banked
  3955  000EB2  BF7D               	btfsc	(exibirHora@h+1)& (0+255),7,b
  3956  000EB4  D008               	goto	l3857
  3957  000EB6  0100               	movlb	0	; () banked
  3958  000EB8  517D               	movf	(exibirHora@h+1)& (0+255),w,b
  3959  000EBA  E133               	bnz	l3863
  3960  000EBC  0E0A               	movlw	10
  3961  000EBE  0100               	movlb	0	; () banked
  3962  000EC0  5D7C               	subwf	exibirHora@h& (0+255),w,b
  3963  000EC2  B0D8               	btfsc	status,0,c
  3964  000EC4  D02E               	goto	l3863
  3965  000EC6                     l3857:
  3966                           
  3967                           ; BSR set to: 0
  3968  000EC6  0100               	movlb	0	; () banked
  3969  000EC8  BF7F               	btfsc	(exibirHora@m+1)& (0+255),7,b
  3970  000ECA  D02B               	goto	l3863
  3971  000ECC  0100               	movlb	0	; () banked
  3972  000ECE  517F               	movf	(exibirHora@m+1)& (0+255),w,b
  3973  000ED0  E105               	bnz	u3820
  3974  000ED2  0E0A               	movlw	10
  3975  000ED4  0100               	movlb	0	; () banked
  3976  000ED6  5D7E               	subwf	exibirHora@m& (0+255),w,b
  3977  000ED8  A0D8               	btfss	status,0,c
  3978  000EDA  D023               	goto	l3863
  3979  000EDC                     u3820:
  3980                           
  3981                           ; BSR set to: 0
  3982  000EDC  0100               	movlb	0	; () banked
  3983  000EDE  BF81               	btfsc	(exibirHora@s+1)& (0+255),7,b
  3984  000EE0  D008               	goto	l3861
  3985  000EE2  0100               	movlb	0	; () banked
  3986  000EE4  5181               	movf	(exibirHora@s+1)& (0+255),w,b
  3987  000EE6  E11D               	bnz	l3863
  3988  000EE8  0E0A               	movlw	10
  3989  000EEA  0100               	movlb	0	; () banked
  3990  000EEC  5D80               	subwf	exibirHora@s& (0+255),w,b
  3991  000EEE  B0D8               	btfsc	status,0,c
  3992  000EF0  D018               	goto	l3863
  3993  000EF2                     l3861:
  3994                           
  3995                           ; BSR set to: 0
  3996                           ;lcd.c: 112: sprintf(string, "HORA: 0%i:%i:0%i", h, m, s);
  3997  000EF2  C091  F06B         	movff	exibirHora@string,sprintf@sp
  3998  000EF6  C092  F06C         	movff	exibirHora@string+1,sprintf@sp+1
  3999  000EFA  0E3F               	movlw	low STR_10
  4000  000EFC  0100               	movlb	0	; () banked
  4001  000EFE  6F6D               	movwf	sprintf@f& (0+255),b
  4002  000F00  0E08               	movlw	high STR_10
  4003  000F02  0100               	movlb	0	; () banked
  4004  000F04  6F6E               	movwf	(sprintf@f+1)& (0+255),b
  4005  000F06  C07C  F06F         	movff	exibirHora@h,?_sprintf+4
  4006  000F0A  C07D  F070         	movff	exibirHora@h+1,?_sprintf+5
  4007  000F0E  C07E  F071         	movff	exibirHora@m,?_sprintf+6
  4008  000F12  C07F  F072         	movff	exibirHora@m+1,?_sprintf+7
  4009  000F16  C080  F073         	movff	exibirHora@s,?_sprintf+8
  4010  000F1A  C081  F074         	movff	exibirHora@s+1,?_sprintf+9
  4011  000F1E  ECC6  F00A         	call	_sprintf	;wreg free
  4012  000F22                     l3863:
  4013                           
  4014                           ;lcd.c: 113: }
  4015                           ;lcd.c: 114: if(h < 10 && m < 10 && s >= 10){
  4016  000F22  0100               	movlb	0	; () banked
  4017  000F24  BF7D               	btfsc	(exibirHora@h+1)& (0+255),7,b
  4018  000F26  D008               	goto	l3865
  4019  000F28  0100               	movlb	0	; () banked
  4020  000F2A  517D               	movf	(exibirHora@h+1)& (0+255),w,b
  4021  000F2C  E133               	bnz	l3871
  4022  000F2E  0E0A               	movlw	10
  4023  000F30  0100               	movlb	0	; () banked
  4024  000F32  5D7C               	subwf	exibirHora@h& (0+255),w,b
  4025  000F34  B0D8               	btfsc	status,0,c
  4026  000F36  D02E               	goto	l3871
  4027  000F38                     l3865:
  4028                           
  4029                           ; BSR set to: 0
  4030  000F38  0100               	movlb	0	; () banked
  4031  000F3A  BF7F               	btfsc	(exibirHora@m+1)& (0+255),7,b
  4032  000F3C  D008               	goto	l3867
  4033  000F3E  0100               	movlb	0	; () banked
  4034  000F40  517F               	movf	(exibirHora@m+1)& (0+255),w,b
  4035  000F42  E128               	bnz	l3871
  4036  000F44  0E0A               	movlw	10
  4037  000F46  0100               	movlb	0	; () banked
  4038  000F48  5D7E               	subwf	exibirHora@m& (0+255),w,b
  4039  000F4A  B0D8               	btfsc	status,0,c
  4040  000F4C  D023               	goto	l3871
  4041  000F4E                     l3867:
  4042                           
  4043                           ; BSR set to: 0
  4044  000F4E  0100               	movlb	0	; () banked
  4045  000F50  BF81               	btfsc	(exibirHora@s+1)& (0+255),7,b
  4046  000F52  D020               	goto	l3871
  4047  000F54  0100               	movlb	0	; () banked
  4048  000F56  5181               	movf	(exibirHora@s+1)& (0+255),w,b
  4049  000F58  E105               	bnz	u3860
  4050  000F5A  0E0A               	movlw	10
  4051  000F5C  0100               	movlb	0	; () banked
  4052  000F5E  5D80               	subwf	exibirHora@s& (0+255),w,b
  4053  000F60  A0D8               	btfss	status,0,c
  4054  000F62  D018               	goto	l3871
  4055  000F64                     u3860:
  4056                           
  4057                           ; BSR set to: 0
  4058                           ;lcd.c: 115: sprintf(string, "HORA: 0%i:0%i:%i", h, m, s);
  4059  000F64  C091  F06B         	movff	exibirHora@string,sprintf@sp
  4060  000F68  C092  F06C         	movff	exibirHora@string+1,sprintf@sp+1
  4061  000F6C  0E50               	movlw	low STR_11
  4062  000F6E  0100               	movlb	0	; () banked
  4063  000F70  6F6D               	movwf	sprintf@f& (0+255),b
  4064  000F72  0E08               	movlw	high STR_11
  4065  000F74  0100               	movlb	0	; () banked
  4066  000F76  6F6E               	movwf	(sprintf@f+1)& (0+255),b
  4067  000F78  C07C  F06F         	movff	exibirHora@h,?_sprintf+4
  4068  000F7C  C07D  F070         	movff	exibirHora@h+1,?_sprintf+5
  4069  000F80  C07E  F071         	movff	exibirHora@m,?_sprintf+6
  4070  000F84  C07F  F072         	movff	exibirHora@m+1,?_sprintf+7
  4071  000F88  C080  F073         	movff	exibirHora@s,?_sprintf+8
  4072  000F8C  C081  F074         	movff	exibirHora@s+1,?_sprintf+9
  4073  000F90  ECC6  F00A         	call	_sprintf	;wreg free
  4074  000F94                     l3871:
  4075                           
  4076                           ;lcd.c: 116: }
  4077                           ;lcd.c: 117: if(h < 10 && m < 10 && s < 10){
  4078  000F94  0100               	movlb	0	; () banked
  4079  000F96  BF7D               	btfsc	(exibirHora@h+1)& (0+255),7,b
  4080  000F98  D008               	goto	l3873
  4081  000F9A  0100               	movlb	0	; () banked
  4082  000F9C  517D               	movf	(exibirHora@h+1)& (0+255),w,b
  4083  000F9E  E133               	bnz	l3879
  4084  000FA0  0E0A               	movlw	10
  4085  000FA2  0100               	movlb	0	; () banked
  4086  000FA4  5D7C               	subwf	exibirHora@h& (0+255),w,b
  4087  000FA6  B0D8               	btfsc	status,0,c
  4088  000FA8  D02E               	goto	l3879
  4089  000FAA                     l3873:
  4090                           
  4091                           ; BSR set to: 0
  4092  000FAA  0100               	movlb	0	; () banked
  4093  000FAC  BF7F               	btfsc	(exibirHora@m+1)& (0+255),7,b
  4094  000FAE  D008               	goto	l3875
  4095  000FB0  0100               	movlb	0	; () banked
  4096  000FB2  517F               	movf	(exibirHora@m+1)& (0+255),w,b
  4097  000FB4  E128               	bnz	l3879
  4098  000FB6  0E0A               	movlw	10
  4099  000FB8  0100               	movlb	0	; () banked
  4100  000FBA  5D7E               	subwf	exibirHora@m& (0+255),w,b
  4101  000FBC  B0D8               	btfsc	status,0,c
  4102  000FBE  D023               	goto	l3879
  4103  000FC0                     l3875:
  4104                           
  4105                           ; BSR set to: 0
  4106  000FC0  0100               	movlb	0	; () banked
  4107  000FC2  BF81               	btfsc	(exibirHora@s+1)& (0+255),7,b
  4108  000FC4  D008               	goto	l3877
  4109  000FC6  0100               	movlb	0	; () banked
  4110  000FC8  5181               	movf	(exibirHora@s+1)& (0+255),w,b
  4111  000FCA  E11D               	bnz	l3879
  4112  000FCC  0E0A               	movlw	10
  4113  000FCE  0100               	movlb	0	; () banked
  4114  000FD0  5D80               	subwf	exibirHora@s& (0+255),w,b
  4115  000FD2  B0D8               	btfsc	status,0,c
  4116  000FD4  D018               	goto	l3879
  4117  000FD6                     l3877:
  4118                           
  4119                           ; BSR set to: 0
  4120                           ;lcd.c: 118: sprintf(string, "HORA: 0%i:0%i:0%i", h, m, s);
  4121  000FD6  C091  F06B         	movff	exibirHora@string,sprintf@sp
  4122  000FDA  C092  F06C         	movff	exibirHora@string+1,sprintf@sp+1
  4123  000FDE  0E0B               	movlw	low STR_12
  4124  000FE0  0100               	movlb	0	; () banked
  4125  000FE2  6F6D               	movwf	sprintf@f& (0+255),b
  4126  000FE4  0E08               	movlw	high STR_12
  4127  000FE6  0100               	movlb	0	; () banked
  4128  000FE8  6F6E               	movwf	(sprintf@f+1)& (0+255),b
  4129  000FEA  C07C  F06F         	movff	exibirHora@h,?_sprintf+4
  4130  000FEE  C07D  F070         	movff	exibirHora@h+1,?_sprintf+5
  4131  000FF2  C07E  F071         	movff	exibirHora@m,?_sprintf+6
  4132  000FF6  C07F  F072         	movff	exibirHora@m+1,?_sprintf+7
  4133  000FFA  C080  F073         	movff	exibirHora@s,?_sprintf+8
  4134  000FFE  C081  F074         	movff	exibirHora@s+1,?_sprintf+9
  4135  001002  ECC6  F00A         	call	_sprintf	;wreg free
  4136  001006                     l3879:
  4137                           
  4138                           ;lcd.c: 119: }
  4139                           ;lcd.c: 120: return string;
  4140  001006  C091  F07C         	movff	exibirHora@string,?_exibirHora
  4141  00100A  C092  F07D         	movff	exibirHora@string+1,?_exibirHora+1
  4142  00100E  0012               	return	
  4143  001010                     __end_of_exibirHora:
  4144                           	opt stack 0
  4145                           tblptru	equ	0xFF8
  4146                           tblptrh	equ	0xFF7
  4147                           tblptrl	equ	0xFF6
  4148                           tablat	equ	0xFF5
  4149                           intcon	equ	0xFF2
  4150                           postinc0	equ	0xFEE
  4151                           wreg	equ	0xFE8
  4152                           postdec1	equ	0xFE5
  4153                           fsr1l	equ	0xFE1
  4154                           indf2	equ	0xFDF
  4155                           fsr2h	equ	0xFDA
  4156                           fsr2l	equ	0xFD9
  4157                           status	equ	0xFD8
  4158                           
  4159 ;; *************** function _exibirData *****************
  4160 ;; Defined at:
  4161 ;;		line 78 in file "lcd.c"
  4162 ;; Parameters:    Size  Location     Type
  4163 ;;  dia             2   28[BANK0 ] int 
  4164 ;;  mes             2   30[BANK0 ] int 
  4165 ;;  ano             2   32[BANK0 ] int 
  4166 ;; Auto vars:     Size  Location     Type
  4167 ;;		None
  4168 ;; Return value:  Size  Location     Type
  4169 ;;                  2   28[BANK0 ] PTR unsigned char 
  4170 ;; Registers used:
  4171 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4172 ;; Tracked objects:
  4173 ;;		On entry : 0/0
  4174 ;;		On exit  : 0/0
  4175 ;;		Unchanged: 0/0
  4176 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4177 ;;      Params:         0       6       0       0       0       0       0       0       0
  4178 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4179 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4180 ;;      Totals:         0       6       0       0       0       0       0       0       0
  4181 ;;Total ram usage:        6 bytes
  4182 ;; Hardware stack levels used:    1
  4183 ;; Hardware stack levels required when called:    5
  4184 ;; This function calls:
  4185 ;;		_sprintf
  4186 ;; This function is called by:
  4187 ;;		_inicializaTela1
  4188 ;; This function uses a non-reentrant model
  4189 ;;
  4190                           
  4191                           	psect	text21
  4192  00170A                     __ptext21:
  4193                           	opt stack 0
  4194  00170A                     _exibirData:
  4195                           	opt stack 24
  4196                           
  4197                           ;lcd.c: 79: static char *string;
  4198                           ;lcd.c: 80: if(dia >= 10 && mes >= 10){
  4199                           
  4200                           ;incstack = 0
  4201  00170A  0100               	movlb	0	; () banked
  4202  00170C  BF7D               	btfsc	(exibirData@dia+1)& (0+255),7,b
  4203  00170E  D02B               	goto	l3793
  4204  001710  0100               	movlb	0	; () banked
  4205  001712  517D               	movf	(exibirData@dia+1)& (0+255),w,b
  4206  001714  E105               	bnz	u3580
  4207  001716  0E0A               	movlw	10
  4208  001718  0100               	movlb	0	; () banked
  4209  00171A  5D7C               	subwf	exibirData@dia& (0+255),w,b
  4210  00171C  A0D8               	btfss	status,0,c
  4211  00171E  D023               	goto	l3793
  4212  001720                     u3580:
  4213                           
  4214                           ; BSR set to: 0
  4215  001720  0100               	movlb	0	; () banked
  4216  001722  BF7F               	btfsc	(exibirData@mes+1)& (0+255),7,b
  4217  001724  D020               	goto	l3793
  4218  001726  0100               	movlb	0	; () banked
  4219  001728  517F               	movf	(exibirData@mes+1)& (0+255),w,b
  4220  00172A  E105               	bnz	u3590
  4221  00172C  0E0A               	movlw	10
  4222  00172E  0100               	movlb	0	; () banked
  4223  001730  5D7E               	subwf	exibirData@mes& (0+255),w,b
  4224  001732  A0D8               	btfss	status,0,c
  4225  001734  D018               	goto	l3793
  4226  001736                     u3590:
  4227                           
  4228                           ; BSR set to: 0
  4229                           ;lcd.c: 81: sprintf(string, "DATA: %i/%i/%i", dia, mes, ano);
  4230  001736  C093  F06B         	movff	exibirData@string,sprintf@sp
  4231  00173A  C094  F06C         	movff	exibirData@string+1,sprintf@sp+1
  4232  00173E  0EB1               	movlw	low STR_1
  4233  001740  0100               	movlb	0	; () banked
  4234  001742  6F6D               	movwf	sprintf@f& (0+255),b
  4235  001744  0E08               	movlw	high STR_1
  4236  001746  0100               	movlb	0	; () banked
  4237  001748  6F6E               	movwf	(sprintf@f+1)& (0+255),b
  4238  00174A  C07C  F06F         	movff	exibirData@dia,?_sprintf+4
  4239  00174E  C07D  F070         	movff	exibirData@dia+1,?_sprintf+5
  4240  001752  C07E  F071         	movff	exibirData@mes,?_sprintf+6
  4241  001756  C07F  F072         	movff	exibirData@mes+1,?_sprintf+7
  4242  00175A  C080  F073         	movff	exibirData@ano,?_sprintf+8
  4243  00175E  C081  F074         	movff	exibirData@ano+1,?_sprintf+9
  4244  001762  ECC6  F00A         	call	_sprintf	;wreg free
  4245  001766                     l3793:
  4246                           
  4247                           ;lcd.c: 82: }
  4248                           ;lcd.c: 83: if(dia >= 10 && mes < 10){
  4249  001766  0100               	movlb	0	; () banked
  4250  001768  BF7D               	btfsc	(exibirData@dia+1)& (0+255),7,b
  4251  00176A  D02B               	goto	l3799
  4252  00176C  0100               	movlb	0	; () banked
  4253  00176E  517D               	movf	(exibirData@dia+1)& (0+255),w,b
  4254  001770  E105               	bnz	u3600
  4255  001772  0E0A               	movlw	10
  4256  001774  0100               	movlb	0	; () banked
  4257  001776  5D7C               	subwf	exibirData@dia& (0+255),w,b
  4258  001778  A0D8               	btfss	status,0,c
  4259  00177A  D023               	goto	l3799
  4260  00177C                     u3600:
  4261                           
  4262                           ; BSR set to: 0
  4263  00177C  0100               	movlb	0	; () banked
  4264  00177E  BF7F               	btfsc	(exibirData@mes+1)& (0+255),7,b
  4265  001780  D008               	goto	l3797
  4266  001782  0100               	movlb	0	; () banked
  4267  001784  517F               	movf	(exibirData@mes+1)& (0+255),w,b
  4268  001786  E11D               	bnz	l3799
  4269  001788  0E0A               	movlw	10
  4270  00178A  0100               	movlb	0	; () banked
  4271  00178C  5D7E               	subwf	exibirData@mes& (0+255),w,b
  4272  00178E  B0D8               	btfsc	status,0,c
  4273  001790  D018               	goto	l3799
  4274  001792                     l3797:
  4275                           
  4276                           ; BSR set to: 0
  4277                           ;lcd.c: 84: sprintf(string, "DATA: %i/0%i/%i", dia, mes, ano);
  4278  001792  C093  F06B         	movff	exibirData@string,sprintf@sp
  4279  001796  C094  F06C         	movff	exibirData@string+1,sprintf@sp+1
  4280  00179A  0E71               	movlw	low STR_2
  4281  00179C  0100               	movlb	0	; () banked
  4282  00179E  6F6D               	movwf	sprintf@f& (0+255),b
  4283  0017A0  0E08               	movlw	high STR_2
  4284  0017A2  0100               	movlb	0	; () banked
  4285  0017A4  6F6E               	movwf	(sprintf@f+1)& (0+255),b
  4286  0017A6  C07C  F06F         	movff	exibirData@dia,?_sprintf+4
  4287  0017AA  C07D  F070         	movff	exibirData@dia+1,?_sprintf+5
  4288  0017AE  C07E  F071         	movff	exibirData@mes,?_sprintf+6
  4289  0017B2  C07F  F072         	movff	exibirData@mes+1,?_sprintf+7
  4290  0017B6  C080  F073         	movff	exibirData@ano,?_sprintf+8
  4291  0017BA  C081  F074         	movff	exibirData@ano+1,?_sprintf+9
  4292  0017BE  ECC6  F00A         	call	_sprintf	;wreg free
  4293  0017C2                     l3799:
  4294                           
  4295                           ;lcd.c: 85: }
  4296                           ;lcd.c: 86: if(dia < 10 && mes >= 10){
  4297  0017C2  0100               	movlb	0	; () banked
  4298  0017C4  BF7D               	btfsc	(exibirData@dia+1)& (0+255),7,b
  4299  0017C6  D008               	goto	l3801
  4300  0017C8  0100               	movlb	0	; () banked
  4301  0017CA  517D               	movf	(exibirData@dia+1)& (0+255),w,b
  4302  0017CC  E128               	bnz	l3805
  4303  0017CE  0E0A               	movlw	10
  4304  0017D0  0100               	movlb	0	; () banked
  4305  0017D2  5D7C               	subwf	exibirData@dia& (0+255),w,b
  4306  0017D4  B0D8               	btfsc	status,0,c
  4307  0017D6  D023               	goto	l3805
  4308  0017D8                     l3801:
  4309                           
  4310                           ; BSR set to: 0
  4311  0017D8  0100               	movlb	0	; () banked
  4312  0017DA  BF7F               	btfsc	(exibirData@mes+1)& (0+255),7,b
  4313  0017DC  D020               	goto	l3805
  4314  0017DE  0100               	movlb	0	; () banked
  4315  0017E0  517F               	movf	(exibirData@mes+1)& (0+255),w,b
  4316  0017E2  E105               	bnz	u3630
  4317  0017E4  0E0A               	movlw	10
  4318  0017E6  0100               	movlb	0	; () banked
  4319  0017E8  5D7E               	subwf	exibirData@mes& (0+255),w,b
  4320  0017EA  A0D8               	btfss	status,0,c
  4321  0017EC  D018               	goto	l3805
  4322  0017EE                     u3630:
  4323                           
  4324                           ; BSR set to: 0
  4325                           ;lcd.c: 87: sprintf(string, "DATA: 0%i/%i/%i", dia, mes, ano);
  4326  0017EE  C093  F06B         	movff	exibirData@string,sprintf@sp
  4327  0017F2  C094  F06C         	movff	exibirData@string+1,sprintf@sp+1
  4328  0017F6  0E61               	movlw	low STR_3
  4329  0017F8  0100               	movlb	0	; () banked
  4330  0017FA  6F6D               	movwf	sprintf@f& (0+255),b
  4331  0017FC  0E08               	movlw	high STR_3
  4332  0017FE  0100               	movlb	0	; () banked
  4333  001800  6F6E               	movwf	(sprintf@f+1)& (0+255),b
  4334  001802  C07C  F06F         	movff	exibirData@dia,?_sprintf+4
  4335  001806  C07D  F070         	movff	exibirData@dia+1,?_sprintf+5
  4336  00180A  C07E  F071         	movff	exibirData@mes,?_sprintf+6
  4337  00180E  C07F  F072         	movff	exibirData@mes+1,?_sprintf+7
  4338  001812  C080  F073         	movff	exibirData@ano,?_sprintf+8
  4339  001816  C081  F074         	movff	exibirData@ano+1,?_sprintf+9
  4340  00181A  ECC6  F00A         	call	_sprintf	;wreg free
  4341  00181E                     l3805:
  4342                           
  4343                           ;lcd.c: 88: }if(dia < 10 && mes < 10){
  4344  00181E  0100               	movlb	0	; () banked
  4345  001820  BF7D               	btfsc	(exibirData@dia+1)& (0+255),7,b
  4346  001822  D008               	goto	l3807
  4347  001824  0100               	movlb	0	; () banked
  4348  001826  517D               	movf	(exibirData@dia+1)& (0+255),w,b
  4349  001828  E128               	bnz	l3811
  4350  00182A  0E0A               	movlw	10
  4351  00182C  0100               	movlb	0	; () banked
  4352  00182E  5D7C               	subwf	exibirData@dia& (0+255),w,b
  4353  001830  B0D8               	btfsc	status,0,c
  4354  001832  D023               	goto	l3811
  4355  001834                     l3807:
  4356                           
  4357                           ; BSR set to: 0
  4358  001834  0100               	movlb	0	; () banked
  4359  001836  BF7F               	btfsc	(exibirData@mes+1)& (0+255),7,b
  4360  001838  D008               	goto	l3809
  4361  00183A  0100               	movlb	0	; () banked
  4362  00183C  517F               	movf	(exibirData@mes+1)& (0+255),w,b
  4363  00183E  E11D               	bnz	l3811
  4364  001840  0E0A               	movlw	10
  4365  001842  0100               	movlb	0	; () banked
  4366  001844  5D7E               	subwf	exibirData@mes& (0+255),w,b
  4367  001846  B0D8               	btfsc	status,0,c
  4368  001848  D018               	goto	l3811
  4369  00184A                     l3809:
  4370                           
  4371                           ; BSR set to: 0
  4372                           ;lcd.c: 89: sprintf(string, "DATA: 0%i/0%i/%i", dia, mes, ano);
  4373  00184A  C093  F06B         	movff	exibirData@string,sprintf@sp
  4374  00184E  C094  F06C         	movff	exibirData@string+1,sprintf@sp+1
  4375  001852  0E1D               	movlw	low STR_4
  4376  001854  0100               	movlb	0	; () banked
  4377  001856  6F6D               	movwf	sprintf@f& (0+255),b
  4378  001858  0E08               	movlw	high STR_4
  4379  00185A  0100               	movlb	0	; () banked
  4380  00185C  6F6E               	movwf	(sprintf@f+1)& (0+255),b
  4381  00185E  C07C  F06F         	movff	exibirData@dia,?_sprintf+4
  4382  001862  C07D  F070         	movff	exibirData@dia+1,?_sprintf+5
  4383  001866  C07E  F071         	movff	exibirData@mes,?_sprintf+6
  4384  00186A  C07F  F072         	movff	exibirData@mes+1,?_sprintf+7
  4385  00186E  C080  F073         	movff	exibirData@ano,?_sprintf+8
  4386  001872  C081  F074         	movff	exibirData@ano+1,?_sprintf+9
  4387  001876  ECC6  F00A         	call	_sprintf	;wreg free
  4388  00187A                     l3811:
  4389                           
  4390                           ;lcd.c: 90: }
  4391                           ;lcd.c: 91: return string;
  4392  00187A  C093  F07C         	movff	exibirData@string,?_exibirData
  4393  00187E  C094  F07D         	movff	exibirData@string+1,?_exibirData+1
  4394  001882  0012               	return	
  4395  001884                     __end_of_exibirData:
  4396                           	opt stack 0
  4397                           tblptru	equ	0xFF8
  4398                           tblptrh	equ	0xFF7
  4399                           tblptrl	equ	0xFF6
  4400                           tablat	equ	0xFF5
  4401                           intcon	equ	0xFF2
  4402                           postinc0	equ	0xFEE
  4403                           wreg	equ	0xFE8
  4404                           postdec1	equ	0xFE5
  4405                           fsr1l	equ	0xFE1
  4406                           indf2	equ	0xFDF
  4407                           fsr2h	equ	0xFDA
  4408                           fsr2l	equ	0xFD9
  4409                           status	equ	0xFD8
  4410                           
  4411 ;; *************** function _sprintf *****************
  4412 ;; Defined at:
  4413 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\doprnt.c"
  4414 ;; Parameters:    Size  Location     Type
  4415 ;;  sp              2   11[BANK0 ] PTR unsigned char 
  4416 ;;		 -> NULL(0), 
  4417 ;;  f               2   13[BANK0 ] PTR const unsigned char 
  4418 ;;		 -> STR_20(12), STR_19(11), STR_18(11), STR_17(10), 
  4419 ;;		 -> STR_16(11), STR_15(10), STR_14(10), STR_13(9), 
  4420 ;;		 -> STR_12(18), STR_11(17), STR_10(17), STR_9(16), 
  4421 ;;		 -> STR_8(17), STR_7(16), STR_6(16), STR_5(15), 
  4422 ;;		 -> STR_4(17), STR_3(16), STR_2(16), STR_1(15), 
  4423 ;; Auto vars:     Size  Location     Type
  4424 ;;  tmpval          4    0        struct .
  4425 ;;  cp              3    0        PTR const unsigned char 
  4426 ;;  val             2   25[BANK0 ] unsigned int 
  4427 ;;  ap              2   21[BANK0 ] PTR void [1]
  4428 ;;		 -> ?_sprintf(2), 
  4429 ;;  len             2    0        unsigned int 
  4430 ;;  c               1   27[BANK0 ] char 
  4431 ;;  prec            1   24[BANK0 ] char 
  4432 ;;  flag            1   23[BANK0 ] unsigned char 
  4433 ;; Return value:  Size  Location     Type
  4434 ;;                  2   11[BANK0 ] int 
  4435 ;; Registers used:
  4436 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4437 ;; Tracked objects:
  4438 ;;		On entry : 0/0
  4439 ;;		On exit  : 0/0
  4440 ;;		Unchanged: 0/0
  4441 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4442 ;;      Params:         0      10       0       0       0       0       0       0       0
  4443 ;;      Locals:         0       7       0       0       0       0       0       0       0
  4444 ;;      Temps:          1       0       0       0       0       0       0       0       0
  4445 ;;      Totals:         1      17       0       0       0       0       0       0       0
  4446 ;;Total ram usage:       18 bytes
  4447 ;; Hardware stack levels used:    1
  4448 ;; Hardware stack levels required when called:    4
  4449 ;; This function calls:
  4450 ;;		___lwdiv
  4451 ;;		___lwmod
  4452 ;; This function is called by:
  4453 ;;		_exibirData
  4454 ;;		_exibirHora
  4455 ;;		_exibirAlarme
  4456 ;; This function uses a non-reentrant model
  4457 ;;
  4458                           
  4459                           	psect	text22
  4460  00158C                     __ptext22:
  4461                           	opt stack 0
  4462  00158C                     _sprintf:
  4463                           	opt stack 24
  4464                           
  4465                           ;doprnt.c: 494: va_list ap;
  4466                           ;doprnt.c: 499: signed char c;
  4467                           ;doprnt.c: 506: signed char prec;
  4468                           ;doprnt.c: 508: unsigned char flag;
  4469                           ;doprnt.c: 523: union {
  4470                           ;doprnt.c: 524: unsigned long vd;
  4471                           ;doprnt.c: 525: double integ;
  4472                           ;doprnt.c: 526: } tmpval;
  4473                           ;doprnt.c: 528: unsigned int val;
  4474                           ;doprnt.c: 529: unsigned len;
  4475                           ;doprnt.c: 530: const char * cp;
  4476                           ;doprnt.c: 533: *ap = __va_start();
  4477                           
  4478                           ;incstack = 0
  4479  00158C  0E6F               	movlw	low (?_sprintf+4)
  4480  00158E  0100               	movlb	0	; () banked
  4481  001590  6F75               	movwf	sprintf@ap& (0+255),b
  4482  001592  0E00               	movlw	high (?_sprintf+4)
  4483  001594  0100               	movlb	0	; () banked
  4484  001596  6F76               	movwf	(sprintf@ap+1)& (0+255),b
  4485                           
  4486                           ;doprnt.c: 536: while(c = *f++) {
  4487  001598  D0A3               	goto	l3711
  4488  00159A                     l3659:
  4489                           
  4490                           ; BSR set to: 0
  4491                           ;doprnt.c: 538: if(c != '%')
  4492  00159A  0E25               	movlw	37
  4493  00159C  0100               	movlb	0	; () banked
  4494  00159E  197B               	xorwf	sprintf@c& (0+255),w,b
  4495  0015A0  B4D8               	btfsc	status,2,c
  4496  0015A2  D00A               	goto	l3665
  4497                           
  4498                           ; BSR set to: 0
  4499                           ;doprnt.c: 540: {
  4500                           ;doprnt.c: 541: ((*sp++ = (c)));
  4501  0015A4  C06B  FFD9         	movff	sprintf@sp,fsr2l
  4502  0015A8  C06C  FFDA         	movff	sprintf@sp+1,fsr2h
  4503  0015AC  C07B  FFDF         	movff	sprintf@c,indf2
  4504                           
  4505                           ; BSR set to: 0
  4506  0015B0  0100               	movlb	0	; () banked
  4507  0015B2  4B6B               	infsnz	sprintf@sp& (0+255),f,b
  4508  0015B4  2B6C               	incf	(sprintf@sp+1)& (0+255),f,b
  4509                           
  4510                           ;doprnt.c: 542: continue;
  4511  0015B6  D094               	goto	l3711
  4512  0015B8                     l3665:
  4513                           
  4514                           ; BSR set to: 0
  4515                           ;doprnt.c: 543: }
  4516                           ;doprnt.c: 548: flag = 0;
  4517  0015B8  0E00               	movlw	0
  4518  0015BA  0100               	movlb	0	; () banked
  4519  0015BC  6F77               	movwf	sprintf@flag& (0+255),b
  4520                           
  4521                           ; BSR set to: 0
  4522                           
  4523                           ; BSR set to: 0
  4524                           
  4525                           ; BSR set to: 0
  4526                           ;doprnt.c: 822: }
  4527                           
  4528                           ; BSR set to: 0
  4529                           ;doprnt.c: 813: continue;
  4530                           
  4531                           ;doprnt.c: 802: default:
  4532                           
  4533                           ; BSR set to: 0
  4534                           ;doprnt.c: 698: case 'i':
  4535                           ;doprnt.c: 699: break;
  4536                           
  4537                           ; BSR set to: 0
  4538                           
  4539                           ;doprnt.c: 697: case 'd':
  4540                           
  4541                           ; BSR set to: 0
  4542                           ;doprnt.c: 638: goto alldone;
  4543                           
  4544                           ;doprnt.c: 637: case 0:
  4545                           
  4546                           ;doprnt.c: 635: switch(c = *f++) {
  4547  0015BE  C06D  FFF6         	movff	sprintf@f,tblptrl
  4548  0015C2  C06E  FFF7         	movff	sprintf@f+1,tblptrh
  4549  0015C6  0100               	movlb	0	; () banked
  4550  0015C8  4B6D               	infsnz	sprintf@f& (0+255),f,b
  4551  0015CA  2B6E               	incf	(sprintf@f+1)& (0+255),f,b
  4552  0015CC                     	if	0	;tblptru may be non-zero
  4553  0015CC                     	endif
  4554  0015CC                     	if	0	;tblptru may be non-zero
  4555  0015CC                     	endif
  4556  0015CC  0008               	tblrd		*
  4557  0015CE  CFF5 F07B          	movff	tablat,sprintf@c
  4558  0015D2  0100               	movlb	0	; () banked
  4559  0015D4  517B               	movf	sprintf@c& (0+255),w,b
  4560                           
  4561                           ; Switch size 1, requested type "space"
  4562                           ; Number of cases is 3, Range of values is 0 to 105
  4563                           ; switch strategies available:
  4564                           ; Name         Instructions Cycles
  4565                           ; simple_byte           10     6 (average)
  4566                           ;	Chosen strategy is simple_byte
  4567  0015D6  0A00               	xorlw	0	; case 0
  4568  0015D8  B4D8               	btfsc	status,2,c
  4569  0015DA  D090               	goto	l3713
  4570  0015DC  0A64               	xorlw	100	; case 100
  4571  0015DE  B4D8               	btfsc	status,2,c
  4572  0015E0  D003               	goto	l3671
  4573  0015E2  0A0D               	xorlw	13	; case 105
  4574  0015E4  A4D8               	btfss	status,2,c
  4575  0015E6  D07C               	goto	l3711
  4576  0015E8                     l3671:
  4577                           
  4578                           ; BSR set to: 0
  4579                           ;doprnt.c: 1253: {
  4580                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  4581  0015E8  C075  FFD9         	movff	sprintf@ap,fsr2l
  4582  0015EC  C076  FFDA         	movff	sprintf@ap+1,fsr2h
  4583  0015F0  CFDE F079          	movff	postinc2,sprintf@val
  4584  0015F4  CFDD F07A          	movff	postdec2,sprintf@val+1
  4585                           
  4586                           ; BSR set to: 0
  4587  0015F8  0E02               	movlw	2
  4588  0015FA  0100               	movlb	0	; () banked
  4589  0015FC  2775               	addwf	sprintf@ap& (0+255),f,b
  4590  0015FE  0E00               	movlw	0
  4591  001600  2376               	addwfc	(sprintf@ap+1)& (0+255),f,b
  4592                           
  4593                           ; BSR set to: 0
  4594                           ;doprnt.c: 1261: if((int)val < 0) {
  4595  001602  0100               	movlb	0	; () banked
  4596  001604  AF7A               	btfss	(sprintf@val+1)& (0+255),7,b
  4597  001606  D008               	goto	l3681
  4598                           
  4599                           ; BSR set to: 0
  4600                           ;doprnt.c: 1262: flag |= 0x03;
  4601  001608  0E03               	movlw	3
  4602  00160A  0100               	movlb	0	; () banked
  4603  00160C  1377               	iorwf	sprintf@flag& (0+255),f,b
  4604                           
  4605                           ; BSR set to: 0
  4606                           ;doprnt.c: 1263: val = -val;
  4607  00160E  0100               	movlb	0	; () banked
  4608  001610  6D79               	negf	sprintf@val& (0+255),b
  4609  001612  1F7A               	comf	(sprintf@val+1)& (0+255),f,b
  4610  001614  B0D8               	btfsc	status,0,c
  4611  001616  2B7A               	incf	(sprintf@val+1)& (0+255),f,b
  4612  001618                     l3681:
  4613                           
  4614                           ; BSR set to: 0
  4615                           ;doprnt.c: 1264: }
  4616                           ;doprnt.c: 1266: }
  4617                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  4618  001618  0E01               	movlw	1
  4619  00161A  0100               	movlb	0	; () banked
  4620  00161C  6F7B               	movwf	sprintf@c& (0+255),b
  4621  00161E                     l3683:
  4622                           
  4623                           ; BSR set to: 0
  4624  00161E  0E05               	movlw	5
  4625  001620  0100               	movlb	0	; () banked
  4626  001622  197B               	xorwf	sprintf@c& (0+255),w,b
  4627  001624  B4D8               	btfsc	status,2,c
  4628  001626  D016               	goto	l3695
  4629                           
  4630                           ; BSR set to: 0
  4631                           ;doprnt.c: 1306: if(val < dpowers[c])
  4632                           
  4633                           ; BSR set to: 0
  4634                           
  4635                           ; BSR set to: 0
  4636  001628  0100               	movlb	0	; () banked
  4637  00162A  517B               	movf	sprintf@c& (0+255),w,b
  4638  00162C  0D02               	mullw	2
  4639  00162E  0E01               	movlw	low _dpowers
  4640  001630  24F3               	addwf	prodl,w,c
  4641  001632  6EF6               	movwf	tblptrl,c
  4642  001634  0E08               	movlw	high _dpowers
  4643  001636  20F4               	addwfc	prodh,w,c
  4644  001638  6EF7               	movwf	tblptrh,c
  4645  00163A                     	if	0	;There are less than 3 active tblptr bytes
  4646  00163A                     	endif
  4647  00163A  0009               	tblrd		*+
  4648  00163C  50F5               	movf	tablat,w,c
  4649  00163E  0100               	movlb	0	; () banked
  4650  001640  5D79               	subwf	sprintf@val& (0+255),w,b
  4651  001642  0009               	tblrd		*+
  4652  001644  50F5               	movf	tablat,w,c
  4653  001646  0100               	movlb	0	; () banked
  4654  001648  597A               	subwfb	(sprintf@val+1)& (0+255),w,b
  4655  00164A  A0D8               	btfss	status,0,c
  4656  00164C  D003               	goto	l3695
  4657                           
  4658                           ; BSR set to: 0
  4659                           
  4660                           ; BSR set to: 0
  4661                           
  4662                           ; BSR set to: 0
  4663                           ;doprnt.c: 1307: break;
  4664  00164E  0100               	movlb	0	; () banked
  4665  001650  2B7B               	incf	sprintf@c& (0+255),f,b
  4666  001652  D7E5               	goto	l3683
  4667  001654                     l3695:
  4668                           
  4669                           ; BSR set to: 0
  4670                           ;doprnt.c: 1422: {
  4671                           ;doprnt.c: 1438: if(flag & 0x03)
  4672  001654  C077  F021         	movff	sprintf@flag,??_sprintf
  4673  001658  0E03               	movlw	3
  4674  00165A  1621               	andwf	??_sprintf,f,c
  4675  00165C  B4D8               	btfsc	status,2,c
  4676  00165E  D009               	goto	l3701
  4677                           
  4678                           ; BSR set to: 0
  4679                           ;doprnt.c: 1439: ((*sp++ = ('-')));
  4680  001660  C06B  FFD9         	movff	sprintf@sp,fsr2l
  4681  001664  C06C  FFDA         	movff	sprintf@sp+1,fsr2h
  4682  001668  0E2D               	movlw	45
  4683  00166A  6EDF               	movwf	indf2,c
  4684                           
  4685                           ; BSR set to: 0
  4686  00166C  0100               	movlb	0	; () banked
  4687  00166E  4B6B               	infsnz	sprintf@sp& (0+255),f,b
  4688  001670  2B6C               	incf	(sprintf@sp+1)& (0+255),f,b
  4689  001672                     l3701:
  4690                           
  4691                           ; BSR set to: 0
  4692                           ;doprnt.c: 1469: }
  4693                           ;doprnt.c: 1472: prec = c;
  4694  001672  C07B  F078         	movff	sprintf@c,sprintf@prec
  4695                           
  4696                           ;doprnt.c: 1474: while(prec--) {
  4697  001676  D02E               	goto	l3709
  4698  001678                     l3703:
  4699                           
  4700                           ; BSR set to: 0
  4701                           ;doprnt.c: 1478: {
  4702                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  4703  001678  0100               	movlb	0	; () banked
  4704  00167A  5178               	movf	sprintf@prec& (0+255),w,b
  4705  00167C  0D02               	mullw	2
  4706  00167E  0E01               	movlw	low _dpowers
  4707  001680  24F3               	addwf	prodl,w,c
  4708  001682  6EF6               	movwf	tblptrl,c
  4709  001684  0E08               	movlw	high _dpowers
  4710  001686  20F4               	addwfc	prodh,w,c
  4711  001688  6EF7               	movwf	tblptrh,c
  4712  00168A                     	if	0	;There are less than 3 active tblptr bytes
  4713  00168A                     	endif
  4714  00168A  0009               	tblrd		*+
  4715  00168C  CFF5 F062          	movff	tablat,___lwdiv@divisor
  4716  001690  000A               	tblrd		*-
  4717  001692  CFF5 F063          	movff	tablat,___lwdiv@divisor+1
  4718  001696  C079  F060         	movff	sprintf@val,___lwdiv@dividend
  4719  00169A  C07A  F061         	movff	sprintf@val+1,___lwdiv@dividend+1
  4720  00169E  EC3B  F00F         	call	___lwdiv	;wreg free
  4721  0016A2  C060  F067         	movff	?___lwdiv,___lwmod@dividend
  4722  0016A6  C061  F068         	movff	?___lwdiv+1,___lwmod@dividend+1
  4723  0016AA  0E00               	movlw	0
  4724  0016AC  0100               	movlb	0	; () banked
  4725  0016AE  6F6A               	movwf	(___lwmod@divisor+1)& (0+255),b
  4726  0016B0  0E0A               	movlw	10
  4727  0016B2  6F69               	movwf	___lwmod@divisor& (0+255),b
  4728  0016B4  ECDD  F00F         	call	___lwmod	;wreg free
  4729  0016B8  0100               	movlb	0	; () banked
  4730  0016BA  5167               	movf	?___lwmod& (0+255),w,b
  4731  0016BC  0F30               	addlw	48
  4732  0016BE  0100               	movlb	0	; () banked
  4733  0016C0  6F7B               	movwf	sprintf@c& (0+255),b
  4734                           
  4735                           ; BSR set to: 0
  4736                           ;doprnt.c: 1523: }
  4737                           ;doprnt.c: 1524: ((*sp++ = (c)));
  4738  0016C2  C06B  FFD9         	movff	sprintf@sp,fsr2l
  4739  0016C6  C06C  FFDA         	movff	sprintf@sp+1,fsr2h
  4740  0016CA  C07B  FFDF         	movff	sprintf@c,indf2
  4741                           
  4742                           ; BSR set to: 0
  4743  0016CE  0100               	movlb	0	; () banked
  4744  0016D0  4B6B               	infsnz	sprintf@sp& (0+255),f,b
  4745  0016D2  2B6C               	incf	(sprintf@sp+1)& (0+255),f,b
  4746  0016D4                     l3709:
  4747                           
  4748                           ; BSR set to: 0
  4749  0016D4  0100               	movlb	0	; () banked
  4750  0016D6  0778               	decf	sprintf@prec& (0+255),f,b
  4751  0016D8  0100               	movlb	0	; () banked
  4752  0016DA  2978               	incf	sprintf@prec& (0+255),w,b
  4753  0016DC  A4D8               	btfss	status,2,c
  4754  0016DE  D7CC               	goto	l3703
  4755  0016E0                     l3711:
  4756                           
  4757                           ; BSR set to: 0
  4758  0016E0  C06D  FFF6         	movff	sprintf@f,tblptrl
  4759  0016E4  C06E  FFF7         	movff	sprintf@f+1,tblptrh
  4760  0016E8  0100               	movlb	0	; () banked
  4761  0016EA  4B6D               	infsnz	sprintf@f& (0+255),f,b
  4762  0016EC  2B6E               	incf	(sprintf@f+1)& (0+255),f,b
  4763  0016EE                     	if	0	;tblptru may be non-zero
  4764  0016EE                     	endif
  4765  0016EE                     	if	0	;tblptru may be non-zero
  4766  0016EE                     	endif
  4767  0016EE  0008               	tblrd		*
  4768  0016F0  CFF5 F07B          	movff	tablat,sprintf@c
  4769  0016F4  0100               	movlb	0	; () banked
  4770  0016F6  517B               	movf	sprintf@c& (0+255),w,b
  4771  0016F8  A4D8               	btfss	status,2,c
  4772  0016FA  D74F               	goto	l3659
  4773  0016FC                     l3713:
  4774                           
  4775                           ; BSR set to: 0
  4776                           ;doprnt.c: 1538: *sp = 0;
  4777  0016FC  C06B  FFD9         	movff	sprintf@sp,fsr2l
  4778  001700  C06C  FFDA         	movff	sprintf@sp+1,fsr2h
  4779  001704  0E00               	movlw	0
  4780  001706  6EDF               	movwf	indf2,c
  4781  001708  0012               	return	
  4782  00170A                     __end_of_sprintf:
  4783                           	opt stack 0
  4784                           tblptru	equ	0xFF8
  4785                           tblptrh	equ	0xFF7
  4786                           tblptrl	equ	0xFF6
  4787                           tablat	equ	0xFF5
  4788                           prodh	equ	0xFF4
  4789                           prodl	equ	0xFF3
  4790                           intcon	equ	0xFF2
  4791                           postinc0	equ	0xFEE
  4792                           wreg	equ	0xFE8
  4793                           postdec1	equ	0xFE5
  4794                           fsr1l	equ	0xFE1
  4795                           indf2	equ	0xFDF
  4796                           postinc2	equ	0xFDE
  4797                           postdec2	equ	0xFDD
  4798                           fsr2h	equ	0xFDA
  4799                           fsr2l	equ	0xFD9
  4800                           status	equ	0xFD8
  4801                           
  4802 ;; *************** function ___lwmod *****************
  4803 ;; Defined at:
  4804 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\lwmod.c"
  4805 ;; Parameters:    Size  Location     Type
  4806 ;;  dividend        2    7[BANK0 ] unsigned int 
  4807 ;;  divisor         2    9[BANK0 ] unsigned int 
  4808 ;; Auto vars:     Size  Location     Type
  4809 ;;  counter         1   31[COMRAM] unsigned char 
  4810 ;; Return value:  Size  Location     Type
  4811 ;;                  2    7[BANK0 ] unsigned int 
  4812 ;; Registers used:
  4813 ;;		wreg, status,2, status,0
  4814 ;; Tracked objects:
  4815 ;;		On entry : 0/0
  4816 ;;		On exit  : 0/0
  4817 ;;		Unchanged: 0/0
  4818 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4819 ;;      Params:         0       4       0       0       0       0       0       0       0
  4820 ;;      Locals:         1       0       0       0       0       0       0       0       0
  4821 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4822 ;;      Totals:         1       4       0       0       0       0       0       0       0
  4823 ;;Total ram usage:        5 bytes
  4824 ;; Hardware stack levels used:    1
  4825 ;; Hardware stack levels required when called:    3
  4826 ;; This function calls:
  4827 ;;		Nothing
  4828 ;; This function is called by:
  4829 ;;		_sprintf
  4830 ;; This function uses a non-reentrant model
  4831 ;;
  4832                           
  4833                           	psect	text23
  4834  001FBA                     __ptext23:
  4835                           	opt stack 0
  4836  001FBA                     ___lwmod:
  4837                           	opt stack 24
  4838                           
  4839                           ; BSR set to: 0
  4840                           ;incstack = 0
  4841  001FBA  0100               	movlb	0	; () banked
  4842  001FBC  5169               	movf	___lwmod@divisor& (0+255),w,b
  4843  001FBE  0100               	movlb	0	; () banked
  4844  001FC0  116A               	iorwf	(___lwmod@divisor+1)& (0+255),w,b
  4845  001FC2  B4D8               	btfsc	status,2,c
  4846  001FC4  D023               	goto	l1138
  4847                           
  4848                           ; BSR set to: 0
  4849  001FC6  0E01               	movlw	1
  4850  001FC8  6E20               	movwf	___lwmod@counter,c
  4851  001FCA  D005               	goto	l3559
  4852  001FCC                     l3557:
  4853                           
  4854                           ; BSR set to: 0
  4855  001FCC  0100               	movlb	0	; () banked
  4856  001FCE  90D8               	bcf	status,0,c
  4857  001FD0  3769               	rlcf	___lwmod@divisor& (0+255),f,b
  4858  001FD2  376A               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
  4859  001FD4  2A20               	incf	___lwmod@counter,f,c
  4860  001FD6                     l3559:
  4861                           
  4862                           ; BSR set to: 0
  4863  001FD6  0100               	movlb	0	; () banked
  4864  001FD8  AF6A               	btfss	(___lwmod@divisor+1)& (0+255),7,b
  4865  001FDA  D7F8               	goto	l3557
  4866  001FDC                     l3561:
  4867                           
  4868                           ; BSR set to: 0
  4869  001FDC  0100               	movlb	0	; () banked
  4870  001FDE  5169               	movf	___lwmod@divisor& (0+255),w,b
  4871  001FE0  0100               	movlb	0	; () banked
  4872  001FE2  5D67               	subwf	___lwmod@dividend& (0+255),w,b
  4873  001FE4  0100               	movlb	0	; () banked
  4874  001FE6  516A               	movf	(___lwmod@divisor+1)& (0+255),w,b
  4875  001FE8  0100               	movlb	0	; () banked
  4876  001FEA  5968               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
  4877  001FEC  A0D8               	btfss	status,0,c
  4878  001FEE  D008               	goto	l3565
  4879                           
  4880                           ; BSR set to: 0
  4881  001FF0  0100               	movlb	0	; () banked
  4882  001FF2  5169               	movf	___lwmod@divisor& (0+255),w,b
  4883  001FF4  0100               	movlb	0	; () banked
  4884  001FF6  5F67               	subwf	___lwmod@dividend& (0+255),f,b
  4885  001FF8  0100               	movlb	0	; () banked
  4886  001FFA  516A               	movf	(___lwmod@divisor+1)& (0+255),w,b
  4887  001FFC  0100               	movlb	0	; () banked
  4888  001FFE  5B68               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
  4889  002000                     l3565:
  4890                           
  4891                           ; BSR set to: 0
  4892  002000  0100               	movlb	0	; () banked
  4893  002002  90D8               	bcf	status,0,c
  4894  002004  336A               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
  4895  002006  3369               	rrcf	___lwmod@divisor& (0+255),f,b
  4896                           
  4897                           ; BSR set to: 0
  4898  002008  2E20               	decfsz	___lwmod@counter,f,c
  4899  00200A  D7E8               	goto	l3561
  4900  00200C                     l1138:
  4901                           
  4902                           ; BSR set to: 0
  4903  00200C  C067  F067         	movff	___lwmod@dividend,?___lwmod
  4904  002010  C068  F068         	movff	___lwmod@dividend+1,?___lwmod+1
  4905                           
  4906                           ; BSR set to: 0
  4907  002014  0012               	return		;funcret
  4908  002016                     __end_of___lwmod:
  4909                           	opt stack 0
  4910                           tblptru	equ	0xFF8
  4911                           tblptrh	equ	0xFF7
  4912                           tblptrl	equ	0xFF6
  4913                           tablat	equ	0xFF5
  4914                           prodh	equ	0xFF4
  4915                           prodl	equ	0xFF3
  4916                           intcon	equ	0xFF2
  4917                           postinc0	equ	0xFEE
  4918                           wreg	equ	0xFE8
  4919                           postdec1	equ	0xFE5
  4920                           fsr1l	equ	0xFE1
  4921                           indf2	equ	0xFDF
  4922                           postinc2	equ	0xFDE
  4923                           postdec2	equ	0xFDD
  4924                           fsr2h	equ	0xFDA
  4925                           fsr2l	equ	0xFD9
  4926                           status	equ	0xFD8
  4927                           
  4928 ;; *************** function ___lwdiv *****************
  4929 ;; Defined at:
  4930 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\lwdiv.c"
  4931 ;; Parameters:    Size  Location     Type
  4932 ;;  dividend        2    0[BANK0 ] unsigned int 
  4933 ;;  divisor         2    2[BANK0 ] unsigned int 
  4934 ;; Auto vars:     Size  Location     Type
  4935 ;;  quotient        2    5[BANK0 ] unsigned int 
  4936 ;;  counter         1    4[BANK0 ] unsigned char 
  4937 ;; Return value:  Size  Location     Type
  4938 ;;                  2    0[BANK0 ] unsigned int 
  4939 ;; Registers used:
  4940 ;;		wreg, status,2, status,0
  4941 ;; Tracked objects:
  4942 ;;		On entry : 0/0
  4943 ;;		On exit  : 0/0
  4944 ;;		Unchanged: 0/0
  4945 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4946 ;;      Params:         0       4       0       0       0       0       0       0       0
  4947 ;;      Locals:         0       3       0       0       0       0       0       0       0
  4948 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4949 ;;      Totals:         0       7       0       0       0       0       0       0       0
  4950 ;;Total ram usage:        7 bytes
  4951 ;; Hardware stack levels used:    1
  4952 ;; Hardware stack levels required when called:    3
  4953 ;; This function calls:
  4954 ;;		Nothing
  4955 ;; This function is called by:
  4956 ;;		_sprintf
  4957 ;; This function uses a non-reentrant model
  4958 ;;
  4959                           
  4960                           	psect	text24
  4961  001E76                     __ptext24:
  4962                           	opt stack 0
  4963  001E76                     ___lwdiv:
  4964                           	opt stack 24
  4965                           
  4966                           ; BSR set to: 0
  4967                           ;incstack = 0
  4968  001E76  0E00               	movlw	0
  4969  001E78  0100               	movlb	0	; () banked
  4970  001E7A  6F66               	movwf	(___lwdiv@quotient+1)& (0+255),b
  4971  001E7C  0E00               	movlw	0
  4972  001E7E  6F65               	movwf	___lwdiv@quotient& (0+255),b
  4973                           
  4974                           ; BSR set to: 0
  4975  001E80  0100               	movlb	0	; () banked
  4976  001E82  5162               	movf	___lwdiv@divisor& (0+255),w,b
  4977  001E84  0100               	movlb	0	; () banked
  4978  001E86  1163               	iorwf	(___lwdiv@divisor+1)& (0+255),w,b
  4979  001E88  B4D8               	btfsc	status,2,c
  4980  001E8A  D02C               	goto	l1128
  4981                           
  4982                           ; BSR set to: 0
  4983  001E8C  0E01               	movlw	1
  4984  001E8E  0100               	movlb	0	; () banked
  4985  001E90  6F64               	movwf	___lwdiv@counter& (0+255),b
  4986  001E92  D006               	goto	l3539
  4987  001E94                     l3537:
  4988                           
  4989                           ; BSR set to: 0
  4990  001E94  0100               	movlb	0	; () banked
  4991  001E96  90D8               	bcf	status,0,c
  4992  001E98  3762               	rlcf	___lwdiv@divisor& (0+255),f,b
  4993  001E9A  3763               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
  4994  001E9C  0100               	movlb	0	; () banked
  4995  001E9E  2B64               	incf	___lwdiv@counter& (0+255),f,b
  4996  001EA0                     l3539:
  4997                           
  4998                           ; BSR set to: 0
  4999  001EA0  0100               	movlb	0	; () banked
  5000  001EA2  AF63               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
  5001  001EA4  D7F7               	goto	l3537
  5002  001EA6                     l3541:
  5003                           
  5004                           ; BSR set to: 0
  5005  001EA6  0100               	movlb	0	; () banked
  5006  001EA8  90D8               	bcf	status,0,c
  5007  001EAA  3765               	rlcf	___lwdiv@quotient& (0+255),f,b
  5008  001EAC  3766               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
  5009                           
  5010                           ; BSR set to: 0
  5011  001EAE  0100               	movlb	0	; () banked
  5012  001EB0  5162               	movf	___lwdiv@divisor& (0+255),w,b
  5013  001EB2  0100               	movlb	0	; () banked
  5014  001EB4  5D60               	subwf	___lwdiv@dividend& (0+255),w,b
  5015  001EB6  0100               	movlb	0	; () banked
  5016  001EB8  5163               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  5017  001EBA  0100               	movlb	0	; () banked
  5018  001EBC  5961               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
  5019  001EBE  A0D8               	btfss	status,0,c
  5020  001EC0  D00A               	goto	l3549
  5021                           
  5022                           ; BSR set to: 0
  5023  001EC2  0100               	movlb	0	; () banked
  5024  001EC4  5162               	movf	___lwdiv@divisor& (0+255),w,b
  5025  001EC6  0100               	movlb	0	; () banked
  5026  001EC8  5F60               	subwf	___lwdiv@dividend& (0+255),f,b
  5027  001ECA  0100               	movlb	0	; () banked
  5028  001ECC  5163               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  5029  001ECE  0100               	movlb	0	; () banked
  5030  001ED0  5B61               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
  5031                           
  5032                           ; BSR set to: 0
  5033  001ED2  0100               	movlb	0	; () banked
  5034  001ED4  8165               	bsf	___lwdiv@quotient& (0+255),0,b
  5035  001ED6                     l3549:
  5036                           
  5037                           ; BSR set to: 0
  5038  001ED6  0100               	movlb	0	; () banked
  5039  001ED8  90D8               	bcf	status,0,c
  5040  001EDA  3363               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
  5041  001EDC  3362               	rrcf	___lwdiv@divisor& (0+255),f,b
  5042                           
  5043                           ; BSR set to: 0
  5044  001EDE  0100               	movlb	0	; () banked
  5045  001EE0  2F64               	decfsz	___lwdiv@counter& (0+255),f,b
  5046  001EE2  D7E1               	goto	l3541
  5047  001EE4                     l1128:
  5048                           
  5049                           ; BSR set to: 0
  5050  001EE4  C065  F060         	movff	___lwdiv@quotient,?___lwdiv
  5051  001EE8  C066  F061         	movff	___lwdiv@quotient+1,?___lwdiv+1
  5052                           
  5053                           ; BSR set to: 0
  5054  001EEC  0012               	return		;funcret
  5055  001EEE                     __end_of___lwdiv:
  5056                           	opt stack 0
  5057                           tblptru	equ	0xFF8
  5058                           tblptrh	equ	0xFF7
  5059                           tblptrl	equ	0xFF6
  5060                           tablat	equ	0xFF5
  5061                           prodh	equ	0xFF4
  5062                           prodl	equ	0xFF3
  5063                           intcon	equ	0xFF2
  5064                           postinc0	equ	0xFEE
  5065                           wreg	equ	0xFE8
  5066                           postdec1	equ	0xFE5
  5067                           fsr1l	equ	0xFE1
  5068                           indf2	equ	0xFDF
  5069                           postinc2	equ	0xFDE
  5070                           postdec2	equ	0xFDD
  5071                           fsr2h	equ	0xFDA
  5072                           fsr2l	equ	0xFD9
  5073                           status	equ	0xFD8
  5074                           
  5075 ;; *************** function _controlaCursorR *****************
  5076 ;; Defined at:
  5077 ;;		line 47 in file "lcd.c"
  5078 ;; Parameters:    Size  Location     Type
  5079 ;;		None
  5080 ;; Auto vars:     Size  Location     Type
  5081 ;;		None
  5082 ;; Return value:  Size  Location     Type
  5083 ;;                  1    wreg      void 
  5084 ;; Registers used:
  5085 ;;		wreg, status,2, status,0, cstack
  5086 ;; Tracked objects:
  5087 ;;		On entry : 0/0
  5088 ;;		On exit  : 0/0
  5089 ;;		Unchanged: 0/0
  5090 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5091 ;;      Params:         0       0       0       0       0       0       0       0       0
  5092 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5093 ;;      Temps:          0       2       0       0       0       0       0       0       0
  5094 ;;      Totals:         0       2       0       0       0       0       0       0       0
  5095 ;;Total ram usage:        2 bytes
  5096 ;; Hardware stack levels used:    1
  5097 ;; Hardware stack levels required when called:    6
  5098 ;; This function calls:
  5099 ;;		_SetDDRamAddr
  5100 ;;		_WriteCmdXLCD
  5101 ;; This function is called by:
  5102 ;;		_inicializaTela1
  5103 ;; This function uses a non-reentrant model
  5104 ;;
  5105                           
  5106                           	psect	text25
  5107  001D72                     __ptext25:
  5108                           	opt stack 0
  5109  001D72                     _controlaCursorR:
  5110                           	opt stack 23
  5111                           
  5112                           ;lcd.c: 48: switch(posCursorR){
  5113                           
  5114                           ; BSR set to: 0
  5115                           ;incstack = 0
  5116  001D72  D020               	goto	l3781
  5117  001D74                     l3763:
  5118                           
  5119                           ;lcd.c: 50: WriteCmdXLCD(0x0F);
  5120  001D74  0E0F               	movlw	15
  5121  001D76  EC33  F011         	call	_WriteCmdXLCD
  5122                           
  5123                           ;lcd.c: 51: break;
  5124  001D7A  0012               	return	
  5125  001D7C                     l3765:
  5126                           
  5127                           ;lcd.c: 53: SetDDRamAddr(0x07);
  5128  001D7C  0E07               	movlw	7
  5129  001D7E  ECAE  F00F         	call	_SetDDRamAddr
  5130                           
  5131                           ;lcd.c: 54: break;
  5132  001D82  0012               	return	
  5133  001D84                     l3767:
  5134                           
  5135                           ;lcd.c: 56: SetDDRamAddr(0x0A);
  5136  001D84  0E0A               	movlw	10
  5137  001D86  ECAE  F00F         	call	_SetDDRamAddr
  5138                           
  5139                           ;lcd.c: 57: break;
  5140  001D8A  0012               	return	
  5141  001D8C                     l3769:
  5142                           
  5143                           ;lcd.c: 59: SetDDRamAddr(0x0D);
  5144  001D8C  0E0D               	movlw	13
  5145  001D8E  ECAE  F00F         	call	_SetDDRamAddr
  5146                           
  5147                           ;lcd.c: 60: break;
  5148  001D92  0012               	return	
  5149  001D94                     l3771:
  5150                           
  5151                           ;lcd.c: 62: SetDDRamAddr(0x47);
  5152  001D94  0E47               	movlw	71
  5153  001D96  ECAE  F00F         	call	_SetDDRamAddr
  5154                           
  5155                           ;lcd.c: 63: break;
  5156  001D9A  0012               	return	
  5157  001D9C                     l3773:
  5158                           
  5159                           ;lcd.c: 65: SetDDRamAddr(0x4A);
  5160  001D9C  0E4A               	movlw	74
  5161  001D9E  ECAE  F00F         	call	_SetDDRamAddr
  5162                           
  5163                           ;lcd.c: 66: break;
  5164  001DA2  0012               	return	
  5165  001DA4                     l3775:
  5166                           
  5167                           ;lcd.c: 68: SetDDRamAddr(0x4F);
  5168  001DA4  0E4F               	movlw	79
  5169  001DA6  ECAE  F00F         	call	_SetDDRamAddr
  5170                           
  5171                           ;lcd.c: 69: break;
  5172  001DAA  0012               	return	
  5173  001DAC                     l3777:
  5174                           
  5175                           ;lcd.c: 71: WriteCmdXLCD(0x0C);
  5176  001DAC  0E0C               	movlw	12
  5177  001DAE  EC33  F011         	call	_WriteCmdXLCD
  5178                           
  5179                           ;lcd.c: 75: }
  5180                           
  5181                           ;lcd.c: 74: return;
  5182                           
  5183                           ;lcd.c: 73: default:
  5184                           
  5185                           ;lcd.c: 72: break;
  5186  001DB2  0012               	return	
  5187  001DB4                     l3781:
  5188  001DB4  C026  F063         	movff	_posCursorR,??_controlaCursorR
  5189  001DB8  C027  F064         	movff	_posCursorR+1,??_controlaCursorR+1
  5190                           
  5191                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  5192                           ; Switch size 1, requested type "space"
  5193                           ; Number of cases is 1, Range of values is 0 to 0
  5194                           ; switch strategies available:
  5195                           ; Name         Instructions Cycles
  5196                           ; simple_byte            4     3 (average)
  5197                           ;	Chosen strategy is simple_byte
  5198  001DBC  0100               	movlb	0	; () banked
  5199  001DBE  5164               	movf	(??_controlaCursorR+1)& (0+255),w,b
  5200  001DC0  0A00               	xorlw	0	; case 0
  5201  001DC2  A4D8               	btfss	status,2,c
  5202  001DC4  0012               	return	
  5203                           
  5204                           ; BSR set to: 0
  5205                           ; Switch size 1, requested type "space"
  5206                           ; Number of cases is 8, Range of values is 0 to 7
  5207                           ; switch strategies available:
  5208                           ; Name         Instructions Cycles
  5209                           ; simple_byte           25    13 (average)
  5210                           ;	Chosen strategy is simple_byte
  5211  001DC6  0100               	movlb	0	; () banked
  5212  001DC8  5163               	movf	??_controlaCursorR& (0+255),w,b
  5213  001DCA  0A00               	xorlw	0	; case 0
  5214  001DCC  B4D8               	btfsc	status,2,c
  5215  001DCE  D7D2               	goto	l3763
  5216  001DD0  0A01               	xorlw	1	; case 1
  5217  001DD2  B4D8               	btfsc	status,2,c
  5218  001DD4  D7D3               	goto	l3765
  5219  001DD6  0A03               	xorlw	3	; case 2
  5220  001DD8  B4D8               	btfsc	status,2,c
  5221  001DDA  D7D4               	goto	l3767
  5222  001DDC  0A01               	xorlw	1	; case 3
  5223  001DDE  B4D8               	btfsc	status,2,c
  5224  001DE0  D7D5               	goto	l3769
  5225  001DE2  0A07               	xorlw	7	; case 4
  5226  001DE4  B4D8               	btfsc	status,2,c
  5227  001DE6  D7D6               	goto	l3771
  5228  001DE8  0A01               	xorlw	1	; case 5
  5229  001DEA  B4D8               	btfsc	status,2,c
  5230  001DEC  D7D7               	goto	l3773
  5231  001DEE  0A03               	xorlw	3	; case 6
  5232  001DF0  B4D8               	btfsc	status,2,c
  5233  001DF2  D7D8               	goto	l3775
  5234  001DF4  0A01               	xorlw	1	; case 7
  5235  001DF6  A4D8               	btfss	status,2,c
  5236  001DF8  0012               	return	
  5237  001DFA  D7D8               	goto	l3777
  5238  001DFC                     __end_of_controlaCursorR:
  5239                           	opt stack 0
  5240                           tblptru	equ	0xFF8
  5241                           tblptrh	equ	0xFF7
  5242                           tblptrl	equ	0xFF6
  5243                           tablat	equ	0xFF5
  5244                           prodh	equ	0xFF4
  5245                           prodl	equ	0xFF3
  5246                           intcon	equ	0xFF2
  5247                           postinc0	equ	0xFEE
  5248                           wreg	equ	0xFE8
  5249                           postdec1	equ	0xFE5
  5250                           fsr1l	equ	0xFE1
  5251                           indf2	equ	0xFDF
  5252                           postinc2	equ	0xFDE
  5253                           postdec2	equ	0xFDD
  5254                           fsr2h	equ	0xFDA
  5255                           fsr2l	equ	0xFD9
  5256                           status	equ	0xFD8
  5257                           
  5258 ;; *************** function _ajustarT1 *****************
  5259 ;; Defined at:
  5260 ;;		line 256 in file "lcd.c"
  5261 ;; Parameters:    Size  Location     Type
  5262 ;;		None
  5263 ;; Auto vars:     Size  Location     Type
  5264 ;;		None
  5265 ;; Return value:  Size  Location     Type
  5266 ;;                  2   26[None  ] int 
  5267 ;; Registers used:
  5268 ;;		wreg, status,2, status,0
  5269 ;; Tracked objects:
  5270 ;;		On entry : 0/0
  5271 ;;		On exit  : 0/0
  5272 ;;		Unchanged: 0/0
  5273 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5274 ;;      Params:         0       0       0       0       0       0       0       0       0
  5275 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5276 ;;      Temps:          2       0       0       0       0       0       0       0       0
  5277 ;;      Totals:         2       0       0       0       0       0       0       0       0
  5278 ;;Total ram usage:        2 bytes
  5279 ;; Hardware stack levels used:    1
  5280 ;; Hardware stack levels required when called:    3
  5281 ;; This function calls:
  5282 ;;		Nothing
  5283 ;; This function is called by:
  5284 ;;		_main
  5285 ;; This function uses a non-reentrant model
  5286 ;;
  5287                           
  5288                           	psect	text26
  5289  001AA6                     __ptext26:
  5290                           	opt stack 0
  5291  001AA6                     _ajustarT1:
  5292                           	opt stack 27
  5293                           
  5294                           ;lcd.c: 257: if(PORTDbits.RD2 == 1){
  5295                           
  5296                           ;incstack = 0
  5297  001AA6  A483               	btfss	3971,2,c	;volatile
  5298  001AA8  D037               	goto	l318
  5299                           
  5300                           ;lcd.c: 258: _delay((unsigned long)((180)*(80000000/4000.0)));
  5301  001AAA  0E13               	movlw	19
  5302  001AAC  6E21               	movwf	(??_ajustarT1+1)& (0+255),c
  5303  001AAE  0E44               	movlw	68
  5304  001AB0  6E20               	movwf	??_ajustarT1& (0+255),c
  5305  001AB2  0E44               	movlw	68
  5306  001AB4                     u4627:
  5307  001AB4  2EE8               	decfsz	wreg,f,c
  5308  001AB6  D7FE               	bra	u4627
  5309  001AB8  2E20               	decfsz	??_ajustarT1& (0+255),f,c
  5310  001ABA  D7FC               	bra	u4627
  5311  001ABC  2E21               	decfsz	(??_ajustarT1+1)& (0+255),f,c
  5312  001ABE  D7FA               	bra	u4627
  5313  001AC0  D000               	nop2	
  5314                           
  5315                           ;lcd.c: 259: if(posCursorR == 1){
  5316  001AC2  0426               	decf	_posCursorR,w,c
  5317  001AC4  1027               	iorwf	_posCursorR+1,w,c
  5318  001AC6  A4D8               	btfss	status,2,c
  5319  001AC8  D002               	goto	l3091
  5320                           
  5321                           ;lcd.c: 260: re.hora++;
  5322  001ACA  4A38               	infsnz	_re+4,f,c
  5323  001ACC  2A39               	incf	_re+5,f,c
  5324  001ACE                     l3091:
  5325                           
  5326                           ;lcd.c: 261: }
  5327                           ;lcd.c: 262: if(posCursorR == 2){
  5328  001ACE  0E02               	movlw	2
  5329  001AD0  1826               	xorwf	_posCursorR,w,c
  5330  001AD2  1027               	iorwf	_posCursorR+1,w,c
  5331  001AD4  A4D8               	btfss	status,2,c
  5332  001AD6  D002               	goto	l3095
  5333                           
  5334                           ;lcd.c: 263: re.minuto++;
  5335  001AD8  4A34               	infsnz	_re,f,c
  5336  001ADA  2A35               	incf	_re+1,f,c
  5337  001ADC                     l3095:
  5338                           
  5339                           ;lcd.c: 264: }
  5340                           ;lcd.c: 265: if(posCursorR == 3){
  5341  001ADC  0E03               	movlw	3
  5342  001ADE  1826               	xorwf	_posCursorR,w,c
  5343  001AE0  1027               	iorwf	_posCursorR+1,w,c
  5344  001AE2  A4D8               	btfss	status,2,c
  5345  001AE4  D002               	goto	l3099
  5346                           
  5347                           ;lcd.c: 266: re.segundo++;
  5348  001AE6  4A36               	infsnz	_re+2,f,c
  5349  001AE8  2A37               	incf	_re+3,f,c
  5350  001AEA                     l3099:
  5351                           
  5352                           ;lcd.c: 267: }
  5353                           ;lcd.c: 268: if(posCursorR == 4){
  5354  001AEA  0E04               	movlw	4
  5355  001AEC  1826               	xorwf	_posCursorR,w,c
  5356  001AEE  1027               	iorwf	_posCursorR+1,w,c
  5357  001AF0  A4D8               	btfss	status,2,c
  5358  001AF2  D002               	goto	l3103
  5359                           
  5360                           ;lcd.c: 269: ca.dia++;
  5361  001AF4  4A3A               	infsnz	_ca,f,c
  5362  001AF6  2A3B               	incf	_ca+1,f,c
  5363  001AF8                     l3103:
  5364                           
  5365                           ;lcd.c: 270: }
  5366                           ;lcd.c: 271: if(posCursorR == 5){
  5367  001AF8  0E05               	movlw	5
  5368  001AFA  1826               	xorwf	_posCursorR,w,c
  5369  001AFC  1027               	iorwf	_posCursorR+1,w,c
  5370  001AFE  A4D8               	btfss	status,2,c
  5371  001B00  D002               	goto	l3107
  5372                           
  5373                           ;lcd.c: 272: ca.mes++;
  5374  001B02  4A3C               	infsnz	_ca+2,f,c
  5375  001B04  2A3D               	incf	_ca+3,f,c
  5376  001B06                     l3107:
  5377                           
  5378                           ;lcd.c: 273: }
  5379                           ;lcd.c: 274: if(posCursorR == 6){
  5380  001B06  0E06               	movlw	6
  5381  001B08  1826               	xorwf	_posCursorR,w,c
  5382  001B0A  1027               	iorwf	_posCursorR+1,w,c
  5383  001B0C  A4D8               	btfss	status,2,c
  5384  001B0E  D002               	goto	l325
  5385                           
  5386                           ;lcd.c: 275: ca.ano++;
  5387  001B10  4A3E               	infsnz	_ca+4,f,c
  5388  001B12  2A3F               	incf	_ca+5,f,c
  5389  001B14                     l325:
  5390  001B14  B483               	btfsc	3971,2,c	;volatile
  5391  001B16  D7FE               	goto	l325
  5392  001B18                     l318:
  5393                           
  5394                           ;lcd.c: 278: }
  5395                           ;lcd.c: 280: if(PORTDbits.RD3 == 1){
  5396  001B18  A683               	btfss	3971,3,c	;volatile
  5397  001B1A  0012               	return	
  5398                           
  5399                           ;lcd.c: 281: _delay((unsigned long)((180)*(80000000/4000.0)));
  5400  001B1C  0E13               	movlw	19
  5401  001B1E  6E21               	movwf	(??_ajustarT1+1)& (0+255),c
  5402  001B20  0E44               	movlw	68
  5403  001B22  6E20               	movwf	??_ajustarT1& (0+255),c
  5404  001B24  0E44               	movlw	68
  5405  001B26                     u4637:
  5406  001B26  2EE8               	decfsz	wreg,f,c
  5407  001B28  D7FE               	bra	u4637
  5408  001B2A  2E20               	decfsz	??_ajustarT1& (0+255),f,c
  5409  001B2C  D7FC               	bra	u4637
  5410  001B2E  2E21               	decfsz	(??_ajustarT1+1)& (0+255),f,c
  5411  001B30  D7FA               	bra	u4637
  5412  001B32  D000               	nop2	
  5413                           
  5414                           ;lcd.c: 282: if(posCursorR == 1){
  5415  001B34  0426               	decf	_posCursorR,w,c
  5416  001B36  1027               	iorwf	_posCursorR+1,w,c
  5417  001B38  A4D8               	btfss	status,2,c
  5418  001B3A  D003               	goto	l3117
  5419                           
  5420                           ;lcd.c: 283: re.hora--;
  5421  001B3C  0638               	decf	_re+4,f,c
  5422  001B3E  A0D8               	btfss	status,0,c
  5423  001B40  0639               	decf	_re+5,f,c
  5424  001B42                     l3117:
  5425                           
  5426                           ;lcd.c: 284: }
  5427                           ;lcd.c: 285: if(posCursorR == 2){
  5428  001B42  0E02               	movlw	2
  5429  001B44  1826               	xorwf	_posCursorR,w,c
  5430  001B46  1027               	iorwf	_posCursorR+1,w,c
  5431  001B48  A4D8               	btfss	status,2,c
  5432  001B4A  D003               	goto	l3121
  5433                           
  5434                           ;lcd.c: 286: re.minuto--;
  5435  001B4C  0634               	decf	_re,f,c
  5436  001B4E  A0D8               	btfss	status,0,c
  5437  001B50  0635               	decf	_re+1,f,c
  5438  001B52                     l3121:
  5439                           
  5440                           ;lcd.c: 287: }
  5441                           ;lcd.c: 288: if(posCursorR == 3){
  5442  001B52  0E03               	movlw	3
  5443  001B54  1826               	xorwf	_posCursorR,w,c
  5444  001B56  1027               	iorwf	_posCursorR+1,w,c
  5445  001B58  A4D8               	btfss	status,2,c
  5446  001B5A  D003               	goto	l3125
  5447                           
  5448                           ;lcd.c: 289: re.segundo--;
  5449  001B5C  0636               	decf	_re+2,f,c
  5450  001B5E  A0D8               	btfss	status,0,c
  5451  001B60  0637               	decf	_re+3,f,c
  5452  001B62                     l3125:
  5453                           
  5454                           ;lcd.c: 290: }
  5455                           ;lcd.c: 291: if(posCursorR == 4){
  5456  001B62  0E04               	movlw	4
  5457  001B64  1826               	xorwf	_posCursorR,w,c
  5458  001B66  1027               	iorwf	_posCursorR+1,w,c
  5459  001B68  A4D8               	btfss	status,2,c
  5460  001B6A  D003               	goto	l3129
  5461                           
  5462                           ;lcd.c: 292: ca.dia--;
  5463  001B6C  063A               	decf	_ca,f,c
  5464  001B6E  A0D8               	btfss	status,0,c
  5465  001B70  063B               	decf	_ca+1,f,c
  5466  001B72                     l3129:
  5467                           
  5468                           ;lcd.c: 293: }
  5469                           ;lcd.c: 294: if(posCursorR == 5){
  5470  001B72  0E05               	movlw	5
  5471  001B74  1826               	xorwf	_posCursorR,w,c
  5472  001B76  1027               	iorwf	_posCursorR+1,w,c
  5473  001B78  A4D8               	btfss	status,2,c
  5474  001B7A  D003               	goto	l3133
  5475                           
  5476                           ;lcd.c: 295: ca.mes--;
  5477  001B7C  063C               	decf	_ca+2,f,c
  5478  001B7E  A0D8               	btfss	status,0,c
  5479  001B80  063D               	decf	_ca+3,f,c
  5480  001B82                     l3133:
  5481                           
  5482                           ;lcd.c: 296: }
  5483                           ;lcd.c: 297: if(posCursorR == 6){
  5484  001B82  0E06               	movlw	6
  5485  001B84  1826               	xorwf	_posCursorR,w,c
  5486  001B86  1027               	iorwf	_posCursorR+1,w,c
  5487  001B88  A4D8               	btfss	status,2,c
  5488  001B8A  D003               	goto	l335
  5489                           
  5490                           ;lcd.c: 298: ca.ano--;
  5491  001B8C  063E               	decf	_ca+4,f,c
  5492  001B8E  A0D8               	btfss	status,0,c
  5493  001B90  063F               	decf	_ca+5,f,c
  5494  001B92                     l335:
  5495  001B92  A683               	btfss	3971,3,c	;volatile
  5496  001B94  0012               	return	
  5497  001B96  D7FD               	goto	l335
  5498  001B98                     __end_of_ajustarT1:
  5499                           	opt stack 0
  5500                           tblptru	equ	0xFF8
  5501                           tblptrh	equ	0xFF7
  5502                           tblptrl	equ	0xFF6
  5503                           tablat	equ	0xFF5
  5504                           prodh	equ	0xFF4
  5505                           prodl	equ	0xFF3
  5506                           intcon	equ	0xFF2
  5507                           postinc0	equ	0xFEE
  5508                           wreg	equ	0xFE8
  5509                           postdec1	equ	0xFE5
  5510                           fsr1l	equ	0xFE1
  5511                           indf2	equ	0xFDF
  5512                           postinc2	equ	0xFDE
  5513                           postdec2	equ	0xFDD
  5514                           fsr2h	equ	0xFDA
  5515                           fsr2l	equ	0xFD9
  5516                           status	equ	0xFD8
  5517                           
  5518 ;; *************** function _ajustarAlarme *****************
  5519 ;; Defined at:
  5520 ;;		line 201 in file "lcd.c"
  5521 ;; Parameters:    Size  Location     Type
  5522 ;;		None
  5523 ;; Auto vars:     Size  Location     Type
  5524 ;;		None
  5525 ;; Return value:  Size  Location     Type
  5526 ;;                  1    wreg      void 
  5527 ;; Registers used:
  5528 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5529 ;; Tracked objects:
  5530 ;;		On entry : 0/0
  5531 ;;		On exit  : 0/0
  5532 ;;		Unchanged: 0/0
  5533 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5534 ;;      Params:         0       0       0       0       0       0       0       0       0
  5535 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5536 ;;      Temps:          0       2       0       0       0       0       0       0       0
  5537 ;;      Totals:         0       2       0       0       0       0       0       0       0
  5538 ;;Total ram usage:        2 bytes
  5539 ;; Hardware stack levels used:    1
  5540 ;; Hardware stack levels required when called:    4
  5541 ;; This function calls:
  5542 ;;		_tratar_alarme
  5543 ;; This function is called by:
  5544 ;;		_main
  5545 ;; This function uses a non-reentrant model
  5546 ;;
  5547                           
  5548                           	psect	text27
  5549  001B98                     __ptext27:
  5550                           	opt stack 0
  5551  001B98                     _ajustarAlarme:
  5552                           	opt stack 26
  5553                           
  5554                           ;lcd.c: 202: if(PORTDbits.RD2 == 1){
  5555                           
  5556                           ;incstack = 0
  5557  001B98  A483               	btfss	3971,2,c	;volatile
  5558  001B9A  D023               	goto	l289
  5559                           
  5560                           ;lcd.c: 203: _delay((unsigned long)((180)*(80000000/4000.0)));
  5561  001B9C  0E13               	movlw	19
  5562  001B9E  0100               	movlb	0	; () banked
  5563  001BA0  6F63               	movwf	(??_ajustarAlarme+1)& (0+255),b
  5564  001BA2  0E44               	movlw	68
  5565  001BA4  0100               	movlb	0	; () banked
  5566  001BA6  6F62               	movwf	??_ajustarAlarme& (0+255),b
  5567  001BA8  0E44               	movlw	68
  5568  001BAA                     u4647:
  5569  001BAA  2EE8               	decfsz	wreg,f,c
  5570  001BAC  D7FE               	bra	u4647
  5571  001BAE  2F62               	decfsz	??_ajustarAlarme& (0+255),f,b
  5572  001BB0  D7FC               	bra	u4647
  5573  001BB2  2F63               	decfsz	(??_ajustarAlarme+1)& (0+255),f,b
  5574  001BB4  D7FA               	bra	u4647
  5575  001BB6  F000               	nop	
  5576                           
  5577                           ;lcd.c: 204: if(posCursor == 0){
  5578  001BB8  5028               	movf	_posCursor,w,c
  5579  001BBA  1029               	iorwf	_posCursor+1,w,c
  5580  001BBC  A4D8               	btfss	status,2,c
  5581  001BBE  D002               	goto	l4115
  5582                           
  5583                           ;lcd.c: 205: alarme.hora++;
  5584  001BC0  4A32               	infsnz	_alarme+4,f,c
  5585  001BC2  2A33               	incf	_alarme+5,f,c
  5586  001BC4                     l4115:
  5587                           
  5588                           ;lcd.c: 206: }
  5589                           ;lcd.c: 207: if(posCursor == 1){
  5590  001BC4  0428               	decf	_posCursor,w,c
  5591  001BC6  1029               	iorwf	_posCursor+1,w,c
  5592  001BC8  A4D8               	btfss	status,2,c
  5593  001BCA  D002               	goto	l4119
  5594                           
  5595                           ;lcd.c: 208: alarme.minuto++;
  5596  001BCC  4A2E               	infsnz	_alarme,f,c
  5597  001BCE  2A2F               	incf	_alarme+1,f,c
  5598  001BD0                     l4119:
  5599                           
  5600                           ;lcd.c: 209: }
  5601                           ;lcd.c: 210: if(posCursor == 2){
  5602  001BD0  0E02               	movlw	2
  5603  001BD2  1828               	xorwf	_posCursor,w,c
  5604  001BD4  1029               	iorwf	_posCursor+1,w,c
  5605  001BD6  A4D8               	btfss	status,2,c
  5606  001BD8  D002               	goto	l293
  5607                           
  5608                           ;lcd.c: 211: alarme.segundo++;
  5609  001BDA  4A30               	infsnz	_alarme+2,f,c
  5610  001BDC  2A31               	incf	_alarme+3,f,c
  5611  001BDE                     l293:
  5612  001BDE  B483               	btfsc	3971,2,c	;volatile
  5613  001BE0  D7FE               	goto	l293
  5614  001BE2                     l289:
  5615                           
  5616                           ;lcd.c: 214: }
  5617                           ;lcd.c: 216: if(PORTDbits.RD3 == 1){
  5618  001BE2  A683               	btfss	3971,3,c	;volatile
  5619  001BE4  D026               	goto	l4137
  5620                           
  5621                           ;lcd.c: 217: _delay((unsigned long)((180)*(80000000/4000.0)));
  5622  001BE6  0E13               	movlw	19
  5623  001BE8  0100               	movlb	0	; () banked
  5624  001BEA  6F63               	movwf	(??_ajustarAlarme+1)& (0+255),b
  5625  001BEC  0E44               	movlw	68
  5626  001BEE  0100               	movlb	0	; () banked
  5627  001BF0  6F62               	movwf	??_ajustarAlarme& (0+255),b
  5628  001BF2  0E44               	movlw	68
  5629  001BF4                     u4657:
  5630  001BF4  2EE8               	decfsz	wreg,f,c
  5631  001BF6  D7FE               	bra	u4657
  5632  001BF8  2F62               	decfsz	??_ajustarAlarme& (0+255),f,b
  5633  001BFA  D7FC               	bra	u4657
  5634  001BFC  2F63               	decfsz	(??_ajustarAlarme+1)& (0+255),f,b
  5635  001BFE  D7FA               	bra	u4657
  5636  001C00  F000               	nop	
  5637                           
  5638                           ;lcd.c: 218: if(posCursor == 0){
  5639  001C02  5028               	movf	_posCursor,w,c
  5640  001C04  1029               	iorwf	_posCursor+1,w,c
  5641  001C06  A4D8               	btfss	status,2,c
  5642  001C08  D003               	goto	l4129
  5643                           
  5644                           ;lcd.c: 219: alarme.hora--;
  5645  001C0A  0632               	decf	_alarme+4,f,c
  5646  001C0C  A0D8               	btfss	status,0,c
  5647  001C0E  0633               	decf	_alarme+5,f,c
  5648  001C10                     l4129:
  5649                           
  5650                           ;lcd.c: 220: }
  5651                           ;lcd.c: 221: if(posCursor == 1){
  5652  001C10  0428               	decf	_posCursor,w,c
  5653  001C12  1029               	iorwf	_posCursor+1,w,c
  5654  001C14  A4D8               	btfss	status,2,c
  5655  001C16  D003               	goto	l4133
  5656                           
  5657                           ;lcd.c: 222: alarme.minuto--;
  5658  001C18  062E               	decf	_alarme,f,c
  5659  001C1A  A0D8               	btfss	status,0,c
  5660  001C1C  062F               	decf	_alarme+1,f,c
  5661  001C1E                     l4133:
  5662                           
  5663                           ;lcd.c: 223: }
  5664                           ;lcd.c: 224: if(posCursor == 2){
  5665  001C1E  0E02               	movlw	2
  5666  001C20  1828               	xorwf	_posCursor,w,c
  5667  001C22  1029               	iorwf	_posCursor+1,w,c
  5668  001C24  A4D8               	btfss	status,2,c
  5669  001C26  D003               	goto	l300
  5670                           
  5671                           ;lcd.c: 225: alarme.segundo--;
  5672  001C28  0630               	decf	_alarme+2,f,c
  5673  001C2A  A0D8               	btfss	status,0,c
  5674  001C2C  0631               	decf	_alarme+3,f,c
  5675  001C2E                     l300:
  5676  001C2E  B683               	btfsc	3971,3,c	;volatile
  5677  001C30  D7FE               	goto	l300
  5678  001C32                     l4137:
  5679                           
  5680                           ;lcd.c: 228: }
  5681                           ;lcd.c: 229: tratar_alarme(&alarme);
  5682  001C32  0E2E               	movlw	low _alarme
  5683  001C34  6E20               	movwf	tratar_alarme@c,c
  5684  001C36  0E00               	movlw	high _alarme
  5685  001C38  6E21               	movwf	tratar_alarme@c+1,c
  5686  001C3A  ECD3  F00C         	call	_tratar_alarme	;wreg free
  5687  001C3E  0012               	return		;funcret
  5688  001C40                     __end_of_ajustarAlarme:
  5689                           	opt stack 0
  5690                           tblptru	equ	0xFF8
  5691                           tblptrh	equ	0xFF7
  5692                           tblptrl	equ	0xFF6
  5693                           tablat	equ	0xFF5
  5694                           prodh	equ	0xFF4
  5695                           prodl	equ	0xFF3
  5696                           intcon	equ	0xFF2
  5697                           postinc0	equ	0xFEE
  5698                           wreg	equ	0xFE8
  5699                           postdec1	equ	0xFE5
  5700                           fsr1l	equ	0xFE1
  5701                           indf2	equ	0xFDF
  5702                           postinc2	equ	0xFDE
  5703                           postdec2	equ	0xFDD
  5704                           fsr2h	equ	0xFDA
  5705                           fsr2l	equ	0xFD9
  5706                           status	equ	0xFD8
  5707                           
  5708 ;; *************** function _tratar_alarme *****************
  5709 ;; Defined at:
  5710 ;;		line 76 in file "relogio.c"
  5711 ;; Parameters:    Size  Location     Type
  5712 ;;  c               2   31[COMRAM] PTR struct .
  5713 ;;		 -> alarme(6), 
  5714 ;; Auto vars:     Size  Location     Type
  5715 ;;		None
  5716 ;; Return value:  Size  Location     Type
  5717 ;;                  1    wreg      void 
  5718 ;; Registers used:
  5719 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  5720 ;; Tracked objects:
  5721 ;;		On entry : 0/0
  5722 ;;		On exit  : 0/0
  5723 ;;		Unchanged: 0/0
  5724 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5725 ;;      Params:         2       0       0       0       0       0       0       0       0
  5726 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5727 ;;      Temps:          0       2       0       0       0       0       0       0       0
  5728 ;;      Totals:         2       2       0       0       0       0       0       0       0
  5729 ;;Total ram usage:        4 bytes
  5730 ;; Hardware stack levels used:    1
  5731 ;; Hardware stack levels required when called:    3
  5732 ;; This function calls:
  5733 ;;		Nothing
  5734 ;; This function is called by:
  5735 ;;		_ajustarAlarme
  5736 ;; This function uses a non-reentrant model
  5737 ;;
  5738                           
  5739                           	psect	text28
  5740  0019A6                     __ptext28:
  5741                           	opt stack 0
  5742  0019A6                     _tratar_alarme:
  5743                           	opt stack 26
  5744                           
  5745                           ;relogio.c: 77: if(c->hora > 23) c->hora = 0;
  5746                           
  5747                           ;incstack = 0
  5748  0019A6  EE20 F004          	lfsr	2,4
  5749  0019AA  5020               	movf	tratar_alarme@c,w,c
  5750  0019AC  26D9               	addwf	fsr2l,f,c
  5751  0019AE  5021               	movf	tratar_alarme@c+1,w,c
  5752  0019B0  22DA               	addwfc	fsr2h,f,c
  5753  0019B2  0E01               	movlw	1
  5754  0019B4  BEDB               	btfsc	plusw2,7,c
  5755  0019B6  D011               	goto	l402
  5756  0019B8  0E01               	movlw	1
  5757  0019BA  50DB               	movf	plusw2,w,c
  5758  0019BC  E104               	bnz	u4280
  5759  0019BE  0E18               	movlw	24
  5760  0019C0  5CDE               	subwf	postinc2,w,c
  5761  0019C2  A0D8               	btfss	status,0,c
  5762  0019C4  D00A               	goto	l402
  5763  0019C6                     u4280:
  5764  0019C6  EE20 F004          	lfsr	2,4
  5765  0019CA  5020               	movf	tratar_alarme@c,w,c
  5766  0019CC  26D9               	addwf	fsr2l,f,c
  5767  0019CE  5021               	movf	tratar_alarme@c+1,w,c
  5768  0019D0  22DA               	addwfc	fsr2h,f,c
  5769  0019D2  0E00               	movlw	0
  5770  0019D4  6EDE               	movwf	postinc2,c
  5771  0019D6  0E00               	movlw	0
  5772  0019D8  6EDD               	movwf	postdec2,c
  5773  0019DA                     l402:
  5774                           
  5775                           ;relogio.c: 79: if(c->minuto > 59) c->minuto = 0;
  5776  0019DA  C020  FFD9         	movff	tratar_alarme@c,fsr2l
  5777  0019DE  C021  FFDA         	movff	tratar_alarme@c+1,fsr2h
  5778  0019E2  0E01               	movlw	1
  5779  0019E4  BEDB               	btfsc	plusw2,7,c
  5780  0019E6  D00F               	goto	l4071
  5781  0019E8  0E01               	movlw	1
  5782  0019EA  50DB               	movf	plusw2,w,c
  5783  0019EC  E104               	bnz	u4290
  5784  0019EE  0E3C               	movlw	60
  5785  0019F0  5CDE               	subwf	postinc2,w,c
  5786  0019F2  A0D8               	btfss	status,0,c
  5787  0019F4  D008               	goto	l4071
  5788  0019F6                     u4290:
  5789  0019F6  C020  FFD9         	movff	tratar_alarme@c,fsr2l
  5790  0019FA  C021  FFDA         	movff	tratar_alarme@c+1,fsr2h
  5791  0019FE  0E00               	movlw	0
  5792  001A00  6EDE               	movwf	postinc2,c
  5793  001A02  0E00               	movlw	0
  5794  001A04  6EDD               	movwf	postdec2,c
  5795  001A06                     l4071:
  5796                           
  5797                           ;relogio.c: 81: if(c->segundo > 59) c->segundo = 0;
  5798  001A06  EE20 F002          	lfsr	2,2
  5799  001A0A  5020               	movf	tratar_alarme@c,w,c
  5800  001A0C  26D9               	addwf	fsr2l,f,c
  5801  001A0E  5021               	movf	tratar_alarme@c+1,w,c
  5802  001A10  22DA               	addwfc	fsr2h,f,c
  5803  001A12  0E01               	movlw	1
  5804  001A14  BEDB               	btfsc	plusw2,7,c
  5805  001A16  D011               	goto	l404
  5806  001A18  0E01               	movlw	1
  5807  001A1A  50DB               	movf	plusw2,w,c
  5808  001A1C  E104               	bnz	u4300
  5809  001A1E  0E3C               	movlw	60
  5810  001A20  5CDE               	subwf	postinc2,w,c
  5811  001A22  A0D8               	btfss	status,0,c
  5812  001A24  D00A               	goto	l404
  5813  001A26                     u4300:
  5814  001A26  EE20 F002          	lfsr	2,2
  5815  001A2A  5020               	movf	tratar_alarme@c,w,c
  5816  001A2C  26D9               	addwf	fsr2l,f,c
  5817  001A2E  5021               	movf	tratar_alarme@c+1,w,c
  5818  001A30  22DA               	addwfc	fsr2h,f,c
  5819  001A32  0E00               	movlw	0
  5820  001A34  6EDE               	movwf	postinc2,c
  5821  001A36  0E00               	movlw	0
  5822  001A38  6EDD               	movwf	postdec2,c
  5823  001A3A                     l404:
  5824                           
  5825                           ;relogio.c: 83: if(c->hora < 0) c->hora = 23;
  5826  001A3A  EE20 F004          	lfsr	2,4
  5827  001A3E  5020               	movf	tratar_alarme@c,w,c
  5828  001A40  26D9               	addwf	fsr2l,f,c
  5829  001A42  5021               	movf	tratar_alarme@c+1,w,c
  5830  001A44  22DA               	addwfc	fsr2h,f,c
  5831  001A46  0E01               	movlw	1
  5832  001A48  AEDB               	btfss	plusw2,7,c
  5833  001A4A  D00A               	goto	l405
  5834  001A4C  EE20 F004          	lfsr	2,4
  5835  001A50  5020               	movf	tratar_alarme@c,w,c
  5836  001A52  26D9               	addwf	fsr2l,f,c
  5837  001A54  5021               	movf	tratar_alarme@c+1,w,c
  5838  001A56  22DA               	addwfc	fsr2h,f,c
  5839  001A58  0E17               	movlw	23
  5840  001A5A  6EDE               	movwf	postinc2,c
  5841  001A5C  0E00               	movlw	0
  5842  001A5E  6EDD               	movwf	postdec2,c
  5843  001A60                     l405:
  5844                           
  5845                           ;relogio.c: 85: if(c->minuto < 0) c->minuto = 59;
  5846  001A60  C020  FFD9         	movff	tratar_alarme@c,fsr2l
  5847  001A64  C021  FFDA         	movff	tratar_alarme@c+1,fsr2h
  5848  001A68  0E01               	movlw	1
  5849  001A6A  AEDB               	btfss	plusw2,7,c
  5850  001A6C  D008               	goto	l4079
  5851  001A6E  C020  FFD9         	movff	tratar_alarme@c,fsr2l
  5852  001A72  C021  FFDA         	movff	tratar_alarme@c+1,fsr2h
  5853  001A76  0E3B               	movlw	59
  5854  001A78  6EDE               	movwf	postinc2,c
  5855  001A7A  0E00               	movlw	0
  5856  001A7C  6EDD               	movwf	postdec2,c
  5857  001A7E                     l4079:
  5858                           
  5859                           ;relogio.c: 87: if(c->segundo < 0) c->segundo = 59;
  5860  001A7E  EE20 F002          	lfsr	2,2
  5861  001A82  5020               	movf	tratar_alarme@c,w,c
  5862  001A84  26D9               	addwf	fsr2l,f,c
  5863  001A86  5021               	movf	tratar_alarme@c+1,w,c
  5864  001A88  22DA               	addwfc	fsr2h,f,c
  5865  001A8A  0E01               	movlw	1
  5866  001A8C  AEDB               	btfss	plusw2,7,c
  5867  001A8E  0012               	return	
  5868  001A90  EE20 F002          	lfsr	2,2
  5869  001A94  5020               	movf	tratar_alarme@c,w,c
  5870  001A96  26D9               	addwf	fsr2l,f,c
  5871  001A98  5021               	movf	tratar_alarme@c+1,w,c
  5872  001A9A  22DA               	addwfc	fsr2h,f,c
  5873  001A9C  0E3B               	movlw	59
  5874  001A9E  6EDE               	movwf	postinc2,c
  5875  001AA0  0E00               	movlw	0
  5876  001AA2  6EDD               	movwf	postdec2,c
  5877  001AA4  0012               	return	
  5878  001AA6                     __end_of_tratar_alarme:
  5879                           	opt stack 0
  5880                           tblptru	equ	0xFF8
  5881                           tblptrh	equ	0xFF7
  5882                           tblptrl	equ	0xFF6
  5883                           tablat	equ	0xFF5
  5884                           prodh	equ	0xFF4
  5885                           prodl	equ	0xFF3
  5886                           intcon	equ	0xFF2
  5887                           postinc0	equ	0xFEE
  5888                           wreg	equ	0xFE8
  5889                           postdec1	equ	0xFE5
  5890                           fsr1l	equ	0xFE1
  5891                           indf2	equ	0xFDF
  5892                           postinc2	equ	0xFDE
  5893                           postdec2	equ	0xFDD
  5894                           plusw2	equ	0xFDB
  5895                           fsr2h	equ	0xFDA
  5896                           fsr2l	equ	0xFD9
  5897                           status	equ	0xFD8
  5898                           
  5899 ;; *************** function _LCD_Clear *****************
  5900 ;; Defined at:
  5901 ;;		line 25 in file "lcd.c"
  5902 ;; Parameters:    Size  Location     Type
  5903 ;;		None
  5904 ;; Auto vars:     Size  Location     Type
  5905 ;;		None
  5906 ;; Return value:  Size  Location     Type
  5907 ;;                  1    wreg      void 
  5908 ;; Registers used:
  5909 ;;		wreg, status,2, status,0, cstack
  5910 ;; Tracked objects:
  5911 ;;		On entry : 0/0
  5912 ;;		On exit  : 0/0
  5913 ;;		Unchanged: 0/0
  5914 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5915 ;;      Params:         0       0       0       0       0       0       0       0       0
  5916 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5917 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5918 ;;      Totals:         0       0       0       0       0       0       0       0       0
  5919 ;;Total ram usage:        0 bytes
  5920 ;; Hardware stack levels used:    1
  5921 ;; Hardware stack levels required when called:    6
  5922 ;; This function calls:
  5923 ;;		_BusyXLCD
  5924 ;;		_WriteCmdXLCD
  5925 ;; This function is called by:
  5926 ;;		_main
  5927 ;; This function uses a non-reentrant model
  5928 ;;
  5929                           
  5930                           	psect	text29
  5931  002490                     __ptext29:
  5932                           	opt stack 0
  5933  002490                     _LCD_Clear:
  5934                           	opt stack 24
  5935  002490                     l4103:
  5936  002490  EC6F  F011         	call	_BusyXLCD	;wreg free
  5937  002494  0900               	iorlw	0
  5938  002496  A4D8               	btfss	status,2,c
  5939  002498  D7FB               	goto	l4103
  5940                           
  5941                           ;lcd.c: 27: WriteCmdXLCD(0x01);
  5942  00249A  0E01               	movlw	1
  5943  00249C  EC33  F011         	call	_WriteCmdXLCD
  5944  0024A0  0012               	return		;funcret
  5945  0024A2                     __end_of_LCD_Clear:
  5946                           	opt stack 0
  5947                           tblptru	equ	0xFF8
  5948                           tblptrh	equ	0xFF7
  5949                           tblptrl	equ	0xFF6
  5950                           tablat	equ	0xFF5
  5951                           prodh	equ	0xFF4
  5952                           prodl	equ	0xFF3
  5953                           intcon	equ	0xFF2
  5954                           postinc0	equ	0xFEE
  5955                           wreg	equ	0xFE8
  5956                           postdec1	equ	0xFE5
  5957                           fsr1l	equ	0xFE1
  5958                           indf2	equ	0xFDF
  5959                           postinc2	equ	0xFDE
  5960                           postdec2	equ	0xFDD
  5961                           plusw2	equ	0xFDB
  5962                           fsr2h	equ	0xFDA
  5963                           fsr2l	equ	0xFD9
  5964                           status	equ	0xFD8
  5965                           
  5966 ;; *************** function _InitXLCD *****************
  5967 ;; Defined at:
  5968 ;;		line 18 in file "lcd.c"
  5969 ;; Parameters:    Size  Location     Type
  5970 ;;		None
  5971 ;; Auto vars:     Size  Location     Type
  5972 ;;		None
  5973 ;; Return value:  Size  Location     Type
  5974 ;;                  2   12[None  ] int 
  5975 ;; Registers used:
  5976 ;;		wreg, status,2, status,0, cstack
  5977 ;; Tracked objects:
  5978 ;;		On entry : 0/0
  5979 ;;		On exit  : 0/0
  5980 ;;		Unchanged: 0/0
  5981 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5982 ;;      Params:         0       0       0       0       0       0       0       0       0
  5983 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5984 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5985 ;;      Totals:         0       0       0       0       0       0       0       0       0
  5986 ;;Total ram usage:        0 bytes
  5987 ;; Hardware stack levels used:    1
  5988 ;; Hardware stack levels required when called:    7
  5989 ;; This function calls:
  5990 ;;		_BusyXLCD
  5991 ;;		_OpenXLCD
  5992 ;; This function is called by:
  5993 ;;		_main
  5994 ;; This function uses a non-reentrant model
  5995 ;;
  5996                           
  5997                           	psect	text30
  5998  0024A2                     __ptext30:
  5999                           	opt stack 0
  6000  0024A2                     _InitXLCD:
  6001                           	opt stack 23
  6002                           
  6003                           ;lcd.c: 19: OpenXLCD(0b00101100 & 0b00111000);
  6004                           
  6005                           ;incstack = 0
  6006  0024A2  0E28               	movlw	40
  6007  0024A4  EC20  F00E         	call	_OpenXLCD
  6008  0024A8                     l4085:
  6009  0024A8  EC6F  F011         	call	_BusyXLCD	;wreg free
  6010  0024AC  0900               	iorlw	0
  6011  0024AE  B4D8               	btfsc	status,2,c
  6012  0024B0  0012               	return	
  6013  0024B2  D7FA               	goto	l4085
  6014  0024B4                     __end_of_InitXLCD:
  6015                           	opt stack 0
  6016                           tblptru	equ	0xFF8
  6017                           tblptrh	equ	0xFF7
  6018                           tblptrl	equ	0xFF6
  6019                           tablat	equ	0xFF5
  6020                           prodh	equ	0xFF4
  6021                           prodl	equ	0xFF3
  6022                           intcon	equ	0xFF2
  6023                           postinc0	equ	0xFEE
  6024                           wreg	equ	0xFE8
  6025                           postdec1	equ	0xFE5
  6026                           fsr1l	equ	0xFE1
  6027                           indf2	equ	0xFDF
  6028                           postinc2	equ	0xFDE
  6029                           postdec2	equ	0xFDD
  6030                           plusw2	equ	0xFDB
  6031                           fsr2h	equ	0xFDA
  6032                           fsr2l	equ	0xFD9
  6033                           status	equ	0xFD8
  6034                           
  6035 ;; *************** function _OpenXLCD *****************
  6036 ;; Defined at:
  6037 ;;		line 19 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\pic18\plib\XLCD\openxlcd.c"
  6038 ;; Parameters:    Size  Location     Type
  6039 ;;  lcdtype         1    wreg     unsigned char 
  6040 ;; Auto vars:     Size  Location     Type
  6041 ;;  lcdtype         1    3[BANK0 ] unsigned char 
  6042 ;; Return value:  Size  Location     Type
  6043 ;;                  1    wreg      void 
  6044 ;; Registers used:
  6045 ;;		wreg, status,2, status,0, cstack
  6046 ;; Tracked objects:
  6047 ;;		On entry : 0/0
  6048 ;;		On exit  : 0/0
  6049 ;;		Unchanged: 0/0
  6050 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6051 ;;      Params:         0       0       0       0       0       0       0       0       0
  6052 ;;      Locals:         0       1       0       0       0       0       0       0       0
  6053 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6054 ;;      Totals:         0       1       0       0       0       0       0       0       0
  6055 ;;Total ram usage:        1 bytes
  6056 ;; Hardware stack levels used:    1
  6057 ;; Hardware stack levels required when called:    6
  6058 ;; This function calls:
  6059 ;;		_BusyXLCD
  6060 ;;		_Delay10KTCYx
  6061 ;;		_DelayPORXLCD
  6062 ;;		_SetDDRamAddr
  6063 ;;		_WriteCmdXLCD
  6064 ;; This function is called by:
  6065 ;;		_InitXLCD
  6066 ;; This function uses a non-reentrant model
  6067 ;;
  6068                           
  6069                           	psect	text31
  6070  001C40                     __ptext31:
  6071                           	opt stack 0
  6072  001C40                     _OpenXLCD:
  6073                           	opt stack 23
  6074                           
  6075                           ;incstack = 0
  6076                           ;OpenXLCD@lcdtype stored from wreg
  6077  001C40  0100               	movlb	0	; () banked
  6078  001C42  6F63               	movwf	OpenXLCD@lcdtype& (0+255),b
  6079  001C44  0EF0               	movlw	240
  6080  001C46  1681               	andwf	3969,f,c	;volatile
  6081  001C48  0EF0               	movlw	240
  6082  001C4A  1693               	andwf	3987,f,c	;volatile
  6083  001C4C  9C93               	bcf	3987,6,c	;volatile
  6084  001C4E  9A93               	bcf	3987,5,c	;volatile
  6085  001C50  9893               	bcf	3987,4,c	;volatile
  6086  001C52  9C8A               	bcf	3978,6,c	;volatile
  6087  001C54  9A8A               	bcf	3978,5,c	;volatile
  6088  001C56  988A               	bcf	3978,4,c	;volatile
  6089  001C58  EC75  F012         	call	_DelayPORXLCD	;wreg free
  6090  001C5C  0E30               	movlw	48
  6091  001C5E  EC33  F011         	call	_WriteCmdXLCD
  6092  001C62  0E05               	movlw	5
  6093  001C64  EC3D  F012         	call	_Delay10KTCYx
  6094  001C68  0E30               	movlw	48
  6095  001C6A  EC33  F011         	call	_WriteCmdXLCD
  6096  001C6E  0E01               	movlw	1
  6097  001C70  EC3D  F012         	call	_Delay10KTCYx
  6098  001C74  0E32               	movlw	50
  6099  001C76  EC33  F011         	call	_WriteCmdXLCD
  6100  001C7A                     l4017:
  6101  001C7A  EC6F  F011         	call	_BusyXLCD	;wreg free
  6102  001C7E  0900               	iorlw	0
  6103  001C80  A4D8               	btfss	status,2,c
  6104  001C82  D7FB               	goto	l4017
  6105  001C84                     l4019:
  6106  001C84  EC6F  F011         	call	_BusyXLCD	;wreg free
  6107  001C88  0900               	iorlw	0
  6108  001C8A  A4D8               	btfss	status,2,c
  6109  001C8C  D7FB               	goto	l4019
  6110  001C8E  0100               	movlb	0	; () banked
  6111  001C90  5163               	movf	OpenXLCD@lcdtype& (0+255),w,b
  6112  001C92  EC33  F011         	call	_WriteCmdXLCD
  6113  001C96                     l4023:
  6114  001C96  EC6F  F011         	call	_BusyXLCD	;wreg free
  6115  001C9A  0900               	iorlw	0
  6116  001C9C  A4D8               	btfss	status,2,c
  6117  001C9E  D7FB               	goto	l4023
  6118  001CA0  0E08               	movlw	8
  6119  001CA2  EC33  F011         	call	_WriteCmdXLCD
  6120  001CA6                     l4027:
  6121  001CA6  EC6F  F011         	call	_BusyXLCD	;wreg free
  6122  001CAA  0900               	iorlw	0
  6123  001CAC  A4D8               	btfss	status,2,c
  6124  001CAE  D7FB               	goto	l4027
  6125  001CB0  0E0F               	movlw	15
  6126  001CB2  EC33  F011         	call	_WriteCmdXLCD
  6127  001CB6                     l4031:
  6128  001CB6  EC6F  F011         	call	_BusyXLCD	;wreg free
  6129  001CBA  0900               	iorlw	0
  6130  001CBC  A4D8               	btfss	status,2,c
  6131  001CBE  D7FB               	goto	l4031
  6132  001CC0  0E01               	movlw	1
  6133  001CC2  EC33  F011         	call	_WriteCmdXLCD
  6134  001CC6                     l4035:
  6135  001CC6  EC6F  F011         	call	_BusyXLCD	;wreg free
  6136  001CCA  0900               	iorlw	0
  6137  001CCC  A4D8               	btfss	status,2,c
  6138  001CCE  D7FB               	goto	l4035
  6139  001CD0  0E04               	movlw	4
  6140  001CD2  EC33  F011         	call	_WriteCmdXLCD
  6141  001CD6                     l4039:
  6142  001CD6  EC6F  F011         	call	_BusyXLCD	;wreg free
  6143  001CDA  0900               	iorlw	0
  6144  001CDC  A4D8               	btfss	status,2,c
  6145  001CDE  D7FB               	goto	l4039
  6146  001CE0  0E80               	movlw	128
  6147  001CE2  ECAE  F00F         	call	_SetDDRamAddr
  6148  001CE6  0012               	return	
  6149  001CE8                     __end_of_OpenXLCD:
  6150                           	opt stack 0
  6151                           tblptru	equ	0xFF8
  6152                           tblptrh	equ	0xFF7
  6153                           tblptrl	equ	0xFF6
  6154                           tablat	equ	0xFF5
  6155                           prodh	equ	0xFF4
  6156                           prodl	equ	0xFF3
  6157                           intcon	equ	0xFF2
  6158                           postinc0	equ	0xFEE
  6159                           wreg	equ	0xFE8
  6160                           postdec1	equ	0xFE5
  6161                           fsr1l	equ	0xFE1
  6162                           indf2	equ	0xFDF
  6163                           postinc2	equ	0xFDE
  6164                           postdec2	equ	0xFDD
  6165                           plusw2	equ	0xFDB
  6166                           fsr2h	equ	0xFDA
  6167                           fsr2l	equ	0xFD9
  6168                           status	equ	0xFD8
  6169                           
  6170 ;; *************** function _WriteCmdXLCD *****************
  6171 ;; Defined at:
  6172 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\pic18\plib\XLCD\wcmdxlcd.c"
  6173 ;; Parameters:    Size  Location     Type
  6174 ;;  cmd             1    wreg     unsigned char 
  6175 ;; Auto vars:     Size  Location     Type
  6176 ;;  cmd             1   32[COMRAM] unsigned char 
  6177 ;; Return value:  Size  Location     Type
  6178 ;;                  1    wreg      void 
  6179 ;; Registers used:
  6180 ;;		wreg, status,2, status,0, cstack
  6181 ;; Tracked objects:
  6182 ;;		On entry : 0/0
  6183 ;;		On exit  : 0/0
  6184 ;;		Unchanged: 0/0
  6185 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6186 ;;      Params:         0       0       0       0       0       0       0       0       0
  6187 ;;      Locals:         1       0       0       0       0       0       0       0       0
  6188 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6189 ;;      Totals:         1       0       0       0       0       0       0       0       0
  6190 ;;Total ram usage:        1 bytes
  6191 ;; Hardware stack levels used:    1
  6192 ;; Hardware stack levels required when called:    5
  6193 ;; This function calls:
  6194 ;;		_DelayFor18TCY
  6195 ;; This function is called by:
  6196 ;;		_LCD_Clear
  6197 ;;		_controlaCursorR
  6198 ;;		_inicializaTela1
  6199 ;;		_inicializaTela2
  6200 ;;		_despertarAlarme
  6201 ;;		_OpenXLCD
  6202 ;; This function uses a non-reentrant model
  6203 ;;
  6204                           
  6205                           	psect	text32
  6206  002266                     __ptext32:
  6207                           	opt stack 0
  6208  002266                     _WriteCmdXLCD:
  6209                           	opt stack 23
  6210                           
  6211                           ;incstack = 0
  6212                           ;WriteCmdXLCD@cmd stored from wreg
  6213  002266  6E21               	movwf	WriteCmdXLCD@cmd,c
  6214  002268  0EF0               	movlw	240
  6215  00226A  1693               	andwf	3987,f,c	;volatile
  6216  00226C  0EF0               	movlw	240
  6217  00226E  1681               	andwf	3969,f,c	;volatile
  6218  002270  3821               	swapf	WriteCmdXLCD@cmd,w,c
  6219  002272  0B0F               	andlw	15
  6220  002274  0B0F               	andlw	15
  6221  002276  1281               	iorwf	3969,f,c	;volatile
  6222  002278  9C8A               	bcf	3978,6,c	;volatile
  6223  00227A  9A8A               	bcf	3978,5,c	;volatile
  6224  00227C  EC79  F012         	call	_DelayFor18TCY	;wreg free
  6225  002280  888A               	bsf	3978,4,c	;volatile
  6226  002282  EC79  F012         	call	_DelayFor18TCY	;wreg free
  6227  002286  988A               	bcf	3978,4,c	;volatile
  6228  002288  0EF0               	movlw	240
  6229  00228A  1681               	andwf	3969,f,c	;volatile
  6230  00228C  5021               	movf	WriteCmdXLCD@cmd,w,c
  6231  00228E  0B0F               	andlw	15
  6232  002290  1281               	iorwf	3969,f,c	;volatile
  6233  002292  EC79  F012         	call	_DelayFor18TCY	;wreg free
  6234  002296  888A               	bsf	3978,4,c	;volatile
  6235  002298  EC79  F012         	call	_DelayFor18TCY	;wreg free
  6236  00229C  988A               	bcf	3978,4,c	;volatile
  6237  00229E  0E0F               	movlw	15
  6238  0022A0  1293               	iorwf	3987,f,c	;volatile
  6239  0022A2  0012               	return	
  6240  0022A4                     __end_of_WriteCmdXLCD:
  6241                           	opt stack 0
  6242                           tblptru	equ	0xFF8
  6243                           tblptrh	equ	0xFF7
  6244                           tblptrl	equ	0xFF6
  6245                           tablat	equ	0xFF5
  6246                           prodh	equ	0xFF4
  6247                           prodl	equ	0xFF3
  6248                           intcon	equ	0xFF2
  6249                           postinc0	equ	0xFEE
  6250                           wreg	equ	0xFE8
  6251                           postdec1	equ	0xFE5
  6252                           fsr1l	equ	0xFE1
  6253                           indf2	equ	0xFDF
  6254                           postinc2	equ	0xFDE
  6255                           postdec2	equ	0xFDD
  6256                           plusw2	equ	0xFDB
  6257                           fsr2h	equ	0xFDA
  6258                           fsr2l	equ	0xFD9
  6259                           status	equ	0xFD8
  6260                           
  6261 ;; *************** function _SetDDRamAddr *****************
  6262 ;; Defined at:
  6263 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\pic18\plib\XLCD\setddram.c"
  6264 ;; Parameters:    Size  Location     Type
  6265 ;;  DDaddr          1    wreg     unsigned char 
  6266 ;; Auto vars:     Size  Location     Type
  6267 ;;  DDaddr          1   32[COMRAM] unsigned char 
  6268 ;; Return value:  Size  Location     Type
  6269 ;;                  1    wreg      void 
  6270 ;; Registers used:
  6271 ;;		wreg, status,2, status,0, cstack
  6272 ;; Tracked objects:
  6273 ;;		On entry : 0/0
  6274 ;;		On exit  : 0/0
  6275 ;;		Unchanged: 0/0
  6276 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6277 ;;      Params:         0       0       0       0       0       0       0       0       0
  6278 ;;      Locals:         1       0       0       0       0       0       0       0       0
  6279 ;;      Temps:          0       3       0       0       0       0       0       0       0
  6280 ;;      Totals:         1       3       0       0       0       0       0       0       0
  6281 ;;Total ram usage:        4 bytes
  6282 ;; Hardware stack levels used:    1
  6283 ;; Hardware stack levels required when called:    5
  6284 ;; This function calls:
  6285 ;;		_DelayFor18TCY
  6286 ;; This function is called by:
  6287 ;;		_controlaCursor
  6288 ;;		_controlaCursorR
  6289 ;;		_inicializaTela1
  6290 ;;		_inicializaTela2
  6291 ;;		_despertarAlarme
  6292 ;;		_OpenXLCD
  6293 ;; This function uses a non-reentrant model
  6294 ;;
  6295                           
  6296                           	psect	text33
  6297  001F5C                     __ptext33:
  6298                           	opt stack 0
  6299  001F5C                     _SetDDRamAddr:
  6300                           	opt stack 23
  6301                           
  6302                           ;incstack = 0
  6303                           ;SetDDRamAddr@DDaddr stored from wreg
  6304  001F5C  6E21               	movwf	SetDDRamAddr@DDaddr,c
  6305  001F5E  0EF0               	movlw	240
  6306  001F60  1693               	andwf	3987,f,c	;volatile
  6307  001F62  0EF0               	movlw	240
  6308  001F64  1681               	andwf	3969,f,c	;volatile
  6309  001F66  5021               	movf	SetDDRamAddr@DDaddr,w,c
  6310  001F68  0100               	movlb	0	; () banked
  6311  001F6A  6F60               	movwf	??_SetDDRamAddr& (0+255),b
  6312  001F6C  6B61               	clrf	(??_SetDDRamAddr+1)& (0+255),b
  6313  001F6E  0100               	movlb	0	; () banked
  6314  001F70  8F60               	bsf	??_SetDDRamAddr& (0+255),7,b
  6315  001F72  0E04               	movlw	4
  6316  001F74  0100               	movlb	0	; () banked
  6317  001F76  6F62               	movwf	(??_SetDDRamAddr+2)& (0+255),b
  6318  001F78                     u3495:
  6319  001F78  0100               	movlb	0	; () banked
  6320  001F7A  3561               	rlcf	(??_SetDDRamAddr+1)& (0+255),w,b
  6321  001F7C  3361               	rrcf	(??_SetDDRamAddr+1)& (0+255),f,b
  6322  001F7E  3360               	rrcf	??_SetDDRamAddr& (0+255),f,b
  6323  001F80  0100               	movlb	0	; () banked
  6324  001F82  2F62               	decfsz	(??_SetDDRamAddr+2)& (0+255),f,b
  6325  001F84  D7F9               	goto	u3495
  6326  001F86  0100               	movlb	0	; () banked
  6327  001F88  5160               	movf	??_SetDDRamAddr& (0+255),w,b
  6328  001F8A  0B0F               	andlw	15
  6329  001F8C  1281               	iorwf	3969,f,c	;volatile
  6330                           
  6331                           ; BSR set to: 0
  6332  001F8E  9C8A               	bcf	3978,6,c	;volatile
  6333                           
  6334                           ; BSR set to: 0
  6335  001F90  9A8A               	bcf	3978,5,c	;volatile
  6336                           
  6337                           ; BSR set to: 0
  6338  001F92  EC79  F012         	call	_DelayFor18TCY	;wreg free
  6339  001F96  888A               	bsf	3978,4,c	;volatile
  6340  001F98  EC79  F012         	call	_DelayFor18TCY	;wreg free
  6341  001F9C  988A               	bcf	3978,4,c	;volatile
  6342  001F9E  0EF0               	movlw	240
  6343  001FA0  1681               	andwf	3969,f,c	;volatile
  6344  001FA2  5021               	movf	SetDDRamAddr@DDaddr,w,c
  6345  001FA4  0B0F               	andlw	15
  6346  001FA6  1281               	iorwf	3969,f,c	;volatile
  6347  001FA8  EC79  F012         	call	_DelayFor18TCY	;wreg free
  6348  001FAC  888A               	bsf	3978,4,c	;volatile
  6349  001FAE  EC79  F012         	call	_DelayFor18TCY	;wreg free
  6350  001FB2  988A               	bcf	3978,4,c	;volatile
  6351  001FB4  0E0F               	movlw	15
  6352  001FB6  1293               	iorwf	3987,f,c	;volatile
  6353  001FB8  0012               	return	
  6354  001FBA                     __end_of_SetDDRamAddr:
  6355                           	opt stack 0
  6356                           tblptru	equ	0xFF8
  6357                           tblptrh	equ	0xFF7
  6358                           tblptrl	equ	0xFF6
  6359                           tablat	equ	0xFF5
  6360                           prodh	equ	0xFF4
  6361                           prodl	equ	0xFF3
  6362                           intcon	equ	0xFF2
  6363                           postinc0	equ	0xFEE
  6364                           wreg	equ	0xFE8
  6365                           postdec1	equ	0xFE5
  6366                           fsr1l	equ	0xFE1
  6367                           indf2	equ	0xFDF
  6368                           postinc2	equ	0xFDE
  6369                           postdec2	equ	0xFDD
  6370                           plusw2	equ	0xFDB
  6371                           fsr2h	equ	0xFDA
  6372                           fsr2l	equ	0xFD9
  6373                           status	equ	0xFD8
  6374                           
  6375 ;; *************** function _DelayPORXLCD *****************
  6376 ;; Defined at:
  6377 ;;		line 8 in file "lcd.c"
  6378 ;; Parameters:    Size  Location     Type
  6379 ;;		None
  6380 ;; Auto vars:     Size  Location     Type
  6381 ;;		None
  6382 ;; Return value:  Size  Location     Type
  6383 ;;                  1    wreg      void 
  6384 ;; Registers used:
  6385 ;;		wreg, cstack
  6386 ;; Tracked objects:
  6387 ;;		On entry : 0/0
  6388 ;;		On exit  : 0/0
  6389 ;;		Unchanged: 0/0
  6390 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6391 ;;      Params:         0       0       0       0       0       0       0       0       0
  6392 ;;      Locals:         0       0       0       0       0       0       0       0       0
  6393 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6394 ;;      Totals:         0       0       0       0       0       0       0       0       0
  6395 ;;Total ram usage:        0 bytes
  6396 ;; Hardware stack levels used:    1
  6397 ;; Hardware stack levels required when called:    4
  6398 ;; This function calls:
  6399 ;;		_Delay1KTCYx
  6400 ;; This function is called by:
  6401 ;;		_OpenXLCD
  6402 ;; This function uses a non-reentrant model
  6403 ;;
  6404                           
  6405                           	psect	text34
  6406  0024EA                     __ptext34:
  6407                           	opt stack 0
  6408  0024EA                     _DelayPORXLCD:
  6409                           	opt stack 24
  6410                           
  6411                           ;lcd.c: 9: Delay1KTCYx(180);
  6412                           
  6413                           ;incstack = 0
  6414  0024EA  0EB4               	movlw	180
  6415  0024EC  EC5A  F012         	call	_Delay1KTCYx
  6416  0024F0  0012               	return	
  6417  0024F2                     __end_of_DelayPORXLCD:
  6418                           	opt stack 0
  6419                           tblptru	equ	0xFF8
  6420                           tblptrh	equ	0xFF7
  6421                           tblptrl	equ	0xFF6
  6422                           tablat	equ	0xFF5
  6423                           prodh	equ	0xFF4
  6424                           prodl	equ	0xFF3
  6425                           intcon	equ	0xFF2
  6426                           postinc0	equ	0xFEE
  6427                           wreg	equ	0xFE8
  6428                           postdec1	equ	0xFE5
  6429                           fsr1l	equ	0xFE1
  6430                           indf2	equ	0xFDF
  6431                           postinc2	equ	0xFDE
  6432                           postdec2	equ	0xFDD
  6433                           plusw2	equ	0xFDB
  6434                           fsr2h	equ	0xFDA
  6435                           fsr2l	equ	0xFD9
  6436                           status	equ	0xFD8
  6437                           
  6438 ;; *************** function _Delay1KTCYx *****************
  6439 ;; Defined at:
  6440 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\pic18\d1ktcyx.c"
  6441 ;; Parameters:    Size  Location     Type
  6442 ;;  unit            1    wreg     unsigned char 
  6443 ;; Auto vars:     Size  Location     Type
  6444 ;;  unit            1   31[COMRAM] unsigned char 
  6445 ;; Return value:  Size  Location     Type
  6446 ;;                  1    wreg      void 
  6447 ;; Registers used:
  6448 ;;		wreg
  6449 ;; Tracked objects:
  6450 ;;		On entry : 0/0
  6451 ;;		On exit  : 0/0
  6452 ;;		Unchanged: 0/0
  6453 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6454 ;;      Params:         0       0       0       0       0       0       0       0       0
  6455 ;;      Locals:         1       0       0       0       0       0       0       0       0
  6456 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6457 ;;      Totals:         1       0       0       0       0       0       0       0       0
  6458 ;;Total ram usage:        1 bytes
  6459 ;; Hardware stack levels used:    1
  6460 ;; Hardware stack levels required when called:    3
  6461 ;; This function calls:
  6462 ;;		Nothing
  6463 ;; This function is called by:
  6464 ;;		_DelayPORXLCD
  6465 ;;		_DelayXLCD
  6466 ;; This function uses a non-reentrant model
  6467 ;;
  6468                           
  6469                           	psect	text35
  6470  0024B4                     __ptext35:
  6471                           	opt stack 0
  6472  0024B4                     _Delay1KTCYx:
  6473                           	opt stack 24
  6474                           
  6475                           ;incstack = 0
  6476                           ;Delay1KTCYx@unit stored from wreg
  6477  0024B4  6E20               	movwf	Delay1KTCYx@unit,c
  6478  0024B6  0EC8               	movlw	200
  6479  0024B8                     u4667:
  6480  0024B8  D000               	nop2	
  6481  0024BA  2EE8               	decfsz	wreg,f,c
  6482  0024BC  D7FD               	bra	u4667
  6483  0024BE  2E20               	decfsz	Delay1KTCYx@unit,f,c
  6484  0024C0  D7FA               	goto	l3569
  6485  0024C2  0012               	return	
  6486  0024C4                     __end_of_Delay1KTCYx:
  6487                           	opt stack 0
  6488                           tblptru	equ	0xFF8
  6489                           tblptrh	equ	0xFF7
  6490                           tblptrl	equ	0xFF6
  6491                           tablat	equ	0xFF5
  6492                           prodh	equ	0xFF4
  6493                           prodl	equ	0xFF3
  6494                           intcon	equ	0xFF2
  6495                           postinc0	equ	0xFEE
  6496                           wreg	equ	0xFE8
  6497                           postdec1	equ	0xFE5
  6498                           fsr1l	equ	0xFE1
  6499                           indf2	equ	0xFDF
  6500                           postinc2	equ	0xFDE
  6501                           postdec2	equ	0xFDD
  6502                           plusw2	equ	0xFDB
  6503                           fsr2h	equ	0xFDA
  6504                           fsr2l	equ	0xFD9
  6505                           status	equ	0xFD8
  6506                           
  6507 ;; *************** function _Delay10KTCYx *****************
  6508 ;; Defined at:
  6509 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\pic18\d10ktcyx.c"
  6510 ;; Parameters:    Size  Location     Type
  6511 ;;  unit            1    wreg     unsigned char 
  6512 ;; Auto vars:     Size  Location     Type
  6513 ;;  unit            1   32[COMRAM] unsigned char 
  6514 ;; Return value:  Size  Location     Type
  6515 ;;                  1    wreg      void 
  6516 ;; Registers used:
  6517 ;;		wreg
  6518 ;; Tracked objects:
  6519 ;;		On entry : 0/0
  6520 ;;		On exit  : 0/0
  6521 ;;		Unchanged: 0/0
  6522 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6523 ;;      Params:         0       0       0       0       0       0       0       0       0
  6524 ;;      Locals:         1       0       0       0       0       0       0       0       0
  6525 ;;      Temps:          1       0       0       0       0       0       0       0       0
  6526 ;;      Totals:         2       0       0       0       0       0       0       0       0
  6527 ;;Total ram usage:        2 bytes
  6528 ;; Hardware stack levels used:    1
  6529 ;; Hardware stack levels required when called:    3
  6530 ;; This function calls:
  6531 ;;		Nothing
  6532 ;; This function is called by:
  6533 ;;		_OpenXLCD
  6534 ;; This function uses a non-reentrant model
  6535 ;;
  6536                           
  6537                           	psect	text36
  6538  00247A                     __ptext36:
  6539                           	opt stack 0
  6540  00247A                     _Delay10KTCYx:
  6541                           	opt stack 25
  6542                           
  6543                           ;incstack = 0
  6544                           ;Delay10KTCYx@unit stored from wreg
  6545  00247A  6E21               	movwf	Delay10KTCYx@unit,c
  6546  00247C  0E0D               	movlw	13
  6547  00247E  6E20               	movwf	??_Delay10KTCYx& (0+255),c
  6548  002480  0EFC               	movlw	252
  6549  002482                     u4677:
  6550  002482  2EE8               	decfsz	wreg,f,c
  6551  002484  D7FE               	bra	u4677
  6552  002486  2E20               	decfsz	??_Delay10KTCYx& (0+255),f,c
  6553  002488  D7FC               	bra	u4677
  6554  00248A  2E21               	decfsz	Delay10KTCYx@unit,f,c
  6555  00248C  D7F7               	goto	l3971
  6556  00248E  0012               	return	
  6557  002490                     __end_of_Delay10KTCYx:
  6558                           	opt stack 0
  6559                           tblptru	equ	0xFF8
  6560                           tblptrh	equ	0xFF7
  6561                           tblptrl	equ	0xFF6
  6562                           tablat	equ	0xFF5
  6563                           prodh	equ	0xFF4
  6564                           prodl	equ	0xFF3
  6565                           intcon	equ	0xFF2
  6566                           postinc0	equ	0xFEE
  6567                           wreg	equ	0xFE8
  6568                           postdec1	equ	0xFE5
  6569                           fsr1l	equ	0xFE1
  6570                           indf2	equ	0xFDF
  6571                           postinc2	equ	0xFDE
  6572                           postdec2	equ	0xFDD
  6573                           plusw2	equ	0xFDB
  6574                           fsr2h	equ	0xFDA
  6575                           fsr2l	equ	0xFD9
  6576                           status	equ	0xFD8
  6577                           
  6578 ;; *************** function _BusyXLCD *****************
  6579 ;; Defined at:
  6580 ;;		line 11 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\pic18\plib\XLCD\busyxlcd.c"
  6581 ;; Parameters:    Size  Location     Type
  6582 ;;		None
  6583 ;; Auto vars:     Size  Location     Type
  6584 ;;		None
  6585 ;; Return value:  Size  Location     Type
  6586 ;;                  1    wreg      unsigned char 
  6587 ;; Registers used:
  6588 ;;		wreg, cstack
  6589 ;; Tracked objects:
  6590 ;;		On entry : 0/0
  6591 ;;		On exit  : 0/0
  6592 ;;		Unchanged: 0/0
  6593 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6594 ;;      Params:         0       0       0       0       0       0       0       0       0
  6595 ;;      Locals:         0       0       0       0       0       0       0       0       0
  6596 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6597 ;;      Totals:         0       0       0       0       0       0       0       0       0
  6598 ;;Total ram usage:        0 bytes
  6599 ;; Hardware stack levels used:    1
  6600 ;; Hardware stack levels required when called:    5
  6601 ;; This function calls:
  6602 ;;		_DelayFor18TCY
  6603 ;; This function is called by:
  6604 ;;		_InitXLCD
  6605 ;;		_LCD_Clear
  6606 ;;		_OpenXLCD
  6607 ;;		_putrsXLCD
  6608 ;;		_putsXLCD
  6609 ;; This function uses a non-reentrant model
  6610 ;;
  6611                           
  6612                           	psect	text37
  6613  0022DE                     __ptext37:
  6614                           	opt stack 0
  6615  0022DE                     _BusyXLCD:
  6616                           	opt stack 23
  6617                           
  6618                           ;incstack = 0
  6619  0022DE  8C8A               	bsf	3978,6,c	;volatile
  6620  0022E0  9A8A               	bcf	3978,5,c	;volatile
  6621  0022E2  EC79  F012         	call	_DelayFor18TCY	;wreg free
  6622  0022E6  888A               	bsf	3978,4,c	;volatile
  6623  0022E8  EC79  F012         	call	_DelayFor18TCY	;wreg free
  6624  0022EC  A681               	btfss	3969,3,c	;volatile
  6625  0022EE  D00A               	goto	l601
  6626  0022F0  988A               	bcf	3978,4,c	;volatile
  6627  0022F2  EC79  F012         	call	_DelayFor18TCY	;wreg free
  6628  0022F6  888A               	bsf	3978,4,c	;volatile
  6629  0022F8  EC79  F012         	call	_DelayFor18TCY	;wreg free
  6630  0022FC  988A               	bcf	3978,4,c	;volatile
  6631  0022FE  9C8A               	bcf	3978,6,c	;volatile
  6632  002300  0E01               	movlw	1
  6633  002302  0012               	return	
  6634  002304                     l601:
  6635  002304  988A               	bcf	3978,4,c	;volatile
  6636  002306  EC79  F012         	call	_DelayFor18TCY	;wreg free
  6637  00230A  888A               	bsf	3978,4,c	;volatile
  6638  00230C  EC79  F012         	call	_DelayFor18TCY	;wreg free
  6639  002310  988A               	bcf	3978,4,c	;volatile
  6640  002312  9C8A               	bcf	3978,6,c	;volatile
  6641  002314  0E00               	movlw	0
  6642  002316  0012               	return	
  6643  002318                     __end_of_BusyXLCD:
  6644                           	opt stack 0
  6645                           tblptru	equ	0xFF8
  6646                           tblptrh	equ	0xFF7
  6647                           tblptrl	equ	0xFF6
  6648                           tablat	equ	0xFF5
  6649                           prodh	equ	0xFF4
  6650                           prodl	equ	0xFF3
  6651                           intcon	equ	0xFF2
  6652                           postinc0	equ	0xFEE
  6653                           wreg	equ	0xFE8
  6654                           postdec1	equ	0xFE5
  6655                           fsr1l	equ	0xFE1
  6656                           indf2	equ	0xFDF
  6657                           postinc2	equ	0xFDE
  6658                           postdec2	equ	0xFDD
  6659                           plusw2	equ	0xFDB
  6660                           fsr2h	equ	0xFDA
  6661                           fsr2l	equ	0xFD9
  6662                           status	equ	0xFD8
  6663                           
  6664 ;; *************** function _DelayFor18TCY *****************
  6665 ;; Defined at:
  6666 ;;		line 4 in file "lcd.c"
  6667 ;; Parameters:    Size  Location     Type
  6668 ;;		None
  6669 ;; Auto vars:     Size  Location     Type
  6670 ;;		None
  6671 ;; Return value:  Size  Location     Type
  6672 ;;                  1    wreg      void 
  6673 ;; Registers used:
  6674 ;;		wreg, cstack
  6675 ;; Tracked objects:
  6676 ;;		On entry : 0/0
  6677 ;;		On exit  : 0/0
  6678 ;;		Unchanged: 0/0
  6679 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6680 ;;      Params:         0       0       0       0       0       0       0       0       0
  6681 ;;      Locals:         0       0       0       0       0       0       0       0       0
  6682 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6683 ;;      Totals:         0       0       0       0       0       0       0       0       0
  6684 ;;Total ram usage:        0 bytes
  6685 ;; Hardware stack levels used:    1
  6686 ;; Hardware stack levels required when called:    4
  6687 ;; This function calls:
  6688 ;;		_Delay10TCYx
  6689 ;; This function is called by:
  6690 ;;		_BusyXLCD
  6691 ;;		_SetDDRamAddr
  6692 ;;		_WriteCmdXLCD
  6693 ;;		_WriteDataXLCD
  6694 ;; This function uses a non-reentrant model
  6695 ;;
  6696                           
  6697                           	psect	text38
  6698  0024F2                     __ptext38:
  6699                           	opt stack 0
  6700  0024F2                     _DelayFor18TCY:
  6701                           	opt stack 23
  6702                           
  6703                           ;lcd.c: 5: Delay10TCYx(120);
  6704                           
  6705                           ;incstack = 0
  6706  0024F2  0E78               	movlw	120
  6707  0024F4  EC62  F012         	call	_Delay10TCYx
  6708  0024F8  0012               	return		;funcret
  6709  0024FA                     __end_of_DelayFor18TCY:
  6710                           	opt stack 0
  6711                           tblptru	equ	0xFF8
  6712                           tblptrh	equ	0xFF7
  6713                           tblptrl	equ	0xFF6
  6714                           tablat	equ	0xFF5
  6715                           prodh	equ	0xFF4
  6716                           prodl	equ	0xFF3
  6717                           intcon	equ	0xFF2
  6718                           postinc0	equ	0xFEE
  6719                           wreg	equ	0xFE8
  6720                           postdec1	equ	0xFE5
  6721                           fsr1l	equ	0xFE1
  6722                           indf2	equ	0xFDF
  6723                           postinc2	equ	0xFDE
  6724                           postdec2	equ	0xFDD
  6725                           plusw2	equ	0xFDB
  6726                           fsr2h	equ	0xFDA
  6727                           fsr2l	equ	0xFD9
  6728                           status	equ	0xFD8
  6729                           
  6730 ;; *************** function _Delay10TCYx *****************
  6731 ;; Defined at:
  6732 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\pic18\d10tcyx.c"
  6733 ;; Parameters:    Size  Location     Type
  6734 ;;  unit            1    wreg     unsigned char 
  6735 ;; Auto vars:     Size  Location     Type
  6736 ;;  unit            1   31[COMRAM] unsigned char 
  6737 ;; Return value:  Size  Location     Type
  6738 ;;                  1    wreg      void 
  6739 ;; Registers used:
  6740 ;;		wreg
  6741 ;; Tracked objects:
  6742 ;;		On entry : 0/0
  6743 ;;		On exit  : 0/0
  6744 ;;		Unchanged: 0/0
  6745 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6746 ;;      Params:         0       0       0       0       0       0       0       0       0
  6747 ;;      Locals:         1       0       0       0       0       0       0       0       0
  6748 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6749 ;;      Totals:         1       0       0       0       0       0       0       0       0
  6750 ;;Total ram usage:        1 bytes
  6751 ;; Hardware stack levels used:    1
  6752 ;; Hardware stack levels required when called:    3
  6753 ;; This function calls:
  6754 ;;		Nothing
  6755 ;; This function is called by:
  6756 ;;		_DelayFor18TCY
  6757 ;; This function uses a non-reentrant model
  6758 ;;
  6759                           
  6760                           	psect	text39
  6761  0024C4                     __ptext39:
  6762                           	opt stack 0
  6763  0024C4                     _Delay10TCYx:
  6764                           	opt stack 23
  6765                           
  6766                           ;incstack = 0
  6767                           ;Delay10TCYx@unit stored from wreg
  6768  0024C4  6E20               	movwf	Delay10TCYx@unit,c
  6769  0024C6  0E03               	movlw	3
  6770  0024C8                     u4687:
  6771  0024C8  2EE8               	decfsz	wreg,f,c
  6772  0024CA  D7FE               	bra	u4687
  6773  0024CC  F000               	nop	
  6774  0024CE  2E20               	decfsz	Delay10TCYx@unit,f,c
  6775  0024D0  D7FA               	goto	l3525
  6776  0024D2  0012               	return	
  6777  0024D4                     __end_of_Delay10TCYx:
  6778                           	opt stack 0
  6779                           tblptru	equ	0xFF8
  6780                           tblptrh	equ	0xFF7
  6781                           tblptrl	equ	0xFF6
  6782                           tablat	equ	0xFF5
  6783                           prodh	equ	0xFF4
  6784                           prodl	equ	0xFF3
  6785                           intcon	equ	0xFF2
  6786                           postinc0	equ	0xFEE
  6787                           wreg	equ	0xFE8
  6788                           postdec1	equ	0xFE5
  6789                           fsr1l	equ	0xFE1
  6790                           indf2	equ	0xFDF
  6791                           postinc2	equ	0xFDE
  6792                           postdec2	equ	0xFDD
  6793                           plusw2	equ	0xFDB
  6794                           fsr2h	equ	0xFDA
  6795                           fsr2l	equ	0xFD9
  6796                           status	equ	0xFD8
  6797                           
  6798 ;; *************** function _SerialRxPinInterrupt *****************
  6799 ;; Defined at:
  6800 ;;		line 122 in file "main.c"
  6801 ;; Parameters:    Size  Location     Type
  6802 ;;		None
  6803 ;; Auto vars:     Size  Location     Type
  6804 ;;		None
  6805 ;; Return value:  Size  Location     Type
  6806 ;;                  1    wreg      void 
  6807 ;; Registers used:
  6808 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  6809 ;; Tracked objects:
  6810 ;;		On entry : 0/0
  6811 ;;		On exit  : 0/0
  6812 ;;		Unchanged: 0/0
  6813 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6814 ;;      Params:         0       0       0       0       0       0       0       0       0
  6815 ;;      Locals:         0       0       0       0       0       0       0       0       0
  6816 ;;      Temps:         14       0       0       0       0       0       0       0       0
  6817 ;;      Totals:        14       0       0       0       0       0       0       0       0
  6818 ;;Total ram usage:       14 bytes
  6819 ;; Hardware stack levels used:    1
  6820 ;; Hardware stack levels required when called:    2
  6821 ;; This function calls:
  6822 ;;		_converte_char_hex
  6823 ;;		_tratar_relogio
  6824 ;; This function is called by:
  6825 ;;		Interrupt level 2
  6826 ;; This function uses a non-reentrant model
  6827 ;;
  6828                           
  6829                           	psect	intcode
  6830  000008                     __pintcode:
  6831                           	opt stack 0
  6832  000008                     _SerialRxPinInterrupt:
  6833                           	opt stack 22
  6834                           
  6835                           ;incstack = 0
  6836  000008  8240               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  6837  00000A  ED42  F00C         	call	int_func,f	;refresh shadow registers
  6838                           tblptru	equ	0xFF8
  6839                           tblptrh	equ	0xFF7
  6840                           tblptrl	equ	0xFF6
  6841                           tablat	equ	0xFF5
  6842                           prodh	equ	0xFF4
  6843                           prodl	equ	0xFF3
  6844                           intcon	equ	0xFF2
  6845                           postinc0	equ	0xFEE
  6846                           wreg	equ	0xFE8
  6847                           postdec1	equ	0xFE5
  6848                           fsr1l	equ	0xFE1
  6849                           indf2	equ	0xFDF
  6850                           postinc2	equ	0xFDE
  6851                           postdec2	equ	0xFDD
  6852                           plusw2	equ	0xFDB
  6853                           fsr2h	equ	0xFDA
  6854                           fsr2l	equ	0xFD9
  6855                           status	equ	0xFD8
  6856                           
  6857                           	psect	intcode_body
  6858  001884                     __pintcode_body:
  6859                           	opt stack 22
  6860  001884                     int_func:
  6861                           	opt stack 22
  6862  001884  0006               	pop		; remove dummy address from shadow register refresh
  6863  001886  CFFA F012          	movff	pclath,??_SerialRxPinInterrupt
  6864  00188A  CFFB F013          	movff	pclatu,??_SerialRxPinInterrupt+1
  6865  00188E  CFE9 F014          	movff	fsr0l,??_SerialRxPinInterrupt+2
  6866  001892  CFEA F015          	movff	fsr0h,??_SerialRxPinInterrupt+3
  6867  001896  CFE1 F016          	movff	fsr1l,??_SerialRxPinInterrupt+4
  6868  00189A  CFE2 F017          	movff	fsr1h,??_SerialRxPinInterrupt+5
  6869  00189E  CFD9 F018          	movff	fsr2l,??_SerialRxPinInterrupt+6
  6870  0018A2  CFDA F019          	movff	fsr2h,??_SerialRxPinInterrupt+7
  6871  0018A6  CFF3 F01A          	movff	prodl,??_SerialRxPinInterrupt+8
  6872  0018AA  CFF4 F01B          	movff	prodh,??_SerialRxPinInterrupt+9
  6873  0018AE  CFF6 F01C          	movff	tblptrl,??_SerialRxPinInterrupt+10
  6874  0018B2  CFF7 F01D          	movff	tblptrh,??_SerialRxPinInterrupt+11
  6875  0018B6  CFF8 F01E          	movff	tblptru,??_SerialRxPinInterrupt+12
  6876  0018BA  CFF5 F01F          	movff	tablat,??_SerialRxPinInterrupt+13
  6877                           
  6878                           ;main.c: 123: if(TMR0IF){
  6879  0018BE  A4F2               	btfss	intcon,2,c	;volatile
  6880  0018C0  D008               	goto	i2l3425
  6881                           
  6882                           ;main.c: 124: TMR0=2535;
  6883  0018C2  0E09               	movlw	9
  6884  0018C4  6ED7               	movwf	4055,c	;volatile
  6885  0018C6  0EE7               	movlw	231
  6886  0018C8  6ED6               	movwf	4054,c	;volatile
  6887                           
  6888                           ;main.c: 125: INTCONbits.TMR0IF=0;
  6889  0018CA  94F2               	bcf	intcon,2,c	;volatile
  6890                           
  6891                           ;main.c: 126: contador++;
  6892  0018CC  0100               	movlb	0	; () banked
  6893  0018CE  4B9B               	infsnz	_contador& (0+255),f,b
  6894  0018D0  2B9C               	incf	(_contador+1)& (0+255),f,b
  6895  0018D2                     i2l3425:
  6896                           
  6897                           ;main.c: 127: }
  6898                           ;main.c: 128: if(contador>1){
  6899  0018D2  0100               	movlb	0	; () banked
  6900  0018D4  BF9C               	btfsc	(_contador+1)& (0+255),7,b
  6901  0018D6  D026               	goto	i2l3437
  6902  0018D8  0100               	movlb	0	; () banked
  6903  0018DA  519C               	movf	(_contador+1)& (0+255),w,b
  6904  0018DC  E105               	bnz	i2u335_40
  6905  0018DE  0E02               	movlw	2
  6906  0018E0  0100               	movlb	0	; () banked
  6907  0018E2  5D9B               	subwf	_contador& (0+255),w,b
  6908  0018E4  A0D8               	btfss	status,0,c
  6909  0018E6  D01E               	goto	i2l3437
  6910  0018E8                     i2u335_40:
  6911                           
  6912                           ; BSR set to: 0
  6913                           ;main.c: 129: if(flag_inicializacao == 1 ){
  6914  0018E8  0100               	movlb	0	; () banked
  6915  0018EA  05BE               	decf	_flag_inicializacao& (0+255),w,b
  6916  0018EC  0100               	movlb	0	; () banked
  6917  0018EE  11BF               	iorwf	(_flag_inicializacao+1)& (0+255),w,b
  6918  0018F0  A4D8               	btfss	status,2,c
  6919  0018F2  D004               	goto	i2l3431
  6920                           
  6921                           ; BSR set to: 0
  6922                           ;main.c: 130: flag_inicializacao = -1;
  6923  0018F4  0100               	movlb	0	; () banked
  6924  0018F6  69BE               	setf	_flag_inicializacao& (0+255),b
  6925  0018F8  69BF               	setf	(_flag_inicializacao+1)& (0+255),b
  6926                           
  6927                           ;main.c: 131: }else{
  6928  0018FA  D014               	goto	i2l3437
  6929  0018FC                     i2l3431:
  6930                           
  6931                           ; BSR set to: 0
  6932                           ;main.c: 132: tratar_relogio(&ca, &re);
  6933  0018FC  0E3A               	movlw	low _ca
  6934  0018FE  6E05               	movwf	tratar_relogio@c,c
  6935  001900  0E00               	movlw	high _ca
  6936  001902  6E06               	movwf	tratar_relogio@c+1,c
  6937  001904  0E34               	movlw	low _re
  6938  001906  6E07               	movwf	tratar_relogio@r,c
  6939  001908  0E00               	movlw	high _re
  6940  00190A  6E08               	movwf	tratar_relogio@r+1,c
  6941  00190C  EC08  F008         	call	_tratar_relogio	;wreg free
  6942                           
  6943                           ;main.c: 133: flagDisplay = 1;
  6944  001910  0E00               	movlw	0
  6945  001912  0100               	movlb	0	; () banked
  6946  001914  6FC1               	movwf	(_flagDisplay+1)& (0+255),b
  6947  001916  0E01               	movlw	1
  6948  001918  6FC0               	movwf	_flagDisplay& (0+255),b
  6949                           
  6950                           ; BSR set to: 0
  6951                           ;main.c: 134: contador=0;
  6952  00191A  0E00               	movlw	0
  6953  00191C  0100               	movlb	0	; () banked
  6954  00191E  6F9C               	movwf	(_contador+1)& (0+255),b
  6955  001920  0E00               	movlw	0
  6956  001922  6F9B               	movwf	_contador& (0+255),b
  6957  001924                     i2l3437:
  6958                           
  6959                           ; BSR set to: 0
  6960                           ;main.c: 135: }
  6961                           ;main.c: 136: }
  6962                           ;main.c: 139: if(PIR1bits.RCIF == 1){
  6963  001924  AA9E               	btfss	3998,5,c	;volatile
  6964  001926  D021               	goto	i2l123
  6965                           
  6966                           ; BSR set to: 0
  6967                           ;main.c: 140: if(i<7){
  6968  001928  502B               	movf	_i+1,w,c
  6969  00192A  E113               	bnz	i2l116
  6970  00192C  0E07               	movlw	7
  6971  00192E  5C2A               	subwf	_i,w,c
  6972  001930  B0D8               	btfsc	status,0,c
  6973  001932  D00F               	goto	i2l116
  6974  001934                     i2l117:
  6975  001934  AA9E               	btfss	3998,5,c	;volatile
  6976  001936  D7FE               	goto	i2l117
  6977                           
  6978                           ;main.c: 142: dado[i]= converte_char_hex(RCREG);
  6979  001938  0E9D               	movlw	low _dado
  6980  00193A  242A               	addwf	_i,w,c
  6981  00193C  6ED9               	movwf	fsr2l,c
  6982  00193E  0E00               	movlw	high _dado
  6983  001940  202B               	addwfc	_i+1,w,c
  6984  001942  6EDA               	movwf	fsr2h,c
  6985  001944  50AE               	movf	4014,w,c	;volatile
  6986  001946  EC77  F00F         	call	_converte_char_hex
  6987  00194A  6EDF               	movwf	indf2,c
  6988                           
  6989                           ;main.c: 143: i++;
  6990  00194C  4A2A               	infsnz	_i,f,c
  6991  00194E  2A2B               	incf	_i+1,f,c
  6992                           
  6993                           ;main.c: 144: }else{
  6994  001950  D00C               	goto	i2l123
  6995  001952                     i2l116:
  6996                           
  6997                           ; BSR set to: 0
  6998                           ;main.c: 145: PIR1bits.RCIF = 0;
  6999  001952  9A9E               	bcf	3998,5,c	;volatile
  7000                           
  7001                           ; BSR set to: 0
  7002                           ;main.c: 146: i=0;
  7003  001954  0E00               	movlw	0
  7004  001956  6E2B               	movwf	_i+1,c
  7005  001958  0E00               	movlw	0
  7006  00195A  6E2A               	movwf	_i,c
  7007                           
  7008                           ;main.c: 150: if (ESTADO_COMUNICACAO == 0x00){
  7009  00195C  502D               	movf	_ESTADO_COMUNICACAO,w,c
  7010  00195E  A4D8               	btfss	status,2,c
  7011  001960  D002               	goto	i2l3451
  7012                           
  7013                           ; BSR set to: 0
  7014                           ;main.c: 151: ESTADO_COMUNICACAO = 0x03;
  7015  001962  0E03               	movlw	3
  7016  001964  D001               	goto	L1
  7017  001966                     i2l3451:
  7018                           
  7019                           ; BSR set to: 0
  7020                           ;main.c: 154: ESTADO_COMUNICACAO = 0x05;
  7021  001966  0E05               	movlw	5
  7022  001968                     L1:
  7023  001968  6E2D               	movwf	_ESTADO_COMUNICACAO,c
  7024  00196A                     i2l123:
  7025  00196A  C01F  FFF5         	movff	??_SerialRxPinInterrupt+13,tablat
  7026  00196E  C01E  FFF8         	movff	??_SerialRxPinInterrupt+12,tblptru
  7027  001972  C01D  FFF7         	movff	??_SerialRxPinInterrupt+11,tblptrh
  7028  001976  C01C  FFF6         	movff	??_SerialRxPinInterrupt+10,tblptrl
  7029  00197A  C01B  FFF4         	movff	??_SerialRxPinInterrupt+9,prodh
  7030  00197E  C01A  FFF3         	movff	??_SerialRxPinInterrupt+8,prodl
  7031  001982  C019  FFDA         	movff	??_SerialRxPinInterrupt+7,fsr2h
  7032  001986  C018  FFD9         	movff	??_SerialRxPinInterrupt+6,fsr2l
  7033  00198A  C017  FFE2         	movff	??_SerialRxPinInterrupt+5,fsr1h
  7034  00198E  C016  FFE1         	movff	??_SerialRxPinInterrupt+4,fsr1l
  7035  001992  C015  FFEA         	movff	??_SerialRxPinInterrupt+3,fsr0h
  7036  001996  C014  FFE9         	movff	??_SerialRxPinInterrupt+2,fsr0l
  7037  00199A  C013  FFFB         	movff	??_SerialRxPinInterrupt+1,pclatu
  7038  00199E  C012  FFFA         	movff	??_SerialRxPinInterrupt,pclath
  7039  0019A2  9240               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  7040  0019A4  0011               	retfie		f
  7041  0019A6                     __end_of_SerialRxPinInterrupt:
  7042                           	opt stack 0
  7043                           pclatu	equ	0xFFB
  7044                           pclath	equ	0xFFA
  7045                           tblptru	equ	0xFF8
  7046                           tblptrh	equ	0xFF7
  7047                           tblptrl	equ	0xFF6
  7048                           tablat	equ	0xFF5
  7049                           prodh	equ	0xFF4
  7050                           prodl	equ	0xFF3
  7051                           intcon	equ	0xFF2
  7052                           postinc0	equ	0xFEE
  7053                           fsr0h	equ	0xFEA
  7054                           fsr0l	equ	0xFE9
  7055                           wreg	equ	0xFE8
  7056                           postdec1	equ	0xFE5
  7057                           fsr1h	equ	0xFE2
  7058                           fsr1l	equ	0xFE1
  7059                           indf2	equ	0xFDF
  7060                           postinc2	equ	0xFDE
  7061                           postdec2	equ	0xFDD
  7062                           plusw2	equ	0xFDB
  7063                           fsr2h	equ	0xFDA
  7064                           fsr2l	equ	0xFD9
  7065                           status	equ	0xFD8
  7066                           
  7067 ;; *************** function _tratar_relogio *****************
  7068 ;; Defined at:
  7069 ;;		line 14 in file "relogio.c"
  7070 ;; Parameters:    Size  Location     Type
  7071 ;;  c               2    4[COMRAM] PTR struct .
  7072 ;;		 -> ca(6), 
  7073 ;;  r               2    6[COMRAM] PTR struct .
  7074 ;;		 -> re(6), 
  7075 ;; Auto vars:     Size  Location     Type
  7076 ;;		None
  7077 ;; Return value:  Size  Location     Type
  7078 ;;                  1    wreg      void 
  7079 ;; Registers used:
  7080 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  7081 ;; Tracked objects:
  7082 ;;		On entry : 0/0
  7083 ;;		On exit  : 0/0
  7084 ;;		Unchanged: 0/0
  7085 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7086 ;;      Params:         4       0       0       0       0       0       0       0       0
  7087 ;;      Locals:         0       0       0       0       0       0       0       0       0
  7088 ;;      Temps:          9       0       0       0       0       0       0       0       0
  7089 ;;      Totals:        13       0       0       0       0       0       0       0       0
  7090 ;;Total ram usage:       13 bytes
  7091 ;; Hardware stack levels used:    1
  7092 ;; Hardware stack levels required when called:    1
  7093 ;; This function calls:
  7094 ;;		_verifica_b
  7095 ;; This function is called by:
  7096 ;;		_SerialRxPinInterrupt
  7097 ;; This function uses a non-reentrant model
  7098 ;;
  7099                           
  7100                           	psect	text41
  7101  001010                     __ptext41:
  7102                           	opt stack 0
  7103  001010                     _tratar_relogio:
  7104                           	opt stack 22
  7105                           
  7106                           ;relogio.c: 15: r->segundo++;
  7107                           
  7108                           ;incstack = 0
  7109  001010  EE20 F002          	lfsr	2,2
  7110  001014  5007               	movf	tratar_relogio@r,w,c
  7111  001016  26D9               	addwf	fsr2l,f,c
  7112  001018  5008               	movf	tratar_relogio@r+1,w,c
  7113  00101A  22DA               	addwfc	fsr2h,f,c
  7114  00101C  2ADE               	incf	postinc2,f,c
  7115  00101E  0E00               	movlw	0
  7116  001020  22DD               	addwfc	postdec2,f,c
  7117                           
  7118                           ;relogio.c: 16: verifica_b(c->ano);
  7119  001022  EE20 F004          	lfsr	2,4
  7120  001026  5005               	movf	tratar_relogio@c,w,c
  7121  001028  26D9               	addwf	fsr2l,f,c
  7122  00102A  5006               	movf	tratar_relogio@c+1,w,c
  7123  00102C  22DA               	addwfc	fsr2h,f,c
  7124  00102E  CFDE F001          	movff	postinc2,verifica_b@ano
  7125  001032  CFDD F002          	movff	postdec2,verifica_b@ano+1
  7126  001036  EC0B  F012         	call	_verifica_b	;wreg free
  7127                           
  7128                           ;relogio.c: 17: if(tempoAlarme < 35 && flagAlarme == 1){
  7129  00103A  BE23               	btfsc	_tempoAlarme+1,7,c
  7130  00103C  D006               	goto	i2l3217
  7131  00103E  5023               	movf	_tempoAlarme+1,w,c
  7132  001040  E10B               	bnz	i2l3221
  7133  001042  0E23               	movlw	35
  7134  001044  5C22               	subwf	_tempoAlarme,w,c
  7135  001046  B0D8               	btfsc	status,0,c
  7136  001048  D007               	goto	i2l3221
  7137  00104A                     i2l3217:
  7138  00104A  0424               	decf	_flagAlarme,w,c
  7139  00104C  1025               	iorwf	_flagAlarme+1,w,c
  7140  00104E  A4D8               	btfss	status,2,c
  7141  001050  D003               	goto	i2l3221
  7142                           
  7143                           ;relogio.c: 18: tempoAlarme++;
  7144  001052  4A22               	infsnz	_tempoAlarme,f,c
  7145  001054  2A23               	incf	_tempoAlarme+1,f,c
  7146                           
  7147                           ;relogio.c: 19: }else{
  7148  001056  D004               	goto	i2l3223
  7149  001058                     i2l3221:
  7150                           
  7151                           ;relogio.c: 20: tempoAlarme = 0;
  7152  001058  0E00               	movlw	0
  7153  00105A  6E23               	movwf	_tempoAlarme+1,c
  7154  00105C  0E00               	movlw	0
  7155  00105E  6E22               	movwf	_tempoAlarme,c
  7156  001060                     i2l3223:
  7157                           
  7158                           ;relogio.c: 21: }
  7159                           ;relogio.c: 23: if(r->segundo > 59){
  7160  001060  EE20 F002          	lfsr	2,2
  7161  001064  5007               	movf	tratar_relogio@r,w,c
  7162  001066  26D9               	addwf	fsr2l,f,c
  7163  001068  5008               	movf	tratar_relogio@r+1,w,c
  7164  00106A  22DA               	addwfc	fsr2h,f,c
  7165  00106C  0E01               	movlw	1
  7166  00106E  BEDB               	btfsc	plusw2,7,c
  7167  001070  D018               	goto	i2l388
  7168  001072  0E01               	movlw	1
  7169  001074  50DB               	movf	plusw2,w,c
  7170  001076  E104               	bnz	i2u300_40
  7171  001078  0E3C               	movlw	60
  7172  00107A  5CDE               	subwf	postinc2,w,c
  7173  00107C  A0D8               	btfss	status,0,c
  7174  00107E  D011               	goto	i2l388
  7175  001080                     i2u300_40:
  7176                           
  7177                           ;relogio.c: 24: r->minuto++;
  7178  001080  C007  FFD9         	movff	tratar_relogio@r,fsr2l
  7179  001084  C008  FFDA         	movff	tratar_relogio@r+1,fsr2h
  7180  001088  2ADE               	incf	postinc2,f,c
  7181  00108A  0E00               	movlw	0
  7182  00108C  22DD               	addwfc	postdec2,f,c
  7183                           
  7184                           ;relogio.c: 25: r->segundo = 0;
  7185  00108E  EE20 F002          	lfsr	2,2
  7186  001092  5007               	movf	tratar_relogio@r,w,c
  7187  001094  26D9               	addwf	fsr2l,f,c
  7188  001096  5008               	movf	tratar_relogio@r+1,w,c
  7189  001098  22DA               	addwfc	fsr2h,f,c
  7190  00109A  0E00               	movlw	0
  7191  00109C  6EDE               	movwf	postinc2,c
  7192  00109E  0E00               	movlw	0
  7193  0010A0  6EDD               	movwf	postdec2,c
  7194  0010A2                     i2l388:
  7195                           
  7196                           ;relogio.c: 26: }
  7197                           ;relogio.c: 27: if(r->minuto > 59){
  7198  0010A2  C007  FFD9         	movff	tratar_relogio@r,fsr2l
  7199  0010A6  C008  FFDA         	movff	tratar_relogio@r+1,fsr2h
  7200  0010AA  0E01               	movlw	1
  7201  0010AC  BEDB               	btfsc	plusw2,7,c
  7202  0010AE  D018               	goto	i2l3231
  7203  0010B0  0E01               	movlw	1
  7204  0010B2  50DB               	movf	plusw2,w,c
  7205  0010B4  E104               	bnz	i2u301_40
  7206  0010B6  0E3C               	movlw	60
  7207  0010B8  5CDE               	subwf	postinc2,w,c
  7208  0010BA  A0D8               	btfss	status,0,c
  7209  0010BC  D011               	goto	i2l3231
  7210  0010BE                     i2u301_40:
  7211                           
  7212                           ;relogio.c: 28: r->hora++;
  7213  0010BE  EE20 F004          	lfsr	2,4
  7214  0010C2  5007               	movf	tratar_relogio@r,w,c
  7215  0010C4  26D9               	addwf	fsr2l,f,c
  7216  0010C6  5008               	movf	tratar_relogio@r+1,w,c
  7217  0010C8  22DA               	addwfc	fsr2h,f,c
  7218  0010CA  2ADE               	incf	postinc2,f,c
  7219  0010CC  0E00               	movlw	0
  7220  0010CE  22DD               	addwfc	postdec2,f,c
  7221                           
  7222                           ;relogio.c: 29: r->minuto = 0;
  7223  0010D0  C007  FFD9         	movff	tratar_relogio@r,fsr2l
  7224  0010D4  C008  FFDA         	movff	tratar_relogio@r+1,fsr2h
  7225  0010D8  0E00               	movlw	0
  7226  0010DA  6EDE               	movwf	postinc2,c
  7227  0010DC  0E00               	movlw	0
  7228  0010DE  6EDD               	movwf	postdec2,c
  7229  0010E0                     i2l3231:
  7230                           
  7231                           ;relogio.c: 30: }
  7232                           ;relogio.c: 31: if(r->hora > 23){
  7233  0010E0  EE20 F004          	lfsr	2,4
  7234  0010E4  5007               	movf	tratar_relogio@r,w,c
  7235  0010E6  26D9               	addwf	fsr2l,f,c
  7236  0010E8  5008               	movf	tratar_relogio@r+1,w,c
  7237  0010EA  22DA               	addwfc	fsr2h,f,c
  7238  0010EC  0E01               	movlw	1
  7239  0010EE  BEDB               	btfsc	plusw2,7,c
  7240  0010F0  D018               	goto	i2l3235
  7241  0010F2  0E01               	movlw	1
  7242  0010F4  50DB               	movf	plusw2,w,c
  7243  0010F6  E104               	bnz	i2u302_40
  7244  0010F8  0E18               	movlw	24
  7245  0010FA  5CDE               	subwf	postinc2,w,c
  7246  0010FC  A0D8               	btfss	status,0,c
  7247  0010FE  D011               	goto	i2l3235
  7248  001100                     i2u302_40:
  7249                           
  7250                           ;relogio.c: 32: c->dia++;
  7251  001100  C005  FFD9         	movff	tratar_relogio@c,fsr2l
  7252  001104  C006  FFDA         	movff	tratar_relogio@c+1,fsr2h
  7253  001108  2ADE               	incf	postinc2,f,c
  7254  00110A  0E00               	movlw	0
  7255  00110C  22DD               	addwfc	postdec2,f,c
  7256                           
  7257                           ;relogio.c: 33: r->hora = 0;
  7258  00110E  EE20 F004          	lfsr	2,4
  7259  001112  5007               	movf	tratar_relogio@r,w,c
  7260  001114  26D9               	addwf	fsr2l,f,c
  7261  001116  5008               	movf	tratar_relogio@r+1,w,c
  7262  001118  22DA               	addwfc	fsr2h,f,c
  7263  00111A  0E00               	movlw	0
  7264  00111C  6EDE               	movwf	postinc2,c
  7265  00111E  0E00               	movlw	0
  7266  001120  6EDD               	movwf	postdec2,c
  7267  001122                     i2l3235:
  7268                           
  7269                           ;relogio.c: 34: }
  7270                           ;relogio.c: 35: if(c->dia > qtdDias_mes[c->mes-1]){
  7271  001122  C005  FFD9         	movff	tratar_relogio@c,fsr2l
  7272  001126  C006  FFDA         	movff	tratar_relogio@c+1,fsr2h
  7273  00112A  0EFE               	movlw	254
  7274  00112C  6E0B               	movwf	(??_tratar_relogio+2)& (0+255),c
  7275  00112E  0EFF               	movlw	255
  7276  001130  6E0C               	movwf	(??_tratar_relogio+3)& (0+255),c
  7277  001132  EE10 F002          	lfsr	1,2
  7278  001136  5005               	movf	tratar_relogio@c,w,c
  7279  001138  26E1               	addwf	fsr1l,f,c
  7280  00113A  5006               	movf	tratar_relogio@c+1,w,c
  7281  00113C  22E2               	addwfc	fsr1h,f,c
  7282  00113E  CFE6 F00D          	movff	postinc1,??_tratar_relogio+4
  7283  001142  CFE5 F00E          	movff	postdec1,??_tratar_relogio+5
  7284  001146  90D8               	bcf	status,0,c
  7285  001148  360D               	rlcf	??_tratar_relogio+4,f,c
  7286  00114A  360E               	rlcf	??_tratar_relogio+5,f,c
  7287  00114C  500B               	movf	??_tratar_relogio+2,w,c
  7288  00114E  260D               	addwf	??_tratar_relogio+4,f,c
  7289  001150  500C               	movf	??_tratar_relogio+3,w,c
  7290  001152  220E               	addwfc	??_tratar_relogio+5,f,c
  7291  001154  0EA4               	movlw	low _qtdDias_mes
  7292  001156  240D               	addwf	??_tratar_relogio+4,w,c
  7293  001158  6EE1               	movwf	fsr1l,c
  7294  00115A  0E00               	movlw	high _qtdDias_mes
  7295  00115C  200E               	addwfc	??_tratar_relogio+5,w,c
  7296  00115E  6EE2               	movwf	fsr1h,c
  7297  001160  50DE               	movf	postinc2,w,c
  7298  001162  5CE6               	subwf	postinc1,w,c
  7299  001164  50E6               	movf	postinc1,w,c
  7300  001166  0A80               	xorlw	128
  7301  001168  6E11               	movwf	(??_tratar_relogio+8)& (0+255),c
  7302  00116A  50DE               	movf	postinc2,w,c
  7303  00116C  0A80               	xorlw	128
  7304  00116E  5811               	subwfb	(??_tratar_relogio+8)& (0+255),w,c
  7305  001170  B0D8               	btfsc	status,0,c
  7306  001172  D011               	goto	i2l3241
  7307                           
  7308                           ;relogio.c: 36: c->mes++;
  7309  001174  EE20 F002          	lfsr	2,2
  7310  001178  5005               	movf	tratar_relogio@c,w,c
  7311  00117A  26D9               	addwf	fsr2l,f,c
  7312  00117C  5006               	movf	tratar_relogio@c+1,w,c
  7313  00117E  22DA               	addwfc	fsr2h,f,c
  7314  001180  2ADE               	incf	postinc2,f,c
  7315  001182  0E00               	movlw	0
  7316  001184  22DD               	addwfc	postdec2,f,c
  7317                           
  7318                           ;relogio.c: 37: c->dia = 1;
  7319  001186  C005  FFD9         	movff	tratar_relogio@c,fsr2l
  7320  00118A  C006  FFDA         	movff	tratar_relogio@c+1,fsr2h
  7321  00118E  0E01               	movlw	1
  7322  001190  6EDE               	movwf	postinc2,c
  7323  001192  0E00               	movlw	0
  7324  001194  6EDD               	movwf	postdec2,c
  7325  001196                     i2l3241:
  7326                           
  7327                           ;relogio.c: 38: }
  7328                           ;relogio.c: 39: if(c->mes > 12){
  7329  001196  EE20 F002          	lfsr	2,2
  7330  00119A  5005               	movf	tratar_relogio@c,w,c
  7331  00119C  26D9               	addwf	fsr2l,f,c
  7332  00119E  5006               	movf	tratar_relogio@c+1,w,c
  7333  0011A0  22DA               	addwfc	fsr2h,f,c
  7334  0011A2  0E01               	movlw	1
  7335  0011A4  BEDB               	btfsc	plusw2,7,c
  7336  0011A6  D02E               	goto	i2l3249
  7337  0011A8  0E01               	movlw	1
  7338  0011AA  50DB               	movf	plusw2,w,c
  7339  0011AC  E104               	bnz	i2u304_40
  7340  0011AE  0E0D               	movlw	13
  7341  0011B0  5CDE               	subwf	postinc2,w,c
  7342  0011B2  A0D8               	btfss	status,0,c
  7343  0011B4  D027               	goto	i2l3249
  7344  0011B6                     i2u304_40:
  7345                           
  7346                           ;relogio.c: 40: c->ano++;
  7347  0011B6  EE20 F004          	lfsr	2,4
  7348  0011BA  5005               	movf	tratar_relogio@c,w,c
  7349  0011BC  26D9               	addwf	fsr2l,f,c
  7350  0011BE  5006               	movf	tratar_relogio@c+1,w,c
  7351  0011C0  22DA               	addwfc	fsr2h,f,c
  7352  0011C2  2ADE               	incf	postinc2,f,c
  7353  0011C4  0E00               	movlw	0
  7354  0011C6  22DD               	addwfc	postdec2,f,c
  7355                           
  7356                           ;relogio.c: 41: c->mes = 1;
  7357  0011C8  EE20 F002          	lfsr	2,2
  7358  0011CC  5005               	movf	tratar_relogio@c,w,c
  7359  0011CE  26D9               	addwf	fsr2l,f,c
  7360  0011D0  5006               	movf	tratar_relogio@c+1,w,c
  7361  0011D2  22DA               	addwfc	fsr2h,f,c
  7362  0011D4  0E01               	movlw	1
  7363  0011D6  6EDE               	movwf	postinc2,c
  7364  0011D8  0E00               	movlw	0
  7365  0011DA  6EDD               	movwf	postdec2,c
  7366                           
  7367                           ;relogio.c: 42: c->dia = 1;
  7368  0011DC  C005  FFD9         	movff	tratar_relogio@c,fsr2l
  7369  0011E0  C006  FFDA         	movff	tratar_relogio@c+1,fsr2h
  7370  0011E4  0E01               	movlw	1
  7371  0011E6  6EDE               	movwf	postinc2,c
  7372  0011E8  0E00               	movlw	0
  7373  0011EA  6EDD               	movwf	postdec2,c
  7374                           
  7375                           ;relogio.c: 43: verifica_b(c->ano);
  7376  0011EC  EE20 F004          	lfsr	2,4
  7377  0011F0  5005               	movf	tratar_relogio@c,w,c
  7378  0011F2  26D9               	addwf	fsr2l,f,c
  7379  0011F4  5006               	movf	tratar_relogio@c+1,w,c
  7380  0011F6  22DA               	addwfc	fsr2h,f,c
  7381  0011F8  CFDE F001          	movff	postinc2,verifica_b@ano
  7382  0011FC  CFDD F002          	movff	postdec2,verifica_b@ano+1
  7383  001200  EC0B  F012         	call	_verifica_b	;wreg free
  7384  001204                     i2l3249:
  7385                           
  7386                           ;relogio.c: 44: }
  7387                           ;relogio.c: 45: if(c->dia < 1){
  7388  001204  C005  FFD9         	movff	tratar_relogio@c,fsr2l
  7389  001208  C006  FFDA         	movff	tratar_relogio@c+1,fsr2h
  7390  00120C  0E01               	movlw	1
  7391  00120E  BEDB               	btfsc	plusw2,7,c
  7392  001210  D006               	goto	i2l3251
  7393  001212  0E01               	movlw	1
  7394  001214  50DB               	movf	plusw2,w,c
  7395  001216  E12F               	bnz	i2l3255
  7396  001218  04DE               	decf	postinc2,w,c
  7397  00121A  B0D8               	btfsc	status,0,c
  7398  00121C  D02C               	goto	i2l3255
  7399  00121E                     i2l3251:
  7400                           
  7401                           ;relogio.c: 46: c->dia = qtdDias_mes[c->mes -2];
  7402  00121E  0EFC               	movlw	252
  7403  001220  6E09               	movwf	??_tratar_relogio& (0+255),c
  7404  001222  0EFF               	movlw	255
  7405  001224  6E0A               	movwf	(??_tratar_relogio+1)& (0+255),c
  7406  001226  EE20 F002          	lfsr	2,2
  7407  00122A  5005               	movf	tratar_relogio@c,w,c
  7408  00122C  26D9               	addwf	fsr2l,f,c
  7409  00122E  5006               	movf	tratar_relogio@c+1,w,c
  7410  001230  22DA               	addwfc	fsr2h,f,c
  7411  001232  CFDE F00B          	movff	postinc2,??_tratar_relogio+2
  7412  001236  CFDD F00C          	movff	postdec2,??_tratar_relogio+3
  7413  00123A  90D8               	bcf	status,0,c
  7414  00123C  360B               	rlcf	??_tratar_relogio+2,f,c
  7415  00123E  360C               	rlcf	??_tratar_relogio+3,f,c
  7416  001240  5009               	movf	??_tratar_relogio,w,c
  7417  001242  260B               	addwf	??_tratar_relogio+2,f,c
  7418  001244  500A               	movf	??_tratar_relogio+1,w,c
  7419  001246  220C               	addwfc	??_tratar_relogio+3,f,c
  7420  001248  0EA4               	movlw	low _qtdDias_mes
  7421  00124A  240B               	addwf	??_tratar_relogio+2,w,c
  7422  00124C  6ED9               	movwf	fsr2l,c
  7423  00124E  0E00               	movlw	high _qtdDias_mes
  7424  001250  200C               	addwfc	??_tratar_relogio+3,w,c
  7425  001252  6EDA               	movwf	fsr2h,c
  7426  001254  C005  FFE1         	movff	tratar_relogio@c,fsr1l
  7427  001258  C006  FFE2         	movff	tratar_relogio@c+1,fsr1h
  7428  00125C  CFDE FFE6          	movff	postinc2,postinc1
  7429  001260  CFDD FFE5          	movff	postdec2,postdec1
  7430                           
  7431                           ;relogio.c: 47: c->mes--;
  7432  001264  EE20 F002          	lfsr	2,2
  7433  001268  5005               	movf	tratar_relogio@c,w,c
  7434  00126A  26D9               	addwf	fsr2l,f,c
  7435  00126C  5006               	movf	tratar_relogio@c+1,w,c
  7436  00126E  22DA               	addwfc	fsr2h,f,c
  7437  001270  06DE               	decf	postinc2,f,c
  7438  001272  0E00               	movlw	0
  7439  001274  5ADD               	subwfb	postdec2,f,c
  7440  001276                     i2l3255:
  7441                           
  7442                           ;relogio.c: 48: }
  7443                           ;relogio.c: 49: if(c->mes < 1){
  7444  001276  EE20 F002          	lfsr	2,2
  7445  00127A  5005               	movf	tratar_relogio@c,w,c
  7446  00127C  26D9               	addwf	fsr2l,f,c
  7447  00127E  5006               	movf	tratar_relogio@c+1,w,c
  7448  001280  22DA               	addwfc	fsr2h,f,c
  7449  001282  0E01               	movlw	1
  7450  001284  BEDB               	btfsc	plusw2,7,c
  7451  001286  D006               	goto	i2l3257
  7452  001288  0E01               	movlw	1
  7453  00128A  50DB               	movf	plusw2,w,c
  7454  00128C  E122               	bnz	i2l3261
  7455  00128E  04DE               	decf	postinc2,w,c
  7456  001290  B0D8               	btfsc	status,0,c
  7457  001292  D01F               	goto	i2l3261
  7458  001294                     i2l3257:
  7459                           
  7460                           ;relogio.c: 50: c->mes = 12;
  7461  001294  EE20 F002          	lfsr	2,2
  7462  001298  5005               	movf	tratar_relogio@c,w,c
  7463  00129A  26D9               	addwf	fsr2l,f,c
  7464  00129C  5006               	movf	tratar_relogio@c+1,w,c
  7465  00129E  22DA               	addwfc	fsr2h,f,c
  7466  0012A0  0E0C               	movlw	12
  7467  0012A2  6EDE               	movwf	postinc2,c
  7468  0012A4  0E00               	movlw	0
  7469  0012A6  6EDD               	movwf	postdec2,c
  7470                           
  7471                           ;relogio.c: 51: c->ano--;
  7472  0012A8  EE20 F004          	lfsr	2,4
  7473  0012AC  5005               	movf	tratar_relogio@c,w,c
  7474  0012AE  26D9               	addwf	fsr2l,f,c
  7475  0012B0  5006               	movf	tratar_relogio@c+1,w,c
  7476  0012B2  22DA               	addwfc	fsr2h,f,c
  7477  0012B4  06DE               	decf	postinc2,f,c
  7478  0012B6  0E00               	movlw	0
  7479  0012B8  5ADD               	subwfb	postdec2,f,c
  7480                           
  7481                           ;relogio.c: 52: verifica_b(c->ano);
  7482  0012BA  EE20 F004          	lfsr	2,4
  7483  0012BE  5005               	movf	tratar_relogio@c,w,c
  7484  0012C0  26D9               	addwf	fsr2l,f,c
  7485  0012C2  5006               	movf	tratar_relogio@c+1,w,c
  7486  0012C4  22DA               	addwfc	fsr2h,f,c
  7487  0012C6  CFDE F001          	movff	postinc2,verifica_b@ano
  7488  0012CA  CFDD F002          	movff	postdec2,verifica_b@ano+1
  7489  0012CE  EC0B  F012         	call	_verifica_b	;wreg free
  7490  0012D2                     i2l3261:
  7491                           
  7492                           ;relogio.c: 53: }
  7493                           ;relogio.c: 55: if(c->ano < 0) c->ano = 0;
  7494  0012D2  EE20 F004          	lfsr	2,4
  7495  0012D6  5005               	movf	tratar_relogio@c,w,c
  7496  0012D8  26D9               	addwf	fsr2l,f,c
  7497  0012DA  5006               	movf	tratar_relogio@c+1,w,c
  7498  0012DC  22DA               	addwfc	fsr2h,f,c
  7499  0012DE  0E01               	movlw	1
  7500  0012E0  AEDB               	btfss	plusw2,7,c
  7501  0012E2  D00A               	goto	i2l395
  7502  0012E4  EE20 F004          	lfsr	2,4
  7503  0012E8  5005               	movf	tratar_relogio@c,w,c
  7504  0012EA  26D9               	addwf	fsr2l,f,c
  7505  0012EC  5006               	movf	tratar_relogio@c+1,w,c
  7506  0012EE  22DA               	addwfc	fsr2h,f,c
  7507  0012F0  0E00               	movlw	0
  7508  0012F2  6EDE               	movwf	postinc2,c
  7509  0012F4  0E00               	movlw	0
  7510  0012F6  6EDD               	movwf	postdec2,c
  7511  0012F8                     i2l395:
  7512                           
  7513                           ;relogio.c: 57: if(r->hora < 0){
  7514  0012F8  EE20 F004          	lfsr	2,4
  7515  0012FC  5007               	movf	tratar_relogio@r,w,c
  7516  0012FE  26D9               	addwf	fsr2l,f,c
  7517  001300  5008               	movf	tratar_relogio@r+1,w,c
  7518  001302  22DA               	addwfc	fsr2h,f,c
  7519  001304  0E01               	movlw	1
  7520  001306  AEDB               	btfss	plusw2,7,c
  7521  001308  D011               	goto	i2l396
  7522                           
  7523                           ;relogio.c: 58: c->dia--;
  7524  00130A  C005  FFD9         	movff	tratar_relogio@c,fsr2l
  7525  00130E  C006  FFDA         	movff	tratar_relogio@c+1,fsr2h
  7526  001312  06DE               	decf	postinc2,f,c
  7527  001314  0E00               	movlw	0
  7528  001316  5ADD               	subwfb	postdec2,f,c
  7529                           
  7530                           ;relogio.c: 59: r->hora = 23;
  7531  001318  EE20 F004          	lfsr	2,4
  7532  00131C  5007               	movf	tratar_relogio@r,w,c
  7533  00131E  26D9               	addwf	fsr2l,f,c
  7534  001320  5008               	movf	tratar_relogio@r+1,w,c
  7535  001322  22DA               	addwfc	fsr2h,f,c
  7536  001324  0E17               	movlw	23
  7537  001326  6EDE               	movwf	postinc2,c
  7538  001328  0E00               	movlw	0
  7539  00132A  6EDD               	movwf	postdec2,c
  7540  00132C                     i2l396:
  7541                           
  7542                           ;relogio.c: 60: }
  7543                           ;relogio.c: 62: if(r->minuto < 0){
  7544  00132C  C007  FFD9         	movff	tratar_relogio@r,fsr2l
  7545  001330  C008  FFDA         	movff	tratar_relogio@r+1,fsr2h
  7546  001334  0E01               	movlw	1
  7547  001336  AEDB               	btfss	plusw2,7,c
  7548  001338  D011               	goto	i2l3271
  7549                           
  7550                           ;relogio.c: 63: r->minuto = 59;
  7551  00133A  C007  FFD9         	movff	tratar_relogio@r,fsr2l
  7552  00133E  C008  FFDA         	movff	tratar_relogio@r+1,fsr2h
  7553  001342  0E3B               	movlw	59
  7554  001344  6EDE               	movwf	postinc2,c
  7555  001346  0E00               	movlw	0
  7556  001348  6EDD               	movwf	postdec2,c
  7557                           
  7558                           ;relogio.c: 64: r->hora--;
  7559  00134A  EE20 F004          	lfsr	2,4
  7560  00134E  5007               	movf	tratar_relogio@r,w,c
  7561  001350  26D9               	addwf	fsr2l,f,c
  7562  001352  5008               	movf	tratar_relogio@r+1,w,c
  7563  001354  22DA               	addwfc	fsr2h,f,c
  7564  001356  06DE               	decf	postinc2,f,c
  7565  001358  0E00               	movlw	0
  7566  00135A  5ADD               	subwfb	postdec2,f,c
  7567  00135C                     i2l3271:
  7568                           
  7569                           ;relogio.c: 65: }
  7570                           ;relogio.c: 67: if(r->segundo < 0){
  7571  00135C  EE20 F002          	lfsr	2,2
  7572  001360  5007               	movf	tratar_relogio@r,w,c
  7573  001362  26D9               	addwf	fsr2l,f,c
  7574  001364  5008               	movf	tratar_relogio@r+1,w,c
  7575  001366  22DA               	addwfc	fsr2h,f,c
  7576  001368  0E01               	movlw	1
  7577  00136A  AEDB               	btfss	plusw2,7,c
  7578  00136C  0012               	return	
  7579                           
  7580                           ;relogio.c: 68: r->segundo = 59;
  7581  00136E  EE20 F002          	lfsr	2,2
  7582  001372  5007               	movf	tratar_relogio@r,w,c
  7583  001374  26D9               	addwf	fsr2l,f,c
  7584  001376  5008               	movf	tratar_relogio@r+1,w,c
  7585  001378  22DA               	addwfc	fsr2h,f,c
  7586  00137A  0E3B               	movlw	59
  7587  00137C  6EDE               	movwf	postinc2,c
  7588  00137E  0E00               	movlw	0
  7589  001380  6EDD               	movwf	postdec2,c
  7590                           
  7591                           ;relogio.c: 69: r->minuto--;
  7592  001382  C007  FFD9         	movff	tratar_relogio@r,fsr2l
  7593  001386  C008  FFDA         	movff	tratar_relogio@r+1,fsr2h
  7594  00138A  06DE               	decf	postinc2,f,c
  7595  00138C  0E00               	movlw	0
  7596  00138E  5ADD               	subwfb	postdec2,f,c
  7597  001390  0012               	return	
  7598  001392                     __end_of_tratar_relogio:
  7599                           	opt stack 0
  7600                           pclatu	equ	0xFFB
  7601                           pclath	equ	0xFFA
  7602                           tblptru	equ	0xFF8
  7603                           tblptrh	equ	0xFF7
  7604                           tblptrl	equ	0xFF6
  7605                           tablat	equ	0xFF5
  7606                           prodh	equ	0xFF4
  7607                           prodl	equ	0xFF3
  7608                           intcon	equ	0xFF2
  7609                           postinc0	equ	0xFEE
  7610                           fsr0h	equ	0xFEA
  7611                           fsr0l	equ	0xFE9
  7612                           wreg	equ	0xFE8
  7613                           postinc1	equ	0xFE6
  7614                           postdec1	equ	0xFE5
  7615                           fsr1h	equ	0xFE2
  7616                           fsr1l	equ	0xFE1
  7617                           indf2	equ	0xFDF
  7618                           postinc2	equ	0xFDE
  7619                           postdec2	equ	0xFDD
  7620                           plusw2	equ	0xFDB
  7621                           fsr2h	equ	0xFDA
  7622                           fsr2l	equ	0xFD9
  7623                           status	equ	0xFD8
  7624                           
  7625 ;; *************** function _verifica_b *****************
  7626 ;; Defined at:
  7627 ;;		line 6 in file "relogio.c"
  7628 ;; Parameters:    Size  Location     Type
  7629 ;;  ano             2    0[COMRAM] int 
  7630 ;; Auto vars:     Size  Location     Type
  7631 ;;		None
  7632 ;; Return value:  Size  Location     Type
  7633 ;;                  1    wreg      void 
  7634 ;; Registers used:
  7635 ;;		wreg, status,2, status,0
  7636 ;; Tracked objects:
  7637 ;;		On entry : 0/0
  7638 ;;		On exit  : 0/0
  7639 ;;		Unchanged: 0/0
  7640 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7641 ;;      Params:         2       0       0       0       0       0       0       0       0
  7642 ;;      Locals:         0       0       0       0       0       0       0       0       0
  7643 ;;      Temps:          2       0       0       0       0       0       0       0       0
  7644 ;;      Totals:         4       0       0       0       0       0       0       0       0
  7645 ;;Total ram usage:        4 bytes
  7646 ;; Hardware stack levels used:    1
  7647 ;; This function calls:
  7648 ;;		Nothing
  7649 ;; This function is called by:
  7650 ;;		_tratar_relogio
  7651 ;; This function uses a non-reentrant model
  7652 ;;
  7653                           
  7654                           	psect	text42
  7655  002416                     __ptext42:
  7656                           	opt stack 0
  7657  002416                     _verifica_b:
  7658                           	opt stack 22
  7659                           
  7660                           ;relogio.c: 7: if(ano%4==0){
  7661                           
  7662                           ;incstack = 0
  7663  002416  0E03               	movlw	3
  7664  002418  1401               	andwf	verifica_b@ano,w,c
  7665  00241A  6E03               	movwf	??_verifica_b& (0+255),c
  7666  00241C  0E00               	movlw	0
  7667  00241E  1402               	andwf	verifica_b@ano+1,w,c
  7668  002420  6E04               	movwf	(??_verifica_b+1)& (0+255),c
  7669  002422  5003               	movf	??_verifica_b,w,c
  7670  002424  1004               	iorwf	??_verifica_b+1,w,c
  7671  002426  A4D8               	btfss	status,2,c
  7672  002428  D006               	goto	i2l2999
  7673                           
  7674                           ;relogio.c: 8: qtdDias_mes[1] = 29;
  7675  00242A  0E00               	movlw	0
  7676  00242C  0100               	movlb	0	; () banked
  7677  00242E  6FA7               	movwf	(_qtdDias_mes+3)& (0+255),b
  7678  002430  0E1D               	movlw	29
  7679  002432  6FA6               	movwf	(_qtdDias_mes+2)& (0+255),b
  7680                           
  7681                           ;relogio.c: 9: }else{
  7682  002434  0012               	return	
  7683  002436                     i2l2999:
  7684                           
  7685                           ;relogio.c: 10: qtdDias_mes[1] = 28;
  7686  002436  0E00               	movlw	0
  7687  002438  0100               	movlb	0	; () banked
  7688  00243A  6FA7               	movwf	(_qtdDias_mes+3)& (0+255),b
  7689  00243C  0E1C               	movlw	28
  7690  00243E  6FA6               	movwf	(_qtdDias_mes+2)& (0+255),b
  7691  002440  0012               	return	
  7692  002442                     __end_of_verifica_b:
  7693                           	opt stack 0
  7694                           pclatu	equ	0xFFB
  7695                           pclath	equ	0xFFA
  7696                           tblptru	equ	0xFF8
  7697                           tblptrh	equ	0xFF7
  7698                           tblptrl	equ	0xFF6
  7699                           tablat	equ	0xFF5
  7700                           prodh	equ	0xFF4
  7701                           prodl	equ	0xFF3
  7702                           intcon	equ	0xFF2
  7703                           postinc0	equ	0xFEE
  7704                           fsr0h	equ	0xFEA
  7705                           fsr0l	equ	0xFE9
  7706                           wreg	equ	0xFE8
  7707                           postinc1	equ	0xFE6
  7708                           postdec1	equ	0xFE5
  7709                           fsr1h	equ	0xFE2
  7710                           fsr1l	equ	0xFE1
  7711                           indf2	equ	0xFDF
  7712                           postinc2	equ	0xFDE
  7713                           postdec2	equ	0xFDD
  7714                           plusw2	equ	0xFDB
  7715                           fsr2h	equ	0xFDA
  7716                           fsr2l	equ	0xFD9
  7717                           status	equ	0xFD8
  7718                           
  7719 ;; *************** function _converte_char_hex *****************
  7720 ;; Defined at:
  7721 ;;		line 52 in file "UART.c"
  7722 ;; Parameters:    Size  Location     Type
  7723 ;;  dado            1    wreg     unsigned char 
  7724 ;; Auto vars:     Size  Location     Type
  7725 ;;  dado            1    0[COMRAM] unsigned char 
  7726 ;; Return value:  Size  Location     Type
  7727 ;;                  1    wreg      unsigned char 
  7728 ;; Registers used:
  7729 ;;		wreg, status,2, status,0
  7730 ;; Tracked objects:
  7731 ;;		On entry : 0/0
  7732 ;;		On exit  : 0/0
  7733 ;;		Unchanged: 0/0
  7734 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7735 ;;      Params:         0       0       0       0       0       0       0       0       0
  7736 ;;      Locals:         1       0       0       0       0       0       0       0       0
  7737 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7738 ;;      Totals:         1       0       0       0       0       0       0       0       0
  7739 ;;Total ram usage:        1 bytes
  7740 ;; Hardware stack levels used:    1
  7741 ;; This function calls:
  7742 ;;		Nothing
  7743 ;; This function is called by:
  7744 ;;		_SerialRxPinInterrupt
  7745 ;; This function uses a non-reentrant model
  7746 ;;
  7747                           
  7748                           	psect	text43
  7749  001EEE                     __ptext43:
  7750                           	opt stack 0
  7751  001EEE                     _converte_char_hex:
  7752                           	opt stack 23
  7753                           
  7754                           ; BSR set to: 0
  7755                           ;incstack = 0
  7756                           ;converte_char_hex@dado stored from wreg
  7757  001EEE  6E01               	movwf	converte_char_hex@dado,c
  7758                           
  7759                           ;UART.c: 53: if(dado == 0x31) return 0x01;
  7760  001EF0  0E31               	movlw	49
  7761  001EF2  1801               	xorwf	converte_char_hex@dado,w,c
  7762  001EF4  A4D8               	btfss	status,2,c
  7763  001EF6  D002               	goto	i2l3281
  7764  001EF8  0E01               	movlw	1
  7765  001EFA  0012               	return	
  7766  001EFC                     i2l3281:
  7767                           
  7768                           ;UART.c: 54: if(dado == 0x32) return 0x02;
  7769  001EFC  0E32               	movlw	50
  7770  001EFE  1801               	xorwf	converte_char_hex@dado,w,c
  7771  001F00  A4D8               	btfss	status,2,c
  7772  001F02  D002               	goto	i2l3287
  7773  001F04  0E02               	movlw	2
  7774  001F06  0012               	return	
  7775  001F08                     i2l3287:
  7776                           
  7777                           ;UART.c: 55: if(dado == 0x33) return 0x03;
  7778  001F08  0E33               	movlw	51
  7779  001F0A  1801               	xorwf	converte_char_hex@dado,w,c
  7780  001F0C  A4D8               	btfss	status,2,c
  7781  001F0E  D002               	goto	i2l3293
  7782  001F10  0E03               	movlw	3
  7783  001F12  0012               	return	
  7784  001F14                     i2l3293:
  7785                           
  7786                           ;UART.c: 56: if(dado == 0x34) return 0x04;
  7787  001F14  0E34               	movlw	52
  7788  001F16  1801               	xorwf	converte_char_hex@dado,w,c
  7789  001F18  A4D8               	btfss	status,2,c
  7790  001F1A  D002               	goto	i2l3299
  7791  001F1C  0E04               	movlw	4
  7792  001F1E  0012               	return	
  7793  001F20                     i2l3299:
  7794                           
  7795                           ;UART.c: 57: if(dado == 0x35) return 0x05;
  7796  001F20  0E35               	movlw	53
  7797  001F22  1801               	xorwf	converte_char_hex@dado,w,c
  7798  001F24  A4D8               	btfss	status,2,c
  7799  001F26  D002               	goto	i2l3305
  7800  001F28  0E05               	movlw	5
  7801  001F2A  0012               	return	
  7802  001F2C                     i2l3305:
  7803                           
  7804                           ;UART.c: 58: if(dado == 0x36) return 0x06;
  7805  001F2C  0E36               	movlw	54
  7806  001F2E  1801               	xorwf	converte_char_hex@dado,w,c
  7807  001F30  A4D8               	btfss	status,2,c
  7808  001F32  D002               	goto	i2l3311
  7809  001F34  0E06               	movlw	6
  7810  001F36  0012               	return	
  7811  001F38                     i2l3311:
  7812                           
  7813                           ;UART.c: 59: if(dado == 0x37) return 0x07;
  7814  001F38  0E37               	movlw	55
  7815  001F3A  1801               	xorwf	converte_char_hex@dado,w,c
  7816  001F3C  A4D8               	btfss	status,2,c
  7817  001F3E  D002               	goto	i2l3317
  7818  001F40  0E07               	movlw	7
  7819  001F42  0012               	return	
  7820  001F44                     i2l3317:
  7821                           
  7822                           ;UART.c: 60: if(dado == 0x38) return 0x08;
  7823  001F44  0E38               	movlw	56
  7824  001F46  1801               	xorwf	converte_char_hex@dado,w,c
  7825  001F48  A4D8               	btfss	status,2,c
  7826  001F4A  D002               	goto	i2l3323
  7827  001F4C  0E08               	movlw	8
  7828  001F4E  0012               	return	
  7829  001F50                     i2l3323:
  7830                           
  7831                           ;UART.c: 61: if(dado == 0x39) return 0x09;
  7832  001F50  0E39               	movlw	57
  7833  001F52  1801               	xorwf	converte_char_hex@dado,w,c
  7834  001F54  A4D8               	btfss	status,2,c
  7835  001F56  0012               	return	
  7836  001F58  0E09               	movlw	9
  7837  001F5A  0012               	return	
  7838  001F5C                     __end_of_converte_char_hex:
  7839                           	opt stack 0
  7840                           pclatu	equ	0xFFB
  7841                           pclath	equ	0xFFA
  7842                           tblptru	equ	0xFF8
  7843                           tblptrh	equ	0xFF7
  7844                           tblptrl	equ	0xFF6
  7845                           tablat	equ	0xFF5
  7846                           prodh	equ	0xFF4
  7847                           prodl	equ	0xFF3
  7848                           intcon	equ	0xFF2
  7849                           postinc0	equ	0xFEE
  7850                           fsr0h	equ	0xFEA
  7851                           fsr0l	equ	0xFE9
  7852                           wreg	equ	0xFE8
  7853                           postinc1	equ	0xFE6
  7854                           postdec1	equ	0xFE5
  7855                           fsr1h	equ	0xFE2
  7856                           fsr1l	equ	0xFE1
  7857                           indf2	equ	0xFDF
  7858                           postinc2	equ	0xFDE
  7859                           postdec2	equ	0xFDD
  7860                           plusw2	equ	0xFDB
  7861                           fsr2h	equ	0xFDA
  7862                           fsr2l	equ	0xFD9
  7863                           status	equ	0xFD8
  7864                           pclatu	equ	0xFFB
  7865                           pclath	equ	0xFFA
  7866                           tblptru	equ	0xFF8
  7867                           tblptrh	equ	0xFF7
  7868                           tblptrl	equ	0xFF6
  7869                           tablat	equ	0xFF5
  7870                           prodh	equ	0xFF4
  7871                           prodl	equ	0xFF3
  7872                           intcon	equ	0xFF2
  7873                           postinc0	equ	0xFEE
  7874                           fsr0h	equ	0xFEA
  7875                           fsr0l	equ	0xFE9
  7876                           wreg	equ	0xFE8
  7877                           postinc1	equ	0xFE6
  7878                           postdec1	equ	0xFE5
  7879                           fsr1h	equ	0xFE2
  7880                           fsr1l	equ	0xFE1
  7881                           indf2	equ	0xFDF
  7882                           postinc2	equ	0xFDE
  7883                           postdec2	equ	0xFDD
  7884                           plusw2	equ	0xFDB
  7885                           fsr2h	equ	0xFDA
  7886                           fsr2l	equ	0xFD9
  7887                           status	equ	0xFD8
  7888                           
  7889                           	psect	rparam
  7890  0000                     pclatu	equ	0xFFB
  7891                           pclath	equ	0xFFA
  7892                           tblptru	equ	0xFF8
  7893                           tblptrh	equ	0xFF7
  7894                           tblptrl	equ	0xFF6
  7895                           tablat	equ	0xFF5
  7896                           prodh	equ	0xFF4
  7897                           prodl	equ	0xFF3
  7898                           intcon	equ	0xFF2
  7899                           postinc0	equ	0xFEE
  7900                           fsr0h	equ	0xFEA
  7901                           fsr0l	equ	0xFE9
  7902                           wreg	equ	0xFE8
  7903                           postinc1	equ	0xFE6
  7904                           postdec1	equ	0xFE5
  7905                           fsr1h	equ	0xFE2
  7906                           fsr1l	equ	0xFE1
  7907                           indf2	equ	0xFDF
  7908                           postinc2	equ	0xFDE
  7909                           postdec2	equ	0xFDD
  7910                           plusw2	equ	0xFDB
  7911                           fsr2h	equ	0xFDA
  7912                           fsr2l	equ	0xFD9
  7913                           status	equ	0xFD8
  7914                           
  7915                           	psect	temp
  7916  000040                     btemp:
  7917                           	opt stack 0
  7918  000040                     	ds	1
  7919  0000                     int$flags	set	btemp
  7920                           pclatu	equ	0xFFB
  7921                           pclath	equ	0xFFA
  7922                           tblptru	equ	0xFF8
  7923                           tblptrh	equ	0xFF7
  7924                           tblptrl	equ	0xFF6
  7925                           tablat	equ	0xFF5
  7926                           prodh	equ	0xFF4
  7927                           prodl	equ	0xFF3
  7928                           intcon	equ	0xFF2
  7929                           postinc0	equ	0xFEE
  7930                           fsr0h	equ	0xFEA
  7931                           fsr0l	equ	0xFE9
  7932                           wreg	equ	0xFE8
  7933                           postinc1	equ	0xFE6
  7934                           postdec1	equ	0xFE5
  7935                           fsr1h	equ	0xFE2
  7936                           fsr1l	equ	0xFE1
  7937                           indf2	equ	0xFDF
  7938                           postinc2	equ	0xFDE
  7939                           postdec2	equ	0xFDD
  7940                           plusw2	equ	0xFDB
  7941                           fsr2h	equ	0xFDA
  7942                           fsr2l	equ	0xFD9
  7943                           status	equ	0xFD8


Data Sizes:
    Strings     207
    Constant    10
    Data        24
    BSS         58
    Persistent  6
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     33      63
    BANK0           160     40      98
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    crc16@dados	PTR unsigned char  size(2) Largest target is 7
		 -> dado(BANK0[7]), 

    putsXLCD@buffer	PTR unsigned char  size(2) Largest target is 9
		 -> STR_23(CODE[2]), STR_22(CODE[2]), STR_21(CODE[9]), 

    putrsXLCD@buffer	PTR const unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 18
		 -> STR_20(CODE[12]), STR_19(CODE[11]), STR_18(CODE[11]), STR_17(CODE[10]), 
		 -> STR_16(CODE[11]), STR_15(CODE[10]), STR_14(CODE[10]), STR_13(CODE[9]), 
		 -> STR_12(CODE[18]), STR_11(CODE[17]), STR_10(CODE[17]), STR_9(CODE[16]), 
		 -> STR_8(CODE[17]), STR_7(CODE[16]), STR_6(CODE[16]), STR_5(CODE[15]), 
		 -> STR_4(CODE[17]), STR_3(CODE[16]), STR_2(CODE[16]), STR_1(CODE[15]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    tratar_alarme@c	PTR struct . size(2) Largest target is 6
		 -> alarme(COMRAM[6]), 

    tratar_relogio@c	PTR struct . size(2) Largest target is 6
		 -> ca(COMRAM[6]), 

    tratar_relogio@r	PTR struct . size(2) Largest target is 6
		 -> re(COMRAM[6]), 

    sp__exibirAlarme	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    exibirAlarme@string	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    sp__exibirHora	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    exibirHora@string	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    sp__exibirData	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    exibirData@string	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 


Critical Paths under _main in COMRAM

    _main->_ajustarT1
    _main->_despertar
    _verifica_comando->_crc16
    _envia_respostaTX->_tx_data
    _despertarAlarme->_SetDDRamAddr
    _despertarAlarme->_WriteCmdXLCD
    _inicializaTela2->_SetDDRamAddr
    _inicializaTela2->_WriteCmdXLCD
    _putsXLCD->_WriteDataXLCD
    _exibirAlarme->_sprintf
    _controlaCursor->_SetDDRamAddr
    _inicializaTela1->_SetDDRamAddr
    _inicializaTela1->_WriteCmdXLCD
    _putrsXLCD->_WriteDataXLCD
    _exibirHora->_sprintf
    _exibirData->_sprintf
    _sprintf->___lwmod
    _controlaCursorR->_SetDDRamAddr
    _controlaCursorR->_WriteCmdXLCD
    _ajustarAlarme->_tratar_alarme
    _LCD_Clear->_WriteCmdXLCD
    _OpenXLCD->_Delay10KTCYx
    _OpenXLCD->_SetDDRamAddr
    _OpenXLCD->_WriteCmdXLCD
    _DelayPORXLCD->_Delay1KTCYx
    _DelayFor18TCY->_Delay10TCYx

Critical Paths under _SerialRxPinInterrupt in COMRAM

    _SerialRxPinInterrupt->_tratar_relogio
    _tratar_relogio->_verifica_b

Critical Paths under _main in BANK0

    _main->_atualiza_tela
    _despertarAlarme->_SetDDRamAddr
    _inicializaTela2->_putrsXLCD
    _exibirAlarme->_sprintf
    _controlaCursor->_SetDDRamAddr
    _inicializaTela1->_putrsXLCD
    _putrsXLCD->_exibirAlarme
    _putrsXLCD->_exibirData
    _putrsXLCD->_exibirHora
    _exibirHora->_sprintf
    _exibirData->_sprintf
    _sprintf->___lwmod
    ___lwmod->___lwdiv
    _controlaCursorR->_SetDDRamAddr
    _ajustarAlarme->_tratar_alarme
    _InitXLCD->_OpenXLCD
    _OpenXLCD->_SetDDRamAddr

Critical Paths under _SerialRxPinInterrupt in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _SerialRxPinInterrupt in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _SerialRxPinInterrupt in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _SerialRxPinInterrupt in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _SerialRxPinInterrupt in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _SerialRxPinInterrupt in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _SerialRxPinInterrupt in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _SerialRxPinInterrupt in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0   33953
                                             38 BANK0      2     2      0
                           _InitXLCD
                          _LCD_Clear
                      _ajustarAlarme
                          _ajustarT1
                      _atualiza_tela
                          _despertar
                    _despertarAlarme
                    _inicializaTela1
                    _inicializarUART
                     _maquina_estado
 ---------------------------------------------------------------------------------
 (1) _maquina_estado                                       0     0      0      86
                   _envia_respostaTX
                      _trata_comando
                   _verifica_comando
 ---------------------------------------------------------------------------------
 (2) _verifica_comando                                     0     0      0      64
                              _crc16
 ---------------------------------------------------------------------------------
 (3) _crc16                                                2     0      2      64
                                             31 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) _trata_comando                                        0     0      0       0
                    _montar_resposta
                _realizar_alteracoes
 ---------------------------------------------------------------------------------
 (3) _realizar_alteracoes                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _montar_resposta                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _envia_respostaTX                                     0     0      0      22
                            _tx_data
 ---------------------------------------------------------------------------------
 (3) _tx_data                                              1     1      0      22
                                             31 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _inicializarUART                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _despertarAlarme                                      0     0      0     606
                       _SetDDRamAddr
                       _WriteCmdXLCD
                           _putsXLCD
 ---------------------------------------------------------------------------------
 (1) _despertar                                            2     0      2       0
                                             31 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _atualiza_tela                                        2     2      0   19871
                                             36 BANK0      2     2      0
                    _inicializaTela1
                    _inicializaTela2
 ---------------------------------------------------------------------------------
 (2) _inicializaTela2                                      0     0      0    7395
                       _SetDDRamAddr
                       _WriteCmdXLCD
                     _controlaCursor
                       _exibirAlarme
                          _putrsXLCD
                           _putsXLCD
 ---------------------------------------------------------------------------------
 (2) _putsXLCD                                             2     0      2     420
                                              0 BANK0      2     0      2
                           _BusyXLCD
                      _WriteDataXLCD
 ---------------------------------------------------------------------------------
 (3) _exibirAlarme                                         6     0      6    6276
                                             28 BANK0      6     0      6
                            _sprintf
 ---------------------------------------------------------------------------------
 (3) _controlaCursor                                       2     2      0      93
                                              3 BANK0      2     2      0
                       _SetDDRamAddr
 ---------------------------------------------------------------------------------
 (1) _inicializaTela1                                      0     0      0   12476
                       _SetDDRamAddr
                       _WriteCmdXLCD
                    _controlaCursorR
                         _exibirData
                         _exibirHora
                          _putrsXLCD
 ---------------------------------------------------------------------------------
 (2) _putrsXLCD                                            2     0      2     420
                                             34 BANK0      2     0      2
                           _BusyXLCD
                      _WriteDataXLCD
                       _exibirAlarme (ARG)
                         _exibirData (ARG)
                         _exibirHora (ARG)
 ---------------------------------------------------------------------------------
 (3) _WriteDataXLCD                                        1     1      0      93
                                             32 COMRAM     1     1      0
                      _DelayFor18TCY
 ---------------------------------------------------------------------------------
 (2) _exibirHora                                           6     0      6    6276
                                             28 BANK0      6     0      6
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _exibirData                                           6     0      6    5408
                                             28 BANK0      6     0      6
                            _sprintf
 ---------------------------------------------------------------------------------
 (3) _sprintf                                             27    17     10    4557
                                             32 COMRAM     1     1      0
                                             11 BANK0     17     7     10
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (4) ___lwmod                                              5     1      4     386
                                             31 COMRAM     1     1      0
                                              7 BANK0      4     0      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (4) ___lwdiv                                              7     3      4     395
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (2) _controlaCursorR                                      2     2      0     186
                                              3 BANK0      2     2      0
                       _SetDDRamAddr
                       _WriteCmdXLCD
 ---------------------------------------------------------------------------------
 (1) _ajustarT1                                            2     2      0       0
                                             31 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _ajustarAlarme                                        2     2      0     449
                                              2 BANK0      2     2      0
                      _tratar_alarme
 ---------------------------------------------------------------------------------
 (2) _tratar_alarme                                        4     2      2     449
                                             31 COMRAM     2     0      2
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _LCD_Clear                                            0     0      0     124
                           _BusyXLCD
                       _WriteCmdXLCD
 ---------------------------------------------------------------------------------
 (1) _InitXLCD                                             0     0      0     341
                           _BusyXLCD
                           _OpenXLCD
 ---------------------------------------------------------------------------------
 (2) _OpenXLCD                                             1     1      0     310
                                              3 BANK0      1     1      0
                           _BusyXLCD
                       _Delay10KTCYx
                       _DelayPORXLCD
                       _SetDDRamAddr
                       _WriteCmdXLCD
 ---------------------------------------------------------------------------------
 (3) _WriteCmdXLCD                                         1     1      0      93
                                             32 COMRAM     1     1      0
                      _DelayFor18TCY
 ---------------------------------------------------------------------------------
 (3) _SetDDRamAddr                                         4     4      0      93
                                             32 COMRAM     1     1      0
                                              0 BANK0      3     3      0
                      _DelayFor18TCY
 ---------------------------------------------------------------------------------
 (3) _DelayPORXLCD                                         0     0      0      31
                        _Delay1KTCYx
 ---------------------------------------------------------------------------------
 (4) _Delay1KTCYx                                          1     1      0      31
                                             31 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _Delay10KTCYx                                         2     2      0      31
                                             31 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (3) _BusyXLCD                                             0     0      0      31
                      _DelayFor18TCY
 ---------------------------------------------------------------------------------
 (4) _DelayFor18TCY                                        0     0      0      31
                        _Delay10TCYx
 ---------------------------------------------------------------------------------
 (5) _Delay10TCYx                                          1     1      0      31
                                             31 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _SerialRxPinInterrupt                                14    14      0    1398
                                             17 COMRAM    14    14      0
                  _converte_char_hex
                     _tratar_relogio
 ---------------------------------------------------------------------------------
 (8) _tratar_relogio                                      13     9      4    1200
                                              4 COMRAM    13     9      4
                         _verifica_b
 ---------------------------------------------------------------------------------
 (9) _verifica_b                                           4     2      2     214
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (8) _converte_char_hex                                    1     1      0     198
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _InitXLCD
     _BusyXLCD
       _DelayFor18TCY
         _Delay10TCYx
     _OpenXLCD
       _BusyXLCD
         _DelayFor18TCY
           _Delay10TCYx
       _Delay10KTCYx
       _DelayPORXLCD
         _Delay1KTCYx
       _SetDDRamAddr
         _DelayFor18TCY
           _Delay10TCYx
       _WriteCmdXLCD
         _DelayFor18TCY
           _Delay10TCYx
   _LCD_Clear
     _BusyXLCD
       _DelayFor18TCY
         _Delay10TCYx
     _WriteCmdXLCD
       _DelayFor18TCY
         _Delay10TCYx
   _ajustarAlarme
     _tratar_alarme
   _ajustarT1
   _atualiza_tela
     _inicializaTela1
       _SetDDRamAddr
         _DelayFor18TCY
           _Delay10TCYx
       _WriteCmdXLCD
         _DelayFor18TCY
           _Delay10TCYx
       _controlaCursorR
         _SetDDRamAddr
           _DelayFor18TCY
             _Delay10TCYx
         _WriteCmdXLCD
           _DelayFor18TCY
             _Delay10TCYx
       _exibirData
         _sprintf
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
       _exibirHora
         _sprintf
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
       _putrsXLCD
         _BusyXLCD
           _DelayFor18TCY
             _Delay10TCYx
         _WriteDataXLCD
           _DelayFor18TCY
             _Delay10TCYx
         _exibirAlarme (ARG)
           _sprintf
             ___lwdiv
             ___lwmod
               ___lwdiv (ARG)
         _exibirData (ARG)
           _sprintf
             ___lwdiv
             ___lwmod
               ___lwdiv (ARG)
         _exibirHora (ARG)
           _sprintf
             ___lwdiv
             ___lwmod
               ___lwdiv (ARG)
     _inicializaTela2
       _SetDDRamAddr
         _DelayFor18TCY
           _Delay10TCYx
       _WriteCmdXLCD
         _DelayFor18TCY
           _Delay10TCYx
       _controlaCursor
         _SetDDRamAddr
           _DelayFor18TCY
             _Delay10TCYx
       _exibirAlarme
         _sprintf
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
       _putrsXLCD
         _BusyXLCD
           _DelayFor18TCY
             _Delay10TCYx
         _WriteDataXLCD
           _DelayFor18TCY
             _Delay10TCYx
         _exibirAlarme (ARG)
           _sprintf
             ___lwdiv
             ___lwmod
               ___lwdiv (ARG)
         _exibirData (ARG)
           _sprintf
             ___lwdiv
             ___lwmod
               ___lwdiv (ARG)
         _exibirHora (ARG)
           _sprintf
             ___lwdiv
             ___lwmod
               ___lwdiv (ARG)
       _putsXLCD
         _BusyXLCD
           _DelayFor18TCY
             _Delay10TCYx
         _WriteDataXLCD
           _DelayFor18TCY
             _Delay10TCYx
   _despertar
   _despertarAlarme
     _SetDDRamAddr
       _DelayFor18TCY
         _Delay10TCYx
     _WriteCmdXLCD
       _DelayFor18TCY
         _Delay10TCYx
     _putsXLCD
       _BusyXLCD
         _DelayFor18TCY
           _Delay10TCYx
       _WriteDataXLCD
         _DelayFor18TCY
           _Delay10TCYx
   _inicializaTela1
     _SetDDRamAddr
       _DelayFor18TCY
         _Delay10TCYx
     _WriteCmdXLCD
       _DelayFor18TCY
         _Delay10TCYx
     _controlaCursorR
       _SetDDRamAddr
         _DelayFor18TCY
           _Delay10TCYx
       _WriteCmdXLCD
         _DelayFor18TCY
           _Delay10TCYx
     _exibirData
       _sprintf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
     _exibirHora
       _sprintf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
     _putrsXLCD
       _BusyXLCD
         _DelayFor18TCY
           _Delay10TCYx
       _WriteDataXLCD
         _DelayFor18TCY
           _Delay10TCYx
       _exibirAlarme (ARG)
         _sprintf
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
       _exibirData (ARG)
         _sprintf
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
       _exibirHora (ARG)
         _sprintf
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
   _inicializarUART
   _maquina_estado
     _envia_respostaTX
       _tx_data
     _trata_comando
       _montar_resposta
       _realizar_alteracoes
     _verifica_comando
       _crc16

 _SerialRxPinInterrupt (ROOT)
   _converte_char_hex
   _tratar_relogio
     _verifica_b

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     28      62       5       61.3%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     21      3F       1       67.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      A1      20        0.0%
DATA                 0      0      A1       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.41 build -162212810 
Symbol Table                                                                                   Mon Jan 10 09:13:52 2022

      __size_of_controlaCursor 0044                              _i 002A       __size_of_controlaCursorR 008A  
                           l91 14C6                             _T1 0099                             _T2 0097  
                           l97 1522                             l89 14CA                             _ca 003A  
                           _re 0034               ?_inicializaTela1 0001               ?_inicializaTela2 0001  
             ??_maquina_estado 0022               ?_inicializarUART 0001                            l300 1C2E  
                          l402 19DA                            l404 1A3A                            l405 1A60  
                          l325 1B14                            l318 1B18                            l335 1B92  
                          l601 2304                            l293 1BDE                            l534 207E  
                          l526 2018                            l536 208C                            l528 202C  
                          l289 1BE2                            l537 209A                            l529 2040  
                          l487 24D6          __size_of_WriteCmdXLCD 003E                            wreg 000FE8  
                _trata_comando 2110                           l1128 1EE4                           l1138 200C  
                         l3013 211C                           l3005 245C                           l3103 1AF8  
                         l3023 2130                           l3121 1B52                           l3025 2148  
                         l3017 2126                           l3009 2112                           l3201 20D8  
                         l3107 1B06                           l3203 20DE                           l3133 1B82  
                         l3125 1B62                           l3117 1B42                           l3029 214E  
                         l4031 1CB6                           l4023 1C96                           l4103 2490  
                         l4017 1C7A                           l3129 1B72                           l3209 20E8  
                         l4035 1CC6                           l4027 1CA6                           l4019 1C84  
                         l4115 1BC4                           l3091 1ACE                           l4051 1E16  
                         l4133 1C1E                           l3181 221E                           l4205 150A  
                         l4039 1CD6                           l4071 1A06                           l4119 1BD0  
                         l3095 1ADC                           l4055 1E2C                           l4231 1586  
                         l4223 1560                           l4129 1C10                           l4137 1C32  
                         l3193 20C2                           l4209 1526                           l3099 1AEA  
                         l4091 23BC                           l3195 20C8                           l4227 1578  
                         l4219 154C                           l3525 24C6                           l4085 24A8  
                         l3541 1EA6                           l3701 1672                           l3197 20CE  
                         l4229 157E                           l4079 1A7E                           l3703 1678  
                         l3711 16E0                           l4095 23C2                           l4183 147C  
                         l3537 1E94                           l3561 1FDC                           l3713 16FC  
                         l3801 17D8                           l4089 23B6                           l4177 1462  
                         l3539 1EA0                           l3811 187A                           l3549 1ED6  
                         l3565 2000                           l3557 1FCC                           l3709 16D4  
                         l3805 181E                           l3559 1FD6                           l3671 15E8  
                         l3807 1834                           l3831 0D5A                           l3823 0CE8  
                         l3751 21B8                           l3911 0A5E                           l3903 09EC  
                         l3569 24B6                           l3681 1618                           l3665 15B8  
                         l3809 184A                           l3913 0A74                           l2881 20A8  
                         l3771 1D94                           l3763 1D74                           l3683 161E  
                         l3659 159A                           l3843 0DF8                           l3835 0D86  
                         l3747 21A8                           l3755 21C0                           l3931 0B88  
                         l3923 0B16                           l3915 0AA4                           l3907 0A32  
                         l2875 2054                           l3773 1D9C                           l3765 1D7C  
                         l3781 1DB4                           l3861 0EF2                           l3845 0E0E  
                         l3829 0D2A                           l3749 21B0                           l3941 0C10  
                         l3933 0B9E                           l3925 0B2C                           l3917 0ABA  
                         l3775 1DA4                           l3767 1D84                           l3695 1654  
                         l3871 0F94                           l3863 0F22                           l3855 0EB0  
                         l3847 0E3E                           l3839 0DCC                           l3943 0C26  
                         l3935 0BB4                           l3777 1DAC                           l3769 1D8C  
                         l3793 1766                           l3873 0FAA                           l3865 0F38  
                         l3857 0EC6                           l3849 0E54                           l3953 23E8  
                         l3945 0C3C                           l3929 0B58                           l3971 247C  
                         l3875 0FC0                           l3867 0F4E                           l3947 0C6C  
                         l3939 0BFA                           l3891 094E                           l3963 231A  
                         l3797 1792                           l3877 0FD6                           l3799 17C2  
                         l3879 1006                           l3959 2406                           l3983 1D10  
                         l3897 0990                           l3969 233A                           l3899 09C0  
                         STR_1 08B1                           STR_2 0871                           STR_3 0861  
                         STR_4 081D                           STR_5 08C0                           STR_6 0881  
                         STR_7 0891                           STR_8 082E                           STR_9 08A1  
                         _BRGH 007D62                           u4100 0BCA                           u4030 0AD0  
                         u4040 0AE6                           u4300 1A26                           u4060 0B42  
                         u3600 177C                           u3700 0D14                           u3630 17EE  
                         u4510 1502                           u4280 19C6                           u3800 0E80  
                         u3720 0D70                           u4520 151A                           u4290 19F6  
                         _PEIE 007F96                           u3580 1720                           u3820 0EDC  
                         u3740 0D9C                           u3660 0C8C                           u3900 08F2  
                         u3590 1736                           u3750 0DE2                           u3670 0CA2  
                         u3910 0908                           u3495 1F78                           u4607 148E  
                         u3680 0CB8                           u3920 091E                           u4480 14BC  
                         u4617 14DC                           u3690 0CFE                           u3930 0964  
                         u4627 1AB4                           _RCIE 007CED                           u3860 0F64  
                         u3940 097A                           _RCIF 007CF5                           u4637 1B26  
                         u3790 0E6A                           u4647 1BAA                           u3960 09D6  
                         u4657 1BF4                           u4667 24B8                           u3980 0A02  
                         u4677 2482                           u3990 0A48                           _RCIP 007CFD  
                         u4687 24C8                           _TMR0 000FD6                           _TXIF 007CF4  
                         _dado 009D                           _main 1392             __size_of_LCD_Clear 0012  
                         fsr0h 000FEA                           fsr1h 000FE2                           fsr2h 000FDA  
                         fsr0l 000FE9                           indf2 000FDF                           fsr1l 000FE1  
                         fsr2l 000FD9                           btemp 0040         __size_of_WriteDataXLCD 003E  
                         prodh 000FF4                           prodl 000FF3                           start 000E  
                _tratar_alarme 19A6                   ___param_bank 000000                ??_ajustarAlarme 0062  
                  _Delay10TCYx 24C4      __size_of_envia_respostaTX 003A                  _atualiza_tela 23B4  
                 _WriteCmdXLCD 2266                    _Delay1KTCYx 24B4                  ?_SetDDRamAddr 0001  
                        ?_main 0001                          STR_10 083F                          STR_11 0850  
                        STR_20 0811                          STR_12 080B                          STR_13 08C6  
                        STR_21 08CF                          STR_14 0887                          STR_22 08D8  
                        STR_23 08D6                          STR_15 0897                          STR_16 0834  
                        STR_17 08A7                          STR_18 0845                          STR_19 0856  
              __end_of___lwdiv 1EEE                __end_of___lwmod 2016                          i2l123 196A  
                        i2l116 1952                          i2l117 1934                          i2l395 12F8  
                        i2l396 132C                          i2l388 10A2                          _RCREG 000FAE  
                        _RCSTA 000FAB                          _SPBRG 000FAF                          _PORTB 000F81  
                        _TRISB 000F93                          _TRISD 000F95                          _TXREG 000FAD  
        __size_of_Delay10KTCYx 0016                          _TXSTA 000FAC                 ?_trata_comando 0001  
                        _crc16 24E0                __end_of_dpowers 080B                          pclath 000FFA  
                        tablat 000FF5                          plusw2 000FDB               ?_montar_resposta 0001  
              __end_of_tx_data 24E0                          status 000FD8                __end_of_sprintf 170A  
               ?_tratar_alarme 0020                __initialization 2160               exibirHora@string 0091  
            ??_despertarAlarme 0022                   __end_of_main 158C                 ?_atualiza_tela 0001  
             __end_of_BusyXLCD 2318                 _tratar_relogio 1010               __end_of_InitXLCD 24B4  
            ?_verifica_comando 0001                   _Delay10KTCYx 247A          __size_of_DelayPORXLCD 0008  
               ??_SetDDRamAddr 0060                  ?_exibirAlarme 007C             ??_verifica_comando 0022  
             __end_of_OpenXLCD 1CE8                         ??_main 0086              __end_of_LCD_Clear 24A2  
                __activetblptr 000002                  _WriteDataXLCD 2228              ??_controlaCursorR 0063  
                       ?_crc16 0020                  verifica_b@ano 0001                         i2l3221 1058  
                       i2l3311 1F38                         i2l3231 10E0                         i2l3223 1060  
                       i2l3305 1F2C                         i2l3241 1196                         i2l3217 104A  
                       i2l3323 1F50                         i2l3251 121E                         i2l3235 1122  
                       i2l3317 1F44                         i2l3261 12D2                         i2l3271 135C  
                       i2l3255 1276                         i2l3431 18FC                         i2l3281 1EFC  
                       i2l3257 1294                         i2l3249 1204                         i2l3425 18D2  
                       i2l3451 1966                         i2l3293 1F14                         i2l3437 1924  
                       i2l3287 1F08                         i2l3299 1F20                         i2l2999 2436  
                       _TMR0IF 007F92                    exibirHora@h 007C                    exibirHora@m 007E  
                  exibirHora@s 0080                   _DelayPORXLCD 24EA         __end_of_tratar_relogio 1392  
               _controlaCursor 21A6                         _alarme 002E                      ??___lwdiv 0020  
                    ??___lwmod 0020                         _entrar 0095                 ??_exibirAlarme 0022  
                       clear_0 2186                         clear_1 2192                 ?_WriteDataXLCD 0001  
              ??_trata_comando 0020                   __mediumconst 0000                         tblptrh 000FF7  
                       tblptrl 000FF6                         tblptru 000FF8               __end_of_putsXLCD 234E  
                    ??_tx_data 0020                      ??_sprintf 0021                     __accesstop 0060  
      __end_of__initialization 2198                ??_tratar_alarme 0060                __CFG_PBADEN$OFF 000000  
                ___rparam_used 000001         __end_of_controlaCursor 21EA  __size_of_SerialRxPinInterrupt 199E  
              ??_atualiza_tela 0084                ?_tratar_relogio 0005                 __pcstackCOMRAM 0001  
                 __pidataBANK0 2462                  __end_of_crc16 24EA               _envia_respostaTX 22A4  
           __size_of_despertar 003E             __size_of_ajustarT1 00F2                        ??_crc16 0022  
 __size_of_realizar_alteracoes 0056                     crc16@dados 0020         __size_of_DelayFor18TCY 0008  
                   __pbssBANK0 0088                      ?_BusyXLCD 0001                      ?_InitXLCD 0001  
              WriteCmdXLCD@cmd 0021           __end_of_SetDDRamAddr 1FBA             _flag_inicializacao 00BE  
                    ?_OpenXLCD 0001                ?_controlaCursor 0001                     _flagAlarme 0024  
            WriteDataXLCD@data 0021              _converte_char_hex 1EEE                   ?_Delay10TCYx 0001  
           ?_converte_char_hex 0001                ??_WriteDataXLCD 0021                   ?_Delay1KTCYx 0001  
          ??_converte_char_hex 0001       __size_of_inicializaTela1 008A       __size_of_inicializaTela2 007A  
     __size_of_inicializarUART 0032             __size_of_putrsXLCD 0030                     ??_BusyXLCD 0021  
                   ??_InitXLCD 0022                _despertarAlarme 234E           __end_of_exibirAlarme 0C76  
                   ??_OpenXLCD 0022      __end_of_converte_char_hex 1F5C                        __Hparam 0000  
                      __Lparam 0000              __end_of_despertar 2228              __end_of_ajustarT1 1B98  
              _controlaCursorR 1D72                     _exibirData 170A                     _exibirHora 0C76  
                _DelayFor18TCY 24F2                      ?_putsXLCD 0060                        ___lwdiv 1E76  
                      ___lwmod 1FBA                   __psmallconst 0800          __end_of_ajustarAlarme 1C40  
                      __pcinit 2160                putrsXLCD@buffer 0082                Delay10TCYx@unit 0020  
                      __ramtop 0800                        __ptext0 1392                        __ptext1 20C0  
                      __ptext2 2442                        __ptext3 24E0                        __ptext4 2110  
                      __ptext5 2016                        __ptext6 206C                        __ptext7 22A4  
                      __ptext8 24D4                        __ptext9 2382                      _T0CONbits 000FD5  
                      _dpowers 0801                      _LCD_Clear 2490                        _tx_data 24D4  
      __size_of_maquina_estado 0050                        _sprintf 158C      __size_of_verifica_comando 0020  
               __pintcode_body 1884           end_of_initialization 2198             _ESTADO_COMUNICACAO 002D  
                __Lmediumconst 0000                        int_func 1884                     _posCursorR 0026  
                    _RCSTAbits 000FAB                 ?_DelayFor18TCY 0001       __size_of_montar_resposta 0054  
                      postdec1 000FE5                        postdec2 000FDD                        postinc0 000FEE  
                      postinc1 000FE6                        postinc2 000FDE                     ??_putsXLCD 0022  
            __end_of_putrsXLCD 2416                      _PORTDbits 000F83                     _verifica_b 2416  
      __end_of_despertarAlarme 2382                      _TRISBbits 000F93                      _TRISCbits 000F94  
                   ?_LCD_Clear 0001          __size_of_SetDDRamAddr 005E       __end_of_envia_respostaTX 22DE  
            ??_inicializaTela1 0022              ??_inicializaTela2 0022               ??_tratar_relogio 0009  
      __end_of_controlaCursorR 1DFC              ??_inicializarUART 0020                      _TXSTAbits 000FAC  
   __size_of_converte_char_hex 006E                    ?_exibirData 007C            _realizar_alteracoes 2016  
                  ?_exibirHora 007C           __size_of_Delay10TCYx 0010                   _SetDDRamAddr 1F5C  
         __size_of_Delay1KTCYx 0010   __end_of_SerialRxPinInterrupt 19A6             SetDDRamAddr@DDaddr 0021  
        __end_of_trata_comando 2160            start_initialization 2160          __size_of_exibirAlarme 039A  
         ?_realizar_alteracoes 0001               ??_controlaCursor 0063              __size_of_BusyXLCD 003A  
            __size_of_InitXLCD 0012          __end_of_tratar_alarme 1AA6                ??_DelayFor18TCY 0021  
            __size_of_OpenXLCD 00A8          __end_of_atualiza_tela 23E6                    tx_data@data 0020  
                ?_WriteCmdXLCD 0001                    __pdataBANK0 00A4                   _exibirAlarme 08DC  
            ??_montar_resposta 0020                    ?_verifica_b 0001                    __pbssCOMRAM 0022  
                __pcstackBANK0 0060               ?_despertarAlarme 0001          ??_realizar_alteracoes 0020  
                  ??_LCD_Clear 0022                 _maquina_estado 20C0               _verifica_comando 2442  
              tratar_relogio@c 0005                tratar_relogio@r 0007            __size_of_exibirData 017A  
          __size_of_exibirHora 039A                Delay1KTCYx@unit 0020                    sprintf@flag 0077  
                  sprintf@prec 0078               ?_controlaCursorR 0001                      __pnvBANK0 00BC  
               putsXLCD@buffer 0060               ___lwdiv@dividend 0060                      __pintcode 0008  
               ??_WriteCmdXLCD 0021                    _flagDisplay 00C0                  ?_Delay10KTCYx 0001  
                     ?___lwdiv 0060                       ?___lwmod 0067                      _despertar 21EA  
                    _ajustarT1 1AA6              __size_of_putsXLCD 0036          __end_of_WriteDataXLCD 2266  
                  __smallconst 0800         __end_of_maquina_estado 2110                 __size_of_crc16 000A  
             ___lwdiv@quotient 0065                       ?_tx_data 0001                       ?_sprintf 006B  
                     _BUFFRESP 0088                       _LATBbits 000F8A                  ?_DelayPORXLCD 0001  
         _SerialRxPinInterrupt 0008                       i2u300_40 1080                       i2u301_40 10BE  
                     i2u302_40 1100                      _posCursor 0028                       i2u304_40 11B6  
                     i2u335_40 18E8            __size_of_verifica_b 002C                       _PIR1bits 000F9E  
              OpenXLCD@lcdtype 0063                 ??_Delay10KTCYx 0020                  exibirData@dia 007C  
                exibirData@ano 0080                  exibirData@mes 007E                     ?_despertar 0020  
                   ?_ajustarT1 0001                  exibirAlarme@h 007C                  exibirAlarme@m 007E  
                exibirAlarme@s 0080                      _putrsXLCD 23E6                _inicializaTela1 1CE8  
              _inicializaTela2 1DFC                ?_maquina_estado 0001                _inicializarUART 2382  
             Delay10KTCYx@unit 0021                      copy_data0 2174              ?_envia_respostaTX 0001  
                     _BusyXLCD 22DE                       _InitXLCD 24A2         __size_of_ajustarAlarme 00A8  
           ??_envia_respostaTX 0021                 tratar_alarme@c 0020                 ??_DelayPORXLCD 0021  
        ?_SerialRxPinInterrupt 0001                       _OpenXLCD 1C40                       __Hrparam 0000  
                     __Lrparam 0000                   ??_exibirData 0022                   ??_exibirHora 0022  
             __size_of___lwdiv 0078               __size_of___lwmod 005C                     sprintf@val 0079  
                   ?_putrsXLCD 0082                ___lwdiv@divisor 0062                       _flagTela 00BC  
              ___lwdiv@counter 0064                       __ptext10 234E                       __ptext11 21EA  
                     __ptext20 0C76                       __ptext12 23B4                       __ptext21 170A  
                     __ptext13 1DFC                       __ptext30 24A2                       __ptext22 158C  
                     __ptext14 2318                       __ptext31 1C40                       __ptext23 1FBA  
                     __ptext15 08DC                       __ptext32 2266                       __ptext24 1E76  
                     __ptext16 21A6                       __ptext41 1010                       __ptext33 1F5C  
                     __ptext25 1D72                       __ptext17 1CE8                       __ptext42 2416  
                     __ptext34 24EA                       __ptext26 1AA6                       __ptext18 23E6  
                     __ptext43 1EEE                       __ptext35 24B4                       __ptext27 1B98  
                     __ptext19 2228                       __ptext36 247A                       __ptext28 19A6  
                     __ptext37 22DE                       __ptext29 2490                       __ptext38 24F2  
                     __ptext39 24C4           __end_of_WriteCmdXLCD 22A4               __size_of_tx_data 000C  
                     _contador 009B               __size_of_sprintf 017E             __end_of_exibirData 1884  
           __end_of_exibirHora 1010                  __size_of_main 01FA                _montar_resposta 206C  
                ??_Delay10TCYx 0020                       int$flags 0040       __end_of_verifica_comando 2462  
                     _putsXLCD 2318                    ??_despertar 0022                  ??_Delay1KTCYx 0020  
                  ??_ajustarT1 0020        __end_of_inicializaTela1 1D72        __end_of_inicializaTela2 1E76  
      __end_of_inicializarUART 23B4                  _ajustarAlarme 1B98                   ??_verifica_b 0003  
                   _INTCONbits 000FF2                    _qtdDias_mes 00A4           __end_of_Delay10KTCYx 2490  
                     intlevel2 0000                      sprintf@ap 0075                      sprintf@sp 006B  
             ___lwmod@dividend 0067         ??_SerialRxPinInterrupt 0012             exibirAlarme@string 008F  
        converte_char_hex@dado 0001                    _serial_data 002C         __size_of_trata_comando 0050  
           __end_of_verifica_b 2442          __end_of_DelayFor18TCY 24FA                    _tempoAlarme 0022  
      __size_of_tratar_relogio 0382                 ?_ajustarAlarme 0001    __end_of_realizar_alteracoes 206C  
          __end_of_Delay10TCYx 24D4                       sprintf@c 007B                       sprintf@f 006D  
             exibirData@string 0093           __end_of_DelayPORXLCD 24F2                    ??_putrsXLCD 0022  
              ___lwmod@divisor 0069            __end_of_Delay1KTCYx 24C4                ___lwmod@counter 0020  
       __size_of_tratar_alarme 0100         __size_of_atualiza_tela 0032        __end_of_montar_resposta 20C0  
     __size_of_despertarAlarme 0034  
